Automation test cases in rails
1. BDD vs TDD
3. Rspecs
4. Factory girl

Unit Test - test of individual component in an isolation.
Granularity of test?
Specification
FeedBack
Regression
Granularity

## TDD -Test Driven Development

Unit Test - 
- Writing Unit Tests for existing code can be difficult... or impossible
- A Unit Test is a test of a component in isolation
- In order to test is isolation, any external dependencies must be "mocked"
- An example of something that is frequently "mocked" is a database connection
- Units Tests tend to be very fast to run.

Test Driven Development:
- It's an iterative process: write a small test... write just enough code to get the test to pass. Rinse and repeat.
- The tests and the code that the tests "cover" are born and grow together. They are intertwined.
- Test are written before the code

Process Of TDD
TDD methodology follows a very simple 6 step process:

1) Write a test case: Based on the requirements, write an automated test case.

2) Run all the test cases: Run these automated test cases on the currently developed code.

3) Develop the code for that test cases: If the test case fails, then, write the code to make that test-case work as expected.

4) Run test cases again: Run the test cases again and check if all the test cases developed so far are implemented.

5) Refactor your code: This is an optional step. However, it’s important to refactor your code to make it more readable and reusable.

6) Repeat the steps 1- 5 for new test cases: Repeat the cycle for the other test cases until all the test cases are implemented.

The teams that implement TDD, take more time for development however, they tend to find very few defects. TDD results in improved quality of code and the code that is more reusable and flexible.

TDD also helps in achieving high test coverage of about 90-100%. The most challenging thing for developers following TDD is to write their test cases before writing the code.

Some of the tools which support TDD are: JUnit, TestNG, NUnit, etc.

TDD is iterative development process. IT instructs developer to write code only if automated test has failed.

## BDD - Behavior Driven Development
The test made up of three distinct sections: Context, Event, Outcomes
- Context is the "starting state"
- Event is the thing that the user does
- Outcomes are the expected results of what the user does
- The test describes in a very direct way the set of the behaviours that the customer can expect from the system.

Context - Starting State
Event - What User Does
Outcomes - The Expected Results

BDD stands for Behavior Driven Development. BDD is an extension to TDD where instead of writing the test cases, we start by writing a behavior.


Process Of BDD
The process involved in BDD methodology also consists of 6 steps and is very similar to that of TDD.

1) Write the behavior of the application: The behavior of an application is written in simple English like language by the product owner or the business analysts or QAs.

2) Write the automated scripts: This simple English like language is then converted into programming tests.

3) Implement the functional code: The functional code underlying the behavior is then implemented.

4) Check if the behavior is successful: Run the behavior and see if it is successful. If successful, move to the next behavior otherwise fix the errors in the functional code to achieve the application behavior.

5) Refactor or organize code: Refactor or organize your code to make it more readable and re-usable.

6) Repeat the steps 1-5 for new behavior: Repeat the steps to implement more behaviors in your application.
Some of the tools which support BDD are SpecFlow, Cucumber, MSpec, etc.

## TDD Vs BDD

TDD focuses on how the functionality is implemented. But BDD focuses on the behavior of an application for the end user.
In TDD Test cases are written in a programming language.But for BDD	Scenarios are more readable when compared to TDD as they are written in simple English format.
TDD reduces the likelihood of having bugs in your tests. For BDD bugs in tests are difficult to track when compared to TDD.
TDD might be a better approach for projects which involve API and third-party tools.
And BDD might be a better approach for projects which are driven by user actions. For eg: e-commerce website, application system, etc.




## Automated Testing in Ruby on Rails
## Test Your Ruby Code With RSpec
Rspec is ruby testing framework which is very famous
rspec.info
generate gem in project using => bundle init
gem 'rspec', '~>3.0'

(base) itsacheckmate@itsacheckmate:~/Training/Rails/airport$ gem install rspec
Fetching rspec-mocks-3.11.1.gem
Fetching rspec-3.11.0.gem
Fetching rspec-expectations-3.11.0.gem
Fetching rspec-support-3.11.0.gem
Fetching rspec-core-3.11.0.gem
Successfully installed rspec-support-3.11.0
Successfully installed rspec-mocks-3.11.1
Successfully installed rspec-expectations-3.11.0
Successfully installed rspec-core-3.11.0
Successfully installed rspec-3.11.0
Parsing documentation for rspec-support-3.11.0
Installing ri documentation for rspec-support-3.11.0
Parsing documentation for rspec-mocks-3.11.1
Installing ri documentation for rspec-mocks-3.11.1
Parsing documentation for rspec-expectations-3.11.0
Installing ri documentation for rspec-expectations-3.11.0
Parsing documentation for rspec-core-3.11.0
Installing ri documentation for rspec-core-3.11.0
Parsing documentation for rspec-3.11.0
Installing ri documentation for rspec-3.11.0
Done installing documentation for rspec-support, rspec-mocks, rspec-expectations, rspec-core, rspec after 1 seconds
5 gems installed

(base) itsacheckmate@itsacheckmate:~/Training/Rails/airport$ rspec -v
RSpec 3.11
  - rspec-core 3.11.0
  - rspec-expectations 3.11.0
  - rspec-mocks 3.11.1
  - rspec-support 3.11.0

(base) itsacheckmate@itsacheckmate:~/Training/Rails/airport$ bundle binstubs rspec-core
Resolving dependencies...


require 'rspec/autorun'

# then have to write describe block which club toger all the test for the class in one block
describe ClassName do

end


## code 1
class Calculator
  def add(a,b)

  end 

end


describe Calculator do
  it "adds two numbers" do
    calculator = Calculator.new

    expect(calculator.add(2,3)to eq(5))
  end
end

- Result
(base) itsacheckmate@itsacheckmate:~/Training/Rails/airport$ ruby calculator.rb 
F

Failures:

  1) Calculator adds two numbers
     Failure/Error: expect(calculator.add(2,3)).to eq(5)
     
       expected: 5
            got: nil
     
       (compared using ==)
     # calculator.rb:15:in `block (2 levels) in <main>'

Finished in 0.02294 seconds (files took 0.04687 seconds to load)
1 example, 1 failure

Failed examples:

rspec calculator.rb:12 # Calculator adds two numbers

## code 2
class Calculator
  def add(a,b)
    a+b
  end 

end


describe Calculator do
  it "adds two numbers" do
    calcualtor = Calculator.new

    expect(calculator.add(2,3)to eq(5))
  end
end

- Result
(base) itsacheckmate@itsacheckmate:~/Training/Rails/airport$ ruby calculator.rb 
.

Finished in 0.00135 seconds (files took 0.04651 seconds to load)
1 example, 0 failures




## 
(base) itsacheckmate@itsacheckmate:~/Training/Rails/airport$ bin/rspec --init
  create   .rspec
  create   spec/spec_helper.rb

Rspec results comes in yellow it means it is pending which is it does not have its block
(base) itsacheckmate@itsacheckmate:~/Training/Rails/airport$ bin/rspec
*

Pending: (Failures listed here are expected and do not affect your suite's status)

  1) Bouncer rejects xx from entring the venue
     # Not yet implemented
     # ./spec/bouncer_spec.rb:2


Finished in 0.00217 seconds (files took 0.04559 seconds to load)
1 example, 0 failures, 1 pending

After creating block
(base) itsacheckmate@itsacheckmate:~/Training/Rails/airport$ bin/rspec
F

Failures:

  1) Bouncer rejects xx from entring the venue
     Failure/Error: b = Bouncer.new
     
     NameError:
       uninitialized constant Bouncer
     # ./spec/bouncer_spec.rb:3:in `block (2 levels) in <top (required)>'

Finished in 0.00176 seconds (files took 0.04639 seconds to load)
1 example, 1 failure

Failed examples:

rspec ./spec/bouncer_spec.rb:2 # Bouncer rejects xx from entring the venue 



Setting up Rspec
Step 1 — Delete Any Existing Test Folders
If  generated a new rails app using rails new <app> without using any additional flags, remove the app/test directory

base) itsacheckmate@itsacheckmate:~/Training/Rails/airport$ bundle
Your Gemfile lists the gem capybara (>= 0) more than once.
You should probably keep only one of them.
Remove any duplicate entries and specify the gem only once.
While it's not a problem now, it could cause errors if you change the version of one of them later.
Fetching gem metadata from https://rubygems.org/..........
Resolving dependencies...
Installing database_cleaner-core 2.0.1
Installing rspec-support 3.9.4 (was 3.11.0)
Installing factory_girl 4.9.0
Fetching rspec-core 3.9.3 (was 3.11.0)
Fetching rspec-expectations 3.9.4 (was 3.11.0)
Fetching rspec-mocks 3.9.1 (was 3.11.1)
Installing byebug 11.1.3 with native extensions
Fetching database_cleaner-active_record 2.0.1
Fetching factory_girl_rails 4.9.0
Installing database_cleaner-active_record 2.0.1
Fetching database_cleaner 2.0.1
Installing rspec-mocks 3.9.1 (was 3.11.1)
Installing rspec-expectations 3.9.4 (was 3.11.0)
Installing factory_girl_rails 4.9.0
Installing rspec-core 3.9.3 (was 3.11.0)
Fetching rspec-rails 3.9.1
Installing rspec-rails 3.9.1
Installing database_cleaner 2.0.1
Bundle complete! 29 Gemfile dependencies, 110 gems now installed.
Use `bundle info [gemname]` to see where a bundled gem is installed.

Step 2 — Add Gems
 add the following gems to the :development, :test group in my Gemfile and run bundle.

group :development, :test do
  gem 'byebug', platform: :mri
  gem 'rspec-rails', '~> 3.5'
  gem 'factory_girl_rails'
  gem 'capybara'
  gem 'database_cleaner'
end
Briefly running through these gems one-by-one:

byebug allows for step-through debugging by placing byebug anywhere in the app.
rspec-rails is the testing framework.
factory_girl_rails replaces Rails fixtures for generating data to use in the tests.
capybara provides helper methods that make integration testing easier.
database_cleaner allows us to manage our testing database with precision: we decide when to wipe data (e.g. after, before tests).

Step 3 — Run Rspec Generator
Currently, the app directory doesn’t include a app/test/ directory (remember we deleted it in step 1). This is where the Rspec generator, which will generate app/spec/, comes in:

rails generate rspec:install
This adds the following files in a app/spec directory:

spec/spec_helper.rb
spec/rails_helper.rb
and app/.rspec in the project’s root directory.




Created the new Model department to see rspec created new files other than what is rails default and created 2 test for it and using rspec in the developmnet environment.



 Pending: (Failures listed here are expected and do not affect your suite's status)

  1) Department is not valid without a name
     # Not yet implemented
     # ./spec/models/department_spec.rb:4

  2) Department is not valid without a description
     # Not yet implemented
     # ./spec/models/department_spec.rb:5


Finished in 0.00139 seconds (files took 1.62 seconds to load)
2 examples, 0 failures, 2 pending



Aircraft rspec test cases 
(base) itsacheckmate@itsacheckmate:~/Training/Rails/airport$ rspec spec/models/aircraft_spec.rb 
.*

Pending: (Failures listed here are expected and do not affect your suite's status)

  1) Aircraft is not valid without a name
     # Not yet implemented
     # ./spec/models/aircraft_spec.rb:10


Finished in 0.01639 seconds (files took 1.48 seconds to load)
2 examples, 0 failures, 1 pending

(base) itsacheckmate@itsacheckmate:~/Training/Rails/airport$ rspec spec/models/aircraft_spec.rb 
Finished in 0.01838 seconds (files took 1.56 seconds to load)
2 examples, 0 failures


Since our specs are passing, we’ve reached the green step of the red-green-refactor flow. It’s time to refactor our examples. 
This refactoring step is quite simple.
We’ll add a subject to our specs, which will be the main object under test in this spec file. 
After that, we will appropriately set the object attributes in the examples

So here subject is the testing subject—meaning that it will be the object upon which our examples will set expectations.
Continuous Integration (CI) is a software development practice in which the code is continually tested on an automated CI Pipeline. Teams using CI enjoy the benefits of having the code continually tested, they can merge changes more often, usually many times a day. A good CI setup raises the bar of software quality considerably.

Fixtures are data that you can feed into your unit testing. 
They are automatically created whenever rails generates the corresponding tests for your controllers and models. 
They are only used for your tests and cannot actually be accessed when running the application.

Factory Girl
Fixtures are data that you can feed into your unit testing. 
They are automatically created whenever rails generates the corresponding tests for your controllers and models. 
They are only used for your tests and cannot actually be accessed when running the application.
This gem provides a clean syntax for creating new model instances and lets you manage the attributes from a single fixture file. 
FactoryGirl enables you to:
- Create new model instances from a fixture file
- Interact with the test database to create test data
- Automatically generate fixtures when you run Rails generators
- Allow for automatic database relationship connections, e.g. you can have a fixture for a Post that has a belongs_to relationship to an Author and call them in specs the same way you call them in the application
- Store the created values in variables
- Create multiple fixtures for each model

Build works as the new  and does not insert record but create works same as create and insert the record.

Loading development environment (Rails 7.0.3.1)
3.0.0 :001 > FactoryGirl.build(:aircraft)
 => 
#<Aircraft:0x000056023ac18490                                                                              
 id: nil,                                                                                                  
 name: "Airmax",                                                                                           
 cruising_range: 1300,                                                                                     
 created_at: nil,                                                                                          
 updated_at: nil,                                                                                          
 aircraft_updated_at: nil,                                                                                 
 certifieds_count: 0,                                                                                      
 place: "Delhi",                                                                                           
 availability: nil> 

 3.0.0 :002 > FactoryGirl.create(:aircraft)
  TRANSACTION (0.2ms)  BEGIN
  Aircraft Create (7.1ms)  INSERT INTO "aircrafts" ("name", "cruising_range", "created_at", "updated_at", "aircraft_updated_at", "certifieds_count", "place") VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING "id"  [["name", "Airmax"], ["cruising_range", 1300], ["created_at", "2022-08-05 22:17:31.742447"], ["updated_at", "2022-08-05 22:17:31.742447"], ["aircraft_updated_at", nil], ["certifieds_count", 0], ["place", "Delhi"]]
  TRANSACTION (0.7ms)  COMMIT                                                 
 =>                                                                           
#<Aircraft:0x000056023a8494e0                                                 
 id: 37,                                                                      
 name: "Airmax",                                                              
 cruising_range: 1300,                                                        
 created_at: Fri, 05 Aug 2022 22:17:31.742447000 IST +05:30,                  
 updated_at: Fri, 05 Aug 2022 22:17:31.742447000 IST +05:30,                  
 aircraft_updated_at: nil,                                                    
 certifieds_count: 0,                                                         
 place: "Delhi",
 availability: nil> 