Automation test cases in rails
1. BDD vs TDD
3. Rspecs
4. Factory girl

Unit Test - test of individual component in an isolation.
Granularity of test?
Specification
FeedBack
Regression
Granularity

## TDD -Test Driven Development

Unit Test - 
- Writing Unit Tests for existing code can be difficult... or impossible
- A Unit Test is a test of a component in isolation
- In order to test is isolation, any external dependencies must be "mocked"
- An example of something that is frequently "mocked" is a database connection
- Units Tests tend to be very fast to run.

Test Driven Development:
- It's an iterative process: write a small test... write just enough code to get the test to pass. Rinse and repeat.
- The tests and the code that the tests "cover" are born and grow together. They are intertwined.
- Test are written before the code

Process Of TDD
TDD methodology follows a very simple 6 step process:

1) Write a test case: Based on the requirements, write an automated test case.

2) Run all the test cases: Run these automated test cases on the currently developed code.

3) Develop the code for that test cases: If the test case fails, then, write the code to make that test-case work as expected.

4) Run test cases again: Run the test cases again and check if all the test cases developed so far are implemented.

5) Refactor your code: This is an optional step. However, itâ€™s important to refactor your code to make it more readable and reusable.

6) Repeat the steps 1- 5 for new test cases: Repeat the cycle for the other test cases until all the test cases are implemented.

The teams that implement TDD, take more time for development however, they tend to find very few defects. TDD results in improved quality of code and the code that is more reusable and flexible.

TDD also helps in achieving high test coverage of about 90-100%. The most challenging thing for developers following TDD is to write their test cases before writing the code.

Some of the tools which support TDD are: JUnit, TestNG, NUnit, etc.

TDD is iterative development process. IT instructs developer to write code only if automated test has failed.

## BDD - Behavior Driven Development
The test made up of three distinct sections: Context, Event, Outcomes
- Context is the "starting state"
- Event is the thing that the user does
- Outcomes are the expected results of what the user does
- The test describes in a very direct way the set of the behaviours that the customer can expect from the system.

Context - Starting State
Event - What User Does
Outcomes - The Expected Results

BDD stands for Behavior Driven Development. BDD is an extension to TDD where instead of writing the test cases, we start by writing a behavior.


Process Of BDD
The process involved in BDD methodology also consists of 6 steps and is very similar to that of TDD.

1) Write the behavior of the application: The behavior of an application is written in simple English like language by the product owner or the business analysts or QAs.

2) Write the automated scripts: This simple English like language is then converted into programming tests.

3) Implement the functional code: The functional code underlying the behavior is then implemented.

4) Check if the behavior is successful: Run the behavior and see if it is successful. If successful, move to the next behavior otherwise fix the errors in the functional code to achieve the application behavior.

5) Refactor or organize code: Refactor or organize your code to make it more readable and re-usable.

6) Repeat the steps 1-5 for new behavior: Repeat the steps to implement more behaviors in your application.
Some of the tools which support BDD are SpecFlow, Cucumber, MSpec, etc.

## TDD Vs BDD

TDD focuses on how the functionality is implemented. But BDD focuses on the behavior of an application for the end user.
In TDD Test cases are written in a programming language.But for BDD	Scenarios are more readable when compared to TDD as they are written in simple English format.
TDD reduces the likelihood of having bugs in your tests. For BDD bugs in tests are difficult to track when compared to TDD.
TDD might be a better approach for projects which involve API and third-party tools.
And BDD might be a better approach for projects which are driven by user actions. For eg: e-commerce website, application system, etc.




## Automated Testing in Ruby on Rails
## Test Your Ruby Code With RSpec
Rspec is ruby testing framework which is very famous
rspec.info
generate gem in project using => bundle init
gem 'rspec', '~>3.0'

(base) itsacheckmate@itsacheckmate:~/Training/Rails/airport$ gem install rspec
Fetching rspec-mocks-3.11.1.gem
Fetching rspec-3.11.0.gem
Fetching rspec-expectations-3.11.0.gem
Fetching rspec-support-3.11.0.gem
Fetching rspec-core-3.11.0.gem
Successfully installed rspec-support-3.11.0
Successfully installed rspec-mocks-3.11.1
Successfully installed rspec-expectations-3.11.0
Successfully installed rspec-core-3.11.0
Successfully installed rspec-3.11.0
Parsing documentation for rspec-support-3.11.0
Installing ri documentation for rspec-support-3.11.0
Parsing documentation for rspec-mocks-3.11.1
Installing ri documentation for rspec-mocks-3.11.1
Parsing documentation for rspec-expectations-3.11.0
Installing ri documentation for rspec-expectations-3.11.0
Parsing documentation for rspec-core-3.11.0
Installing ri documentation for rspec-core-3.11.0
Parsing documentation for rspec-3.11.0
Installing ri documentation for rspec-3.11.0
Done installing documentation for rspec-support, rspec-mocks, rspec-expectations, rspec-core, rspec after 1 seconds
5 gems installed

(base) itsacheckmate@itsacheckmate:~/Training/Rails/airport$ rspec -v
RSpec 3.11
  - rspec-core 3.11.0
  - rspec-expectations 3.11.0
  - rspec-mocks 3.11.1
  - rspec-support 3.11.0

(base) itsacheckmate@itsacheckmate:~/Training/Rails/airport$ bundle binstubs rspec-core
Resolving dependencies...


require 'rspec/autorun'

# then have to write describe block which club toger all the test for the class in one block
describe ClassName do

end


## code 1
class Calculator
  def add(a,b)

  end 

end


describe Calculator do
  it "adds two numbers" do
    calculator = Calculator.new

    expect(calculator.add(2,3)to eq(5))
  end
end

- Result
(base) itsacheckmate@itsacheckmate:~/Training/Rails/airport$ ruby calculator.rb 
F

Failures:

  1) Calculator adds two numbers
     Failure/Error: expect(calculator.add(2,3)).to eq(5)
     
       expected: 5
            got: nil
     
       (compared using ==)
     # calculator.rb:15:in `block (2 levels) in <main>'

Finished in 0.02294 seconds (files took 0.04687 seconds to load)
1 example, 1 failure

Failed examples:

rspec calculator.rb:12 # Calculator adds two numbers

## code 2
class Calculator
  def add(a,b)
    a+b
  end 

end


describe Calculator do
  it "adds two numbers" do
    calcualtor = Calculator.new

    expect(calculator.add(2,3)to eq(5))
  end
end

- Result
(base) itsacheckmate@itsacheckmate:~/Training/Rails/airport$ ruby calculator.rb 
.

Finished in 0.00135 seconds (files took 0.04651 seconds to load)
1 example, 0 failures
