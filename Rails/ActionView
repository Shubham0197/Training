Action View
Web requests are handled by Action Controller and Action View.
Action View is then responsible for compiling the response.

Naming Convention in rails 
The views share their name with the associated controller action
The complete HTML returned to the client is composed of a combination of this ERB file, a layout template that wraps it, and all the partials that the view may reference.
So for book action in library controller the corrresponding view would be in library subfolder in 
view the file would be book.html.erb
Templates
If the template file has a .erb extension then it uses a mixture of ERB (Embedded Ruby) and HTML
If the template file has a .builder extension then the Builder::XmlMarkup library is used.

1. ERB
So to run ruby code in erb have to write code in <% ... %>
The <% %> tags are used to execute Ruby code that does not return anything, such as conditions, loops, or blocks, and the <%= %> tags are used when you want output.

(<%= %>). regular output functions such as print and puts wont be rendered to the view with ERB templates so instead of them have to write = replace insteaad of print or puts


Action Helpers 
Helpers are use to extract complex logic out of view so that we cn qrganize the code better.
eg, link_to, form_for, img_
or can also make new helper method in the application helper  in the helper folder

can also write specific for the specific controller view like for aircraft_helper method written in this will only be available for the view of aircraft controller but if want to define helper method whichi is available for the all the views will have to define them in the application helper. 

Can also write ht ehelper method in the controller
either by wriing helper_method :method_name

or include ApplicationHelper
 

Action MAilers
They allows to send emails from application using classes and views
Can send welcome email, confirmation email, weekly updates email.
They are in the Mailer folder in the app

Can make the using rails generator
 rails g mailer crud_notification create_notification delete_notification   
    create  app/mailers/crud_notification_mailer.rb                                            
      invoke  erb                                                                                
      create    app/views/crud_notification_mailer                                               
      create    app/views/crud_notification_mailer/create_notification.text.erb                  
      create    app/views/crud_notification_mailer/create_notification.html.erb
      create    app/views/crud_notification_mailer/delete_notification.text.erb
      create    app/views/crud_notification_mailer/delete_notification.html.erb
      invoke  test_unit     
      create    test/mailers/crud_notification_mailer_test.rb
      create    test/mailers/previews/crud_notification_mailer_preview.rb


can call mailer in the controller  using 
CrudNotificationMailer.create_notification(@aircraft).deliver_now
or 
CrudNotificationMailer.create_notification(@aircraft).deliver_later


Debugging in the rails in views.
Can use the debug helper method  to see the all the details using variable details like
controller, views variable data etc.
 
<%= debug(params) % >
can also do the same thing using the <command>
<%= simple_format @var.to_yaml% >

or also can call the console in the views to debug while the view is open and rails server is running in the browser instead of coming to the rails console.

can also display whats in the array using the instect method in the view in browser.


Action Text
text editor in the browser
introduced in the rails 6
it is wysiwyg
before used gem
trix text editor is introduced for editing, formating, links, embedded images  and galleries.
It was designed by Microsoft to support live editing of web pages in
installation
rails action_text:install

> Employee.last
=> #<Employee id: 23, name: "asfsef", salary: nil, mobile_number: "242424", DOB: "1997-01-01", created_at: "2022-06-27 16:40:19.130513000 +0000", updated_at: "2022-06-27 16:40:19.169421000 +0000", count_of_pilots: nil, trainer_id: nil>
>> Employee.last.content
=> #<ActionText::RichText id: 1, name: "content", body: #<ActionText::Content "<div class=\"trix-conte...">, record_type: "Employee", record_id: 23, created_at: "2022-06-27 16:40:19.143567000 +0000", updated_at: "2022-06-27 16:40:19.143567000 +0000">
>> print Employee.last.content
=> nil
>> print Employee.last.content.count
NoMethodError: undefined method `count' for #<ActionText::RichText id: 1, name: "content", body: #<ActionText::Content "<div class=\"trix-conte...">, record_type: "Employee", record_id: 23, created_at: "2022-06-27 16:40:19.143567000 +0000", updated_at: "2022-06-27 16:40:19.143567000 +0000">
	from /home/itsacheckmate/Training/Rails/airport/app/views/aircraft/index.html.erb:33:in `_app_views_aircraft_index_html_erb__2847363307944460640_58800'
>> print Employee.last.content
=> nil
>> e = Employee.last
=> #<Employee id: 23, name: "asfsef", salary: nil, mobile_number: "242424", DOB: "1997-01-01", created_at: "2022-06-27 16:40:19.130513000 +0000", updated_at: "2022-06-27 16:40:19.169421000 +0000", count_of_pilots: nil, trainer_id: nil>
>> e.image
=> #<ActiveStorage::Attached::One:0x00007f9874b60b48 @name="image", @record=#<Employee id: 23, name: "asfsef", salary: nil, mobile_number: "242424", DOB: "1997-01-01", created_at: "2022-06-27 16:40:19.130513000 +0000", updated_at: "2022-06-27 16:40:19.169421000 +0000", count_of_pilots: nil, trainer_id: nil>>
>> e.image.exists?
NoMethodError: undefined method `exists?' for #<ActiveStorage::Attached::One:0x00007f9874b60b48 @name="image", @record=#<Employee id: 23, name: "asfsef", salary: nil, mobile_number: "242424", DOB: "1997-01-01", created_at: "2022-06-27 16:40:19.130513000 +0000", updated_at: "2022-06-27 16:40:19.169421000 +0000", count_of_pilots: nil, trainer_id: nil>>
	from /home/itsacheckmate/Training/Rails/airport/app/views/aircraft/index.html.erb:33:in `_app_views_aircraft_index_html_erb__2847363307944460640_58800'
>> e.image.attached?
=> true
>> e.content.attached?
NoMethodError: undefined method `attached?' for #<ActionText::RichText id: 1, name: "content", body: #<ActionText::Content "<div class=\"trix-conte...">, record_type: "Employee", record_id: 23, created_at: "2022-06-27 16:40:19.143567000 +0000", updated_at: "2022-06-27 16:40:19.143567000 +0000">
	from /home/itsacheckmate/Training/Rails/airport/app/views/aircraft/index.html.erb:33:in `_app_views_aircraft_index_html_erb__2847363307944460640_58800'
>> e.content.to_s
=> "<div class=\"trix-content\">\n  <div>wfdsgdsfgdsgsgsdgrfdfdbfd</div>\n</div>\n"
>>  

helper 
<%= link_to name,path , class: 'nav-link' % >
url helpers in the link_to helper to write the link for the route to process
url helper can be seen from command  rails routes in the terminal

