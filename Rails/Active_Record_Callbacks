Active Record Callbacks
The Object Life Cycle
objects may be created, updated, and destroyed. Active Record provides hooks into this object life cycle
Callbacks allow to trigger logic before or after an alteration of an object's state.

Callbacks Overview
In order to use the available callbacks, you need to register them. You can implement the callbacks as ordinary methods and use a macro-style class method to register them as callbacks
The macro-style class methods can also receive a block. Consider using this style if the code inside your block is so short that it fits in a single line
It is considered good practice to declare callback methods as private. If left public, they can be called from outside of the model and violate the principle of object encapsulation.
Callbacks can also be registered to only fire on certain life cycle events

3.0.0 :005 > po.save!
Hello before create here
  TRANSACTION (0.2ms)  BEGIN                              
  ProductOption Create (1.8ms)  INSERT INTO "product_options" ("product_option", "product_id") VALUES ($1, $2)  [["product_option", "Mobile"], ["product_id", nil]]        
Hello after create here                                   
  TRANSACTION (0.6ms)  COMMIT                             
 => true 

 4 Running Callbacks
The following methods trigger callbacks:
create
create!
destroy
destroy!
destroy_all
destroy_by
save
save!
save(validate: false)
toggle!
touch
update_attribute
update
update!
valid?
Additionally, the after_find callback is triggered by the following finder methods:

all
first
find
find_by
find_by_*
find_by_*!
find_by_sql
last
The after_initialize callback is triggered every time a new object of the class is initialized.

The find_by_* and find_by_*! methods are dynamic finders 


 Halting Execution
As you start registering new callbacks for your models, they will be queued for execution.
 This queue will include all your model's validations, the registered callbacks, and the database operation to be executed.

The whole callback chain is wrapped in a transaction. 
If any callback raises an exception, the execution chain gets halted and a ROLLBACK is issued. 

To intentionally stop a chain use an write follwing  in the catch and throw exception

throw :abort




 Available Callbacks
 list with all the available Active Record callbacks, 
 listed in the same order in which they will get called during the respective operations

1 Creating an Object

before_validation- 
after_validation-
Defines a callback that will get called right after or before validation.
Runs 
3.0.0 :007 > po = ProductOption.new
 => #<ProductOption:0x00007f7d10a036a8 product_option: nil, product_id: nil> 
3.0.0 :008 > po.product_option= "Mobile"
 => "Mobile" 
 3.0.0 :009 > po.valid?
Before validation
 => true  
 3.0.0 :010 > po.product_option
 => "MOBILE" 
before_save-
3.0.0 :001 > Wallet.create!
Callback before_save  TRANSACTION (0.1ms)  BEGIN
  Wallet Create (1.9ms)  INSERT INTO "wallets" ("name", "amount", "lock_version", "type", "created_at", "updated_at", "customr_id") VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING "id"  [["name", nil], ["amount", nil], ["lock_version", 0], ["type", nil], ["created_at", "2022-06-14 16:22:02.295859"], ["updated_at", "2022-06-14 16:22:02.295859"], ["customr_id", nil]]           
  TRANSACTION (0.4ms)  COMMIT
 =>                         
#<Wallet:0x000055c5d7e0f5e0 
around_save-
3.0.0 :005 > Wallet.create(name: "asasasa")
Callback around_save 
  =>                                                          
#<Wallet:0x00007f4ec4873538                                   
 id: nil,                             
 name: "asasasa",                     
 amount: nil,
 lock_version: 0,
 type: nil,
 created_at: nil,
 updated_at: nil,
 customr_id: nil> 

before_create-
3.0.0 :001 > Wallet.create(name: "asasasa")
Callback before_create 
   TRANSACTION (0.0ms)  BEGIN         
  Wallet Create (0.2ms)  INSERT INTO "wallets" ("name", "amount", "lock_version", "type", "created_at", "updated_at", "customr_id") VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING "id"  [["name", "asasasa"], ["amount", nil], ["lock_version", 0], ["type", nil], ["created_at", "2022-06-14 16:25:46.424883"], ["updated_at", "2022-06-14 16:25:46.424883"], ["customr_id", nil]]     
  TRANSACTION (0.4ms)  COMMIT
 =>                         
#<Wallet:0x00007f5cb480c718 
 id: 3,                     
 name: "asasasa",
 amount: nil,
 lock_version: 0,
 type: nil,
 created_at: Tue, 14 Jun 2022 16:25:46.424883000 UTC +00:00,
 updated_at: Tue, 14 Jun 2022 16:25:46.424883000 UTC +00:00,
 customr_id: nil> 

around_create-
3.0.0 :001 > w = Wallet.create(name: "amazon")
Callback around_create 
  =>              
#<Wallet:0x00007fac7481f600
 id: nil,
 name: "amazon",
 amount: nil,
 lock_version: 0,
 type: nil,
 created_at: Tue, 14 Jun 2022 16:26:35.970641000 UTC +00:00,
 updated_at: Tue, 14 Jun 2022 16:26:35.970641000 UTC +00:00,
 customr_id: nil>
 3.0.0 :004 > w.save!
Callback around_create 
  => true 
after_create-
3.0.0 :001 > w = Wallet.create(name: "payzapp")
  TRANSACTION (0.1ms)  BEGIN
  Wallet Create (0.3ms)  INSERT INTO "wallets" ("name", "amount", "lock_version", "type", "created_at", "updated_at", "customr_id") VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING "id"  [["name", "payzapp"], ["amount", nil], ["lock_version", 0], ["type", nil], ["created_at", "2022-06-14 16:27:55.844276"], ["updated_at", "2022-06-14 16:27:55.844276"], ["customr_id", nil]]                                       
Callback after_create                                         
   TRANSACTION (0.4ms)  COMMIT                                
 =>                                                           
#<Wallet:0x000056363eadd7f0 
...                         
after_save-
3.0.0 :001 > w = Wallet.new(name: "payzapp")
 => 
#<Wallet:0x00007fa7a43532e0                                       
...  
3.0.0 :002 > w.save
  TRANSACTION (0.1ms)  BEGIN
  Wallet Create (0.3ms)  INSERT INTO "wallets" ("name", "amount", "lock_version", "type", "created_at", "updated_at", "customr_id") VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING "id"  [["name", "payzapp"], ["amount", nil], ["lock_version", 0], ["type", nil], ["created_at", "2022-06-14 16:29:32.055481"], ["updated_at", "2022-06-14 16:29:32.055481"], ["customr_id", nil]]                                           
Callback after_save

after_commit / after_rollback-
3.0.0 :002 > w = Wallet.create(name: "payzapp")
  TRANSACTION (0.1ms)  BEGIN
  Wallet Create (0.3ms)  INSERT INTO "wallets" ("name", "amount", "lock_version", "type", "created_at", "updated_at", "customr_id") VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING "id"  [["name", "payzapp"], ["amount", nil], ["lock_version", 0], ["type", nil], ["created_at", "2022-06-14 16:30:50.074559"], ["updated_at", "2022-06-14 16:30:50.074559"], ["customr_id", nil]]                      
  TRANSACTION (0.4ms)  COMMIT            
Callback after_commit / after_rollback   
  => 
#<Wallet:0x0000560bba76d01

3.2 Updating an Object
before_validation
after_validation
before_save
around_save
before_update
around_update
after_update
after_save
after_commit / after_rollback
3.0.0 :004 > wallet = Wallet.find(1)
  Wallet Load (0.2ms)  SELECT "wallets".* FROM "wallets" WHERE "wallets"."id" = $1 LIMIT $2  [["id", 1], ["LIMIT", 1]]                                                                 
 =>                                                                
#<Wallet:0x000055866437b208                      
...   
3.0.0 :007 > wall.update(:amount => 100)
Callback run here   
 Callback run here                                                                  
 Callback run here                                                                  
  => true  

Destroying an Object
before_destroy
around_destroy
after_destroy


3.0.0 :001 > wallet = Wallet.find(2)
  Wallet Load (0.1ms)  SELECT "wallets".* FROM "wallets" WHERE "wallets"."id" = $1 LIMIT $2  [["id", 2], ["LIMIT", 1]]                                                                 
 =>                                                                
#<Wallet:0x000055d8cdcb4278                                        
...                                                                
3.0.0 :002 > wallet.destroy
  TRANSACTION (0.2ms)  BEGIN
  Wallet Destroy (0.8ms)  DELETE FROM "wallets" WHERE "wallets"."id" = $1 AND "wallets"."lock_version" = $2  [["id", 2], ["lock_version", 0]]                         
Callback for destroy run here  100.0             
   TRANSACTION (1.4ms)  COMMIT    

3.0.0 :001 > wallet = Wallet.find(6)
  Wallet Load (0.1ms)  SELECT "wallets".* FROM "wallets" WHERE "wallets"."id" = $1 LIMIT $2  [["id", 6], ["LIMIT", 1]]                                                                     
 =>                                                                    
#<Wallet:0x00007fee8cd96480                                            
...                                                                    
3.0.0 :002 > wallet.persisted?
 => true 
3.0.0 :003 > wallet.destroy
Callback for destroy run here 
 Before yield 100.0  TRANSACTION (0.2ms)  BEGIN                        
  Wallet Destroy (0.7ms)  DELETE FROM "wallets" WHERE "wallets"."id" = $1 AND "wallets"."lock_version" = $2  [["id", 6], ["lock_version", 0]]                        
Before yield 100.0  TRANSACTION (1.5ms)  COMMIT  
 =>                                              
#<Wallet:0x00007fee8cd96480
 id: 6,
 name: "payzapp",
 amount: 100.0,
 lock_version: 0,
 type: nil,
 created_at: Tue, 14 Jun 2022 16:29:32.055481000 UTC +00:00,
 updated_at: Tue, 14 Jun 2022 16:29:32.055481000 UTC +00:00,
 customr_id: nil> 

around_* callbacks are invoked before the action, then when you want to invoke the action itself, you yield to it, then continue execution. That's why it's called around

The order goes like this: before, around, after.

So, a typical around_save would look like this:

def around_save
   #do something...
   yield #saves
   #do something else...
end


The difference between after_create, after_save and after_commit in Rails is that:

after_save is invoked when an object is created and updated
after_commit is called on create, update and destroy.
after_create is only called when creating an object


=====================================================================================================
after_initialize and after_find
The after_initialize callback will be called whenever an Active Record object is instantiated, 
either by directly using new or when a record is loaded from the database.
The after_find callback will be called whenever Active Record loads a record from the database. 
after_find is called before after_initialize if both are defined.
The after_initialize and after_find callbacks have no before_* counterparts, 
but they can be registered just like the other Active Record callbacks.

3.0.0 :001 > wallet = Wallet.new
 => 
#<Wallet:0x00007f69188092a0                                            
... 

3.0.0 :002 > wallet.amount
 => 100.0 

3.0.0 :001 > wallet = Wallet.find(7)
  Wallet Load (0.1ms)  SELECT "wallets".* FROM "wallets" WHERE "wallets"."id" = $1 LIMIT $2  [["id", 7], ["LIMIT", 1]]                                                                     
after find0.0                                                          
after initialize100.0                                                  
 =>                                                                    
#<Wallet:0x00007f5888898400                                            
...    

-----------------------------------------------------------------------------------------------
after_touch
The after_touch callback will be called whenever an Active Record object is touched.

3.0.0 :002 > wallet.touch
  TRANSACTION (0.4ms)  BEGIN
  Wallet Update (0.9ms)  UPDATE "wallets" SET "updated_at" = $1, "lock_version" = $2 WHERE "wallets"."id" = $3 AND "wallets"."lock_version" = $4  [["updated_at", "2022-06-15 13:00:54.012717"], ["lock_version", 1], ["id", 7], ["lock_version", 0]]                                                      
call back touch                                                    
  TRANSACTION (5.2ms)  COMMIT                                      
 => true   

 It can be used along with belongs_to:

 3.0.0 :001 > wallet = Wallet.find(1)
  Wallet Load (0.1ms)  SELECT "wallets".* FROM "wallets" WHERE "wallets"."id" = $1 LIMIT $2  [["id", 1], ["LIMIT", 1]]                                                                 
 =>                                                                
#<Wallet:0x00007fee70480a88                                        
...                                                                
3.0.0 :002 > wallet.touch
  TRANSACTION (0.2ms)  BEGIN
  Wallet Update (0.3ms)  UPDATE "wallets" SET "updated_at" = $1, "lock_version" = $2 WHERE "wallets"."id" = $3 AND "wallets"."lock_version" = $4  [["updated_at", "2022-06-15 13:19:11.504603"], ["lock_version", 5], ["id", 1], ["lock_version", 4]]                                                      
  Customr Load (0.1ms)  SELECT "customrs".* FROM "customrs" WHERE "customrs"."id" = $1 LIMIT $2  [["id", 1], ["LIMIT", 1]]
call back touch
  Customr Update (0.1ms)  UPDATE "customrs" SET "updated_at" = $1, "lock_customer" = $2 WHERE "customrs"."id" = $3 AND "customrs"."lock_customer" = $4  [["updated_at", "2022-06-15 13:19:11.516583"], ["lock_customer", 3], ["id", 1], ["lock_customer", 2]]
Customer/Wallet was touched
  TRANSACTION (0.4ms)  COMMIT
 => true 
========================================
## Relational Callbacks
Callbacks work through model relationships, and can even be defined by them.

3.0.0 :002 > cust.wallet.destroy
  Wallet Load (0.5ms)  SELECT "wallets".* FROM "wallets" WHERE "wallets"."customr_id" = $1 LIMIT $2  [["customr_id", 1], ["LIMIT", 1]]                                              
Callback for destroy run here                               
 Before yield 100.0  TRANSACTION (0.1ms)  BEGIN             
  Wallet Destroy (0.2ms)  DELETE FROM "wallets" WHERE "wallets"."id" = $1 AND "wallets"."lock_version" = $2  [["id", 1], ["lock_version", 5]]                                       
after yield 100.0  Customr Update (0.2ms)  UPDATE "customrs" SET "updated_at" = $1, "lock_customer" = $2 WHERE "customrs"."id" = $3 AND "customrs"."lock_customer" = $4  [["updated_at", "2022-06-15 16:59:00.747320"], ["lock_customer", 4], ["id", 1], ["lock_customer", 3]]                              
Customer/Wallet was touched                                 
  TRANSACTION (0.4ms)  COMMIT
 => 
#<Wallet:0x000055eb4f979e70
 id: 1,
 name: "Ashish",
 amount: 100.0,
 lock_version: 5,
 type: nil,
 created_at: Fri, 10 Jun 2022 12:50:35.515809000 UTC +00:00,
 updated_at: Wed, 15 Jun 2022 13:19:11.504603000 UTC +00:00,
 customr_id: 1> 

=======================================================
##  Conditional Callbacks
 As with validations,  calling of a callback method can be conditional on the satisfaction of a given predicate
It can be done  using the :if and :unless options, which can take a symbol, a Proc or an Array.
:if is used option when want to specify under which conditions the callback should be called. 
For the  conditions under which the callback should not be called, then :unless option is used

1 Using :if and :unless with a Symbol
2 Using :if and :unless with a Proc
3 Using both :if and :unless
Here the both conditoions mut be satisfies for the callbacks to be run

3.0.0 :001 > Wallet.create!(name: "HDFC", amount: 500)
Callback  run here 
   TRANSACTION (0.0ms)  BEGIN                               
  Wallet Create (0.3ms)  INSERT INTO "wallets" ("name", "amount", "lock_version", "type", "created_at", "updated_at", "customr_id") VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING "id"  [["name", "HDFC"], ["amount", 500.0], ["lock_version", 0], ["type", nil], ["created_at", "2022-06-15 17:36:50.439389"], ["updated_at", "2022-06-15 17:36:50.439389"], ["customr_id", nil]]                                                  
  TRANSACTION (0.4ms)  COMMIT                               
 =>                                                    
#<Wallet:0x000055c756b1b228                            
 id: 12,                                               
 name: "HDFC",
 amount: 500.0,
 lock_version: 0,
 type: nil,
 created_at: Wed, 15 Jun 2022 17:36:50.439389000 UTC +00:00,
 updated_at: Wed, 15 Jun 2022 17:36:50.439389000 UTC +00:00,
 customr_id: nil> 

 3.0.0 :003 > w.save
Callback  run here 
   TRANSACTION (0.1ms)  BEGIN                               
  Wallet Update (0.3ms)  UPDATE "wallets" SET "name" = $1, "updated_at" = $2, "lock_version" = $3 WHERE "wallets"."id" = $4 AND "wallets"."lock_version" = $5  [["name", "sdefeasfdgsdfsfs"], ["updated_at", "2022-06-15 17:46:35.203773"], ["lock_version", 4], ["id", 14], ["lock_version", 3]]           
  TRANSACTION (6.5ms)  COMMIT                               
 => true    

4 Multiple Callback Conditions
HEre the  callback only runs when all the :if conditions and none of the :unless conditions are evaluated to true.


3.0.0 :003 > y.save
Callback  run here 
   TRANSACTION (0.1ms)  BEGIN                          
  Wallet Update (0.3ms)  UPDATE "wallets" SET "amount" = $1, "updated_at" = $2, "lock_version" = $3 WHERE "wallets"."id" = $4 AND "wallets"."lock_version" = $5  [["amount", 100.0], ["updated_at", "2022-06-15 17:35:39.089368"], ["lock_version", 1], ["id", 10], ["lock_version", 0]]     
Callback  run here                           
   TRANSACTION (6.6ms)  COMMIT               
 => true 

===================================================================================
## Transaction Callbacks

There are two additional callbacks that are triggered by the completion of a database transaction: after_commit and after_rollback

Since using the after_commit callback only on create, update, or delete is common, there are aliases for those operations:
after_create_commit
after_update_commit
after_destroy_commit

There is also an alias for using the after_commit callback for both create and update together:
after_save_commit


The code executed within after_commit or after_rollback callbacks is itself not enclosed within a transaction.

3.0.0 :008 > emp.delete
  Employee Destroy (0.6ms)  DELETE FROM "employees" WHERE "employees"."id" = $1  [["id", 21]]     
/home/itsacheckmate/.rvm/gems/ruby-3.0.0/gems/activerecord-7
3.0.0 :001 > emp = Employee.last
  Employee Load (0.2ms)  SELECT "employees".* FROM "employees" ORDER BY "employees"."id" DESC LIMIT $1  [["LIMIT", 1]]
 =>                                      
#<Employee:0x000055ee49bac3a8            
...                                      
3.0.0 :002 > emp.delete
  Employee Destroy (0.8ms)  DELETE FROM "employees" WHERE "employees"."id" = $1  [["id", 21]]        
/home/itsacheckmate/.rvm/gems/ruby-3.0.0/gems/activerecord-7
3.0.0 :003 > emp.destroy
  TRANSACTION (0.2ms)  BEGIN
  Employee Destroy (0.8ms)  DELETE FROM "employees" WHERE "employees"."id" = $1  [["id", 21]]                           
  TRANSACTION (0.1ms)  ROLLBACK                             
/home/itsacheckmate/.rvm/gems/ruby-3.0.0/gems/activerecord-7
3.0.0 :001 > emp = Employee.last
  Employee Load (0.2ms)  SELECT "employees".* FROM "employees" ORDER BY "employees"."id" DESC LIMIT $1  [["LIMIT", 1]]
 =>                                            
#<Employee:0x000055cb27246cb8                  
...                                            
3.0.0 :002 > emp.destroy
  TRANSACTION (0.1ms)  BEGIN
  Employee Destroy (0.8ms)  DELETE FROM "employees" WHERE "employees"."id" = $1  [["id", 21]]              
  TRANSACTION (0.3ms)  ROLLBACK               
/home/itsacheckmate/.rvm/gems/ruby-3.0.0/gems/activerecord-7 rails c                    
Loading development environment (Rails 7.0.3)
3.0.0 :001 > emp = Employee.last
  Employee Load (0.2ms)  SELECT "employees".* FROM "employees" ORDER BY "employees"."id" DESC LIMIT $1  [["LIMIT", 1]]
 =>                                            
#<Employee:0x000056274d395c90                  
...                                            
3.0.0 :002 > emp.destroy
before destory  TRANSACTION (0.1ms)  BEGIN
  Employee Destroy (0.8ms)  DELETE FROM "employees" WHERE "employees"."id" = $1  [["id", 21]]              
  TRANSACTION (0.1ms)  ROLLBACK               
/home/itsacheckmate/.rvm/gems/ruby-3.0.0/gems/activerecord-7
3.0.0 :003 > emp.certifieds << Certified.last
  Certified Load (0.1ms)  SELECT "certifieds".* FROM "certifieds" ORDER BY "certifieds"."id" DESC LIMIT $1  [["LIMIT", 1]]                                                          
  TRANSACTION (0.1ms)  BEGIN                                
  Certified Update (0.4ms)  UPDATE "certifieds" SET "employee_id" = $1, "updated_at" = $2 WHERE "certifieds"."id" = $3  [["employee_id", 21], ["updated_at", "2022-06-21 08:00:18.78
3.0.0 :004 > emp.destroy
before destory  TRANSACTION (0.4ms)  BEGIN
  Certified Update All (0.6ms)  UPDATE "certifieds" SET "employee_id" = $1 WHERE "certifieds"."employee_id" = $2  [["employee_id", nil], ["employee_id", 21]]                        rails c                                                
Loading development environment (Rails 7.0.3)               
3.0.0 :001 > emp = Employee.last
  Employee Load (0.1ms)  SELECT "employees".* FROM "employees" ORDER BY "employees"."id" DESC LIMIT $1  [["LIMIT", 1]]  
 =>                                                         
#<Employee:0x000055f98adce4c8                               
...                                                         
3.0.0 :002 > emp.destroy
before destory  TRANSACTION (0.1ms)  BEGIN
  Certified Update All (0.2ms)  UPDATE "certifieds" SET "employee_id" = $1 WHERE "certifieds"."employee_id" = $2  [["employee_id", nil], ["employee_id", 20]]         
 name: "Harsh",             
 salary: nil,               
 mobile_number: nil,        
 DOB: Wed, 01 Jan 1997,     
 created_at: Mon, 20 Jun 2022 16:09:55.949928000 UTC +00:00,
 updated_at: Mon, 20 Jun 2022 16:09:55.949928000 UTC +00:00,
 count_of_pilots: 0,        
 trainer_id: nil>           
3.0.0 :003 > emp.destroy
before destory  TRANSACTION (0.1ms)  BEGIN
  Certified Update All (0.2ms)  UPDATE "certifieds" SET "employee_id" = $1 WHERE "certifieds"."employee_id" = $2  [["employee_id", nil], ["employee_id", 19]]         
3.0.0 :006 > emp.destroy
before destory  TRANSACTION (0.2ms)  BEGIN
  Certified Update All (0.2ms)  UPDATE "certifieds" SET "employee_id" = $1 WHERE "certifieds"."employee_id" = $2  [["employee_id", nil], ["employee_id", 19]]                       
  TRANSACTION (0.1ms)  COMMIT                               
true =>                                                     
#<Employee:0x000055ad82d25818                               
 id: 19,                                                    
 name: "Harsh",                                             
 salary: nil,                                               
 mobile_number: nil,                                        
 DOB: Wed, 01 Jan 1997,                                     
 created_at: Mon, 20 Jun 2022 16:09:55.949928000 UTC +00:00,
 updated_at: Mon, 20 Jun 2022 16:09:55.949928000 UTC +00:00,
 count_of_pilots: 0,
 trainer_id: nil> 

===================================================
## Callback Classes
Sometimes the callback methods that you'll write will be useful enough to be reused by other models. 
Active Record makes it possible to create classes that encapsulate the callback methods, so they can be reused

When declared inside a class, as above, the callback methods will receive the model object as a parameter. 

we needed to instantiate a new  object of the class , since we declared our callback as an instance method. 
This is particularly useful if the callbacks make use of the state of the instantiated object. 
Often, however, it will make more sense to declare the callbacks as class methods
You can declare as many callbacks as you want inside your callback classes

3.0.0 :001 > fa = FlightsAircraft.create!
  TRANSACTION (0.1ms)  BEGIN
  FlightsAircraft Create (0.2ms)  INSERT INTO "flights_aircrafts" ("flight_id", "aircraft_id", "created_at", "updated_at") VALUES ($1, $2, $3, $4) RETURNING "id"  [["flight_id", nil], ["aircraft_id", nil], ["created_at", "2022-06-21 16:43:39.661282"], ["updated_at", "2022-06-21 16:43:39.661282"]]                                
  TRANSACTION (6.5ms)  COMMIT                                                        
Flight Is emptyAricraft id is empty =>                                               
#<FlightsAircraft:0x000055b7ff48d020      
...  

