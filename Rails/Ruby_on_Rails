Ruby on Rails or also known as rails is a server-side web application development 
framework that is written in the Ruby programming language, 
and it is developed by David Heinemeier Hansson under the MIT License
It supports MVC(model-view-controller) architecture that provides a default structure for database, web pages, and web services,
it also uses web standards like JSON or XML for transfer data and HTML, CSS, and JavaScript for the user interface.
It emphasizes the use of other well-known software engineering pattern and paradigms like:

Don’t Repeat Yourself (DRY): It is a principle of software development to reducing the repetition of information or codes.
Convention Over Configuration (CoC): It provides many opinions for the best way to do many things in a web application.

features of Ruby on Rails are:

Model View Controller
When interacting with our application, a browser sends a request, which is received by a web server and passed on to the Rails routing engine. The router receives the request and redirects to the appropriate controller class method based on the routing URL pattern.

Ruby on Rails used MVC architecture, and it contains three components, i.e., model, view, and controller. 
Here, the model is used to maintain the relationship between object and database, the view is templates that are used to build the data users for web applications, and the controller is used to merge model and view together. 
MVC is generally used for developing user interfaces that divide the data into three interconnected components so that it can separate the internal representation of the information from the way it presents to and get from the user. 
Model
This layer is responsible for manipulating the data that will be processed in the app.
 It’s good practice when developing an app with MVC, to allocate all the important data in this layer, creating one or multiple models.
  The model doesn’t have any explicit link with the user interface (View), which is used to present this model or even edit .
  View
  This layer is responsible for displaying data for the user and enabling the user to edit, delete or change the data in some way when necessary.
   The View is the opposite of the Model.
  Controller
   This layer is responsible for intermediating the communication between the View and the Model. 
   In our scenario of the one-button app, the Controller would be notified by the View when the user pressed the button.

Object Relation MApping
ORM stands for Object-Relational-Mapping. 
Object Relational Mapper. It means you don't have to manually call the database yourself; the ORM handles it for you.
Ruby on Rails uses one called ActiveRecord, and it's a really good one.
It basically means that Active Record takes data which is stored in a database table using rows and columns,
 which needs to be modified or retrieved by writing SQL statements (if you're using a SQL database), 
 and it lets you interact with that data as though it was a normal Ruby object.

 Class maps to Tables 
 Object Maps to Records
 Attributes mapps to Attribute or columns
 
 Staging environment vs Sandbox environment
Staging environment
A good staging environment will be a close replica (less the data) of the production system. It is used to test upgrades and patches prior to going to production. This means that it should be a controlled environment where the engineers responsible for the production deployment are allowed to test the rollout instructions.

Access restrictions in a staging environment should be as close to production as possible. I.E. deployment by those engineers who are responsible for deployment. No root (or privileged access for developers).

Sandbox environment
As the name suggests this typically a playground for the engineering team. It has less restrictions than a staging environment because it is designed to allow the engineers to try out things easily and quickly. A sandbox environment is likely to drift away from the production environment as engineers try out different versions of the product, dependancies, plugins etc.

Access to a sandbox environment typically allows privileged access to any engineer (developer, QA etc.) who are working on the project for easy / quick deployment and debugging.