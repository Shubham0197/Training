Active Records Associations
In Rails, an association is a connection between two Active Record models
With Active Record associations, we can streamline  operations by declaratively telling Rails that there is a connection between the two models

The Types of Associations
Rails supports six types of associations:

belongs_to
has_one
has_many
has_many :through
has_one :through
has_and_belongs_to_many

belong _to associations
it sets up a connection with another model,
 such that each instance of the declaring model
 "belongs to" one instance of the other model.
 When used alone, belongs_to produces a one-directional one-to-one connection. 
 belongs_to does not ensure reference consistency, 
 so depending on the use case, you might also need to add a database-level 
 foreign key constraint on the reference column,

The has_one Association
A has_one association indicates that one other model has a reference to this model. 
That model can be fetched through this association.

The has_many Association
A has_many association is similar to has_one, but indicates a one-to-many connection with another model.

The has_many :through Association
A has_many :through association is often used to set up a many-to-many connection with another model.
This association indicates that the declaring model can be matched with zero or more instances of another model by proceeding through a third model.


Can break all object relation with each other

## belongs to
gives foreign key
t.belongs_to :table_name
t.references :table_name 

belongs_to is singular so have to give table name singular

post.author / reads the author that post belongs to 
post.author = / assigns the author that post will belong to or set the author
will gives the category id by default to products while ceating new object of product
3.0.0 :011 > product = category.products.new
 => 
#<Product:0x00007f2c049f86c0                                
...  
3.0.0 :013 > product
 => 
#<Product:0x0000561e6ccfdb78                                
 id: nil,                                                   
 name: nil,                                                 
 price: 0.1e3,                                              
 category_id: 1,                                            
 description: nil>

 3.0.0 :018 > Product.all
  Product Load (0.2ms)  SELECT "products".* FROM "products"
 =>                                                         
[#<Product:0x0000561e6dbc0a48                               
  id: 1,                                                    
  name: nil,                                                
  price: 0.12334e3,                                         
  category_id: nil,       
  description: nil>,      
 #<Product:0x0000561e6dbc0908
  id: 2,                  
  name: nil,              
  price: 0.12334e3,
  category_id: nil,
  description: nil>,
 #<Product:0x0000561e6dbc0840
  id: 3,
  name: nil,
  price: 0.12212e3,
  category_id: nil,
  description: nil>,
 #<Product:0x0000561e6dbc0778
  id: 4,
  name: "mobile",
  price: 0.1e3,
  category_id: 1,
  description: nil>] 


now after the associations are give it will not add new record of object with out category id

3.0.0 :020 > product.name = "Mobile MI"
 => "Mobile MI" 
3.0.0 :021 > product.save!
/home/itsacheckmate/.rvm/gems/ruby-3.0.0/gems/activerecord-7.0.3/lib/active_record/validations.rb:80:in `raise_validation_error': Validation failed: Category must exist (ActiveRecord::RecordInvalid)   































































