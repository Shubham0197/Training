Active Records Associations
In Rails, an association is a connection between two Active Record models
With Active Record associations, we can streamline  operations by declaratively telling Rails that there is a connection between the two models

The Types of Associations
Rails supports six types of associations:

belongs_to
has_one
has_many
has_many :through
has_one :through
has_and_belongs_to_many

belong _to associations
it sets up a connection with another model,
 such that each instance of the declaring model
 "belongs to" one instance of the other model.
 When used alone, belongs_to produces a one-directional one-to-one connection. 
 belongs_to does not ensure reference consistency, 
 so depending on the use case, you might also need to add a database-level 
 foreign key constraint on the reference column,

The has_one Association
A has_one association indicates that one other model has a reference to this model. 
That model can be fetched through this association.

The has_many Association
A has_many association is similar to has_one, but indicates a one-to-many connection with another model.

The has_many :through Association
A has_many :through association is often used to set up a many-to-many connection with another model.
This association indicates that the declaring model can be matched with zero or more instances of another model by proceeding through a third model.


Can break all object relation with each other

## belongs to
gives foreign key
t.belongs_to :table_name
t.references :table_name 

belongs_to is singular so have to give table name singular

post.author / reads the author that post belongs to 
post.author = / assigns the author that post will belong to or set the author
will gives the category id by default to products while ceating new object of product
3.0.0 :011 > product = category.products.new
 => 
#<Product:0x00007f2c049f86c0                                
...  
3.0.0 :013 > product
 => 
#<Product:0x0000561e6ccfdb78                                
 id: nil,                                                   
 name: nil,                                                 
 price: 0.1e3,                                              
 category_id: 1,                                            
 description: nil>

 3.0.0 :018 > Product.all
  Product Load (0.2ms)  SELECT "products".* FROM "products"
 =>                                                         
[#<Product:0x0000561e6dbc0a48                               
  id: 1,                                                    
  name: nil,                                                
  price: 0.12334e3,                                         
  category_id: nil,       
  description: nil>,      
 #<Product:0x0000561e6dbc0908
  id: 2,                  
  name: nil,              
  price: 0.12334e3,
  category_id: nil,
  description: nil>,
 #<Product:0x0000561e6dbc0840
  id: 3,
  name: nil,
  price: 0.12212e3,
  category_id: nil,
  description: nil>,
 #<Product:0x0000561e6dbc0778
  id: 4,
  name: "mobile",
  price: 0.1e3,
  category_id: 1,
  description: nil>] 


now after the associations are give it will not add new record of object with out category id

3.0.0 :020 > product.name = "Mobile MI"
 => "Mobile MI" 
3.0.0 :021 > product.save!
/home/itsacheckmate/.rvm/gems/ruby-3.0.0/gems/activerecord-7.0.3/lib/active_record/validations.rb:80:in `raise_validation_error': Validation failed: Category must exist (ActiveRecord::RecordInvalid)   

Appending to the category new associations

3.0.0 :022 > category.products << product
  TRANSACTION (0.1ms)  BEGIN
  Product Create (0.2ms)  INSERT INTO "products" ("name", "price", "category_id", "description") VALUES ($1, $2, $3, $4) RETURNING "id"  [["name", "Mobile MI"], ["price", "100.0"], ["category_id", 1], ["description", nil]]                  
  TRANSACTION (6.6ms)  COMMIT                               
  Product Load (0.1ms)  SELECT "products".* FROM "products" WHERE "products"."category_id" = $1  [["category_id", 1]]   
 =>                                                         
[#<Product:0x0000561e6ccfdb78                               
  id: 4,                                                    
  name: "mobile",                                           
  price: 0.1e3,
  category_id: 1,
  description: nil>,
 #<Product:0x0000561e6d567480
  id: 5,
  name: "Mobile MI",
  price: 0.1e3,
  category_id: 1,
  description: nil>,
 #<Product:0x0000561e6cd87710
  id: nil,
  name: nil,
  price: 0.1e3,
  category_id: 1,
  description: nil>,
 #<Product:0x00007f2c049f86c0
  id: nil,
  name: nil,
  price: 0.1e3,
  category_id: 1,
  description: nil>] 

  To check whether if the associations has empty belongs_to
  3.0.0 :023 > category.products.empty?
 => false
but when created new it shows empty? = true
 3.0.0 :025 > category2.products.empty?
  Product Exists? (0.3ms)  SELECT 1 AS one FROM "products" WHERE "products"."category_id" = $1 LIMIT $2  [["category_id", 2], ["LIMIT", 1]]                                         
 => true   


To see all the associations use of size options

3.0.0 :026 > category2.products.size
  Product Count (2.4ms)  SELECT COUNT(*) FROM "products" WHERE "products"."category_id" = $1  [["category_id", 2]]      
 => 0                                                       
3.0.0 :027 > category.products.size
 => 4 

To see all the associations of the category in prodcts table record

3.0.0 :028 > category.products.all
  Product Load (0.2ms)  SELECT "products".* FROM "products" WHERE "products"."category_id" = $1  [["category_id", 1]]   
 =>                                                         
[#<Product:0x0000561e6dbe3688                               
  id: 4,                                                    
  name: "mobile",                                           
  price: 0.1e3,                                             
  category_id: 1,                                           
  description: nil>,                                        
 #<Product:0x0000561e6dbe3390                               
  id: 5,                                                    
  name: "Mobile MI",                                        
  price: 0.1e3,
  category_id: 1,
  description: nil>] 


Above method will give the array of records if saved in different variable 

3.0.0 :032 > product_electronics = category.products.all
  Product Load (0.3ms)  SELECT "products".* FROM "products" WHERE "products"."category_id" = $1  [["category_id", 1]]   
 =>                                                         
[#<Product:0x0000561e6d5fdb10                               
... 

3.0.0 :044 > product_electronics.class
 => Product::ActiveRecord_AssociationRelation 

but if used first option

3.0.0 :045 > product_electronics = category.products.all.fir
st
  Product Load (0.2ms)  SELECT "products".* FROM "products" WHERE "products"."category_id" = $1 ORDER BY "products"."id" ASC LIMIT $2  [["category_id", 1], ["LIMIT", 1]]           
 =>                                                         
#<Product:0x00007f2c04bfd1c8                                
...  

it will create object with product class
3.0.0 :046 > product_electronics.class
 => Product(id: integer, name: text, price: decimal, category_id: integer, description: string) 
 all variables  are directly accessible

3.0.0 :047 > category2.products.create(:name => "Jeans")
  TRANSACTION (0.1ms)  BEGIN
  Product Create (0.2ms)  INSERT INTO "products" ("name", "price", "category_id", "description") VALUES ($1, $2, $3, $4) RETURNING "id"  [["name", "Jeans"], ["price", "100.0"], ["category_id", 2], ["description", nil]]                      
  TRANSACTION (6.6ms)  COMMIT                               
 =>                                                         
#<Product:0x0000561e6dc300f0                                
 id: 6,                                                     
 name: "Jeans",                                             
 price: 0.1e3,                                              
 category_id: 2,                                            
 description: nil> 

Delete the assiciations only
3.0.0 :051 > category2.products.delete(1)
  Product Delete All (0.7ms)  DELETE FROM "products" WHERE "products"."category_id" = $1 AND "products"."id" = $2  [["category_id", 2], ["id", 1]]                                  
 => 0                                                       
3.0.0 :052 > category2.products.delete(6)
  Product Delete All (6.9ms)  DELETE FROM "products" WHERE "products"."category_id" = $1 AND "products"."id" = $2  [["category_id", 2], ["id", 6]]                                  
 => 1     

 3 Tips, Tricks, and Warnings
  know to make efficient use of Active Record associations

Controlling caching
Avoiding name collisions
Updating the schema
Controlling association scope
Bi-directional associations                                                  

1 Controlling Caching
All of the association methods are built around caching, which keeps the result of the most recent query available for further operations. 
The cache is even shared across methods.

If there some changes int he database but the data we have asscessed have been cached we want to get the latest cope instead of cached one we will use 
reload option
3.0.0 :053 > category.products.load
 => 
[#<Product:0x0000561e6ccfdb78                               
  id: 4,                                                    
  name: "mobile",                                           
  price: 0.1e3,                                             
  category_id: 1,                                           
  description: nil>,                                        
 #<Product:0x0000561e6d567480                               
  id: 5,                                                    
  name: "Mobile MI",                                        
  price: 0.1e3,                                             
  category_id: 1,                                           
  description: nil>,
3.0.0 :054 > category.products.load
 => 
[#<Product:0x0000561e6ccfdb78                               
  id: 4,                                                    
  name: "mobile",                                           
  price: 0.1e3,                                             
  category_id: 1,                                           
  description: nil>,                                        
 #<Product:0x0000561e6d567480                               
  id: 5,                                                    
  name: "Mobile MI",                                        
  price: 0.1e3,                                             
  category_id: 1,                                           
  description: nil>,
  id: nil,
  price: 0.1e3,
  description: nil>,
 #<Product:0x00007f2c049f86c0
  id: nil,
  name: nil,
  price: 0.1e3,
  category_id: 1,
  description: nil>] 

## Added new object

3.0.0 :002 > category.products.create(:name => "Earphone")
  TRANSACTION (0.1ms)  BEGIN
  Product Create (0.2ms)  INSERT INTO "products" ("name", "price", "category_id", "description") VALUES ($1, $2, $3, $4) RETURNING "id"  [["name", "Earphone"], ["price", "100.0"], ["category_id", 1], ["description", nil]]                   
  TRANSACTION (6.5ms)  COMMIT                               
 =>                                                         
#<Product:0x000055af9dcf4fc0                                
 id: 7,                                                     
 name: "Earphone",                                          
 price: 0.1e3,                                              
 category_id: 1,                                            
 description: nil>

## but load still is cached 
##so have to reload

3.0.0 :053 > category.products.load
 => 
[#<Product:0x0000561e6ccfdb78                               
  id: 4,                                                    
  name: "mobile",                                           
  price: 0.1e3,                                             
  category_id: 1,                                           
  description: nil>,                                        
 #<Product:0x0000561e6d567480                               
  id: 5,                                                    
  name: "Mobile MI",                                        
  price: 0.1e3,                                             
  category_id: 1,                                           
  description: nil>,
3.0.0 :054 > category.products.load
 => 
[#<Product:0x0000561e6ccfdb78                               
  id: 4,                                                    
  name: "mobile",                                           
  price: 0.1e3,                                             
  category_id: 1,                                           
  description: nil>,                                        
 #<Product:0x0000561e6d567480                               
  id: 5,                                                    
  name: "Mobile MI",                                        
  price: 0.1e3,                                             
  category_id: 1,                                           
  description: nil>,
  id: nil,
  price: 0.1e3,
  description: nil>,
 #<Product:0x00007f2c049f86c0
  id: nil,
  name: nil,
  price: 0.1e3,
  category_id: 1,
  description: nil>] 

  ## After reloading got new data


3.0.0 :055 > category.products.reload
  Product Load (0.2ms)  SELECT "products".* FROM "products" WHERE "products"."category_id" = $1  [["category_id", 1]]   
 =>                                                         
[#<Product:0x0000561e6d3ecdf8                               
  id: 4,                                                    
  name: "mobile",                                           
  price: 0.1e3,                                             
  category_id: 1,                                           
  description: nil>,                                        
 #<Product:0x0000561e6d3ecc68                               
  id: 5,                                                    
  name: "Mobile MI",                                        
  price: 0.1e3,
  category_id: 1,
  description: nil>,
 #<Product:0x0000561e6d3ecad8
  id: 7,
  name: "Earphone",
  price: 0.1e3,
  category_id: 1,
  description: nil>] 

  so got the new data










































