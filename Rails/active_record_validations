Active Record Validations

The following methods trigger validations, and will save the object to the database only if the object is valid:
create
create!
save
save!
update
update!
The bang versions (e.g. save!) raise an exception if the record is invalid. 
The non-bang versions dont: save and update return false, and create returns the object.

valid? and invalid?
Before saving an Active Record object, Rails runs your validations. If these validations produce any errors, Rails does not save the object.
these can be run using valid? and invalid?

3.0.0 :006 > wallet= Wallet.create(name: "Sam" , amount: 90)
  TRANSACTION (0.1ms)  BEGIN
  Wallet Create (6.9ms)  INSERT INTO "wallets" ("name", "amount", "lock_version", "type", "created_at", "updated_at") VALUES ($1, $2, $3, $4, $5, $6) RETURNING "id"  [["name", "Sam"], ["amount", 90.0], ["lock_version", 0], ["type", nil], ["created_at", "2022-05-27 09:54:52.606799"], ["updated_at", "2022-05-27 09:54:52.606799"]]
  TRANSACTION (0.4ms)  COMMIT                                 
 =>                                                           
#<Wallet:0x0000557b37f7c418                                   
...                                                           
3.0.0 :007 > wallet.valid?
 => true 
 3.0.0 :012 > wallet.invalid?
 => false 

 3.0.0 :013 > wallet= Wallet.create(amount: 90)
 => #<Wallet:0x0000557b37bdcb78 id: nil, name: nil, amount: 90.0, lock_version: 0, type: nil, created_at: nil, updated_at: nil> 
3.0.0 :014 > 
3.0.0 :014 > wallet.invalid?
=> true                                 
3.0.0 :015 > wallet.name = "SSS"
 => "SSS" 
 3.0.0 :016 > wallet.invalid?
 => false 

 After Active Record has performed validations, any errors found can be accessed through the errors instance method,
 which returns a collection of errors. By definition, an object is valid if this collection is empty after running validations.

Note that an object instantiated with new will not report errors even if its technically invalid,
because validations are automatically run only when the object is saved, such as with the create or save methods.
3.0.0 :023 > wallet = Wallet.new
 => #<Wallet:0x0000557b36cbd368 id: nil, name: nil, amount: nil, lock_version: 0, type: nil, created_at: nil, updated_at: nil> 
3.0.0 :024 > wallet.valid?
 => false 
3.0.0 :025 > wallet.name= "sam"
 => "sam" 
3.0.0 :026 > wallet.valid?
 => true 

# ==>   errors.size

 3.0.0 :037 > wallet = Wallet.new
 => #<Wallet:0x00007f030c0aa6c0 id: nil, name: nil, amount: nil, lock_version: 0, type: nil, created_at: nil, updated_at: nil> 
3.0.0 :038 > wallet.errors.size
 => 0 
 3.0.0 :039 > wallet.save
 => false 

 3.0.0 :040 > wallet.errors.size
 => 1 
 3.0.0 :042 > wallet.errors.objects.first.full_message
 => "Name can't be blank" 
 3.0.0 :043 > wallet.save!
 /home/itsacheckmate/.rvm/gems/ruby-3.0.0/gems/activerecord-7.0.3/lib/active_record/validations.rb:80:in 'raise_validation_error': Validation failed: Name cant be blank (ActiveRecord::RecordInvalid) 


 # ==>errors[]

 To verify whether or not a particular attribute of an object is valid, you can use errors[:attribute]. 
 It returns an array of all the error messages for :attribute. 
 If there are no errors on the specified attribute, an empty array is returned.
 This method is only useful after validations have been run, because it only inspects the errors collection and does not trigger validations itself.

 3.0.0 :047 > wallet.errors[:name]
 => ["can't be blank"] 
 3.0.0 :048 > wallet = Wallet.new
 => #<Wallet:0x0000557b37a5ed78 id: nil, name: nil, amount: nil, lock_version: 0, type: nil, created_at: nil, updated_at: nil> 
3.0.0 :049 > wallet.errors[:name]
 => [] 

 Validation Helpers

 you can use them  directly inside your class definitions.
 Every time a validation fails, an error is added to the objects errors collection, and this is associated with the attribute being validated.
 Each helper accepts an arbitrary number of attribute names, so with a single line of code you can add the same kind of validation to several attributes.
 All of them accept the :on and :message options, which define when the validation should be run and what message should be added to the errors collection if it fails, respectively.
  The :on option takes one of the values :create or :update.
   There is a default error message for each one of the validation helpers. 
   These messages are used when the :message option isnt specified.

1. acceptance
This method validates that a checkbox on the user interface was checked when a form was submitted. 
This is typically used when the user needs to agree to your applications terms of service, confirm that some text is read, or any similar concept.
It defaults to ['1', true] and can be easily changed.
This validation is very specific to web applications and this 'acceptance' does not need to be recorded anywhere in your database. 
If you dont have a field for it, the helper will create a virtual attribute. 
If the field does exist in your database, the accept option must be set to or include true or else the validation will not run.


3.0.0 :007 > wallet.valid?
 => false 
3.0.0 :008 > wallet.available = 1
 => 1 
3.0.0 :009 > wallet.valid?
 => false 
 3.0.0 :014 > wallet.available = true
 => true 
3.0.0 :015 > wallet.save!
 => true 

 3.0.0 :002 > wallet.name = "Amazon"
 => "Amazon" 
3.0.0 :003 > wallet.available = true
 => true 
3.0.0 :004 > wallet.save!
/home/itsacheckmate/.rvm/gems/ruby-3.0.0/gems/activerecord-7.0.3/lib/active_record/validations.rb:80:in 'raise_validation_error': Validation failed: Available Accept this (ActiveRecord::RecordInvalid)
3.0.0 :005 > 

2. confirmation

use this helper when you have two text fields that should receive exactly the same content. 
For example, you may want to confirm an email address or a password. 
This validation creates a virtual attribute whose name is the name of the field that has to be confirmed with "_confirmation" appended.
This check is performed only if email_confirmation is not nil. To require confirmation, make sure to add a presence check for the confirmation attribute

There is also a :case_sensitive option that you can use to define whether the confirmation constraint will be case sensitive or not
  3.0.0 :013 > wallet.amount_confirmation = 11
  => 11 
 3.0.0 :014 > wallet.amount = 10
  => 10 
3.0.0 :011 > wallet.errors.objects.second.full_message
 => "Amount confirmation doesn't match Amount" 

 # Case_sensitive example
 3.0.0 :008 > wallet.name_confirmation = "Shubham"
 => "Shubham" 
3.0.0 :009 > wallet.name = "shubham"
 => "shubham" 

 3.0.0 :006 > wallet.valid?
 => true 

 3. comparison
 This check will validate a comparison between any two comparable values.
  The validator requires a compare option be supplied. 
  Each option accepts a value, proc, or symbol. 
  Any class that includes Comparable can be compared.
  These options are all supported:

  :greater_than - Specifies the value must be greater than the supplied value. The default error message for this option is "must be greater than %{count}".
  :greater_than_or_equal_to - Specifies the value must be greater than or equal to the supplied value. The default error message for this option is "must be greater than or equal to %{count}".
  :equal_to - Specifies the value must be equal to the supplied value. The default error message for this option is "must be equal to %{count}".
  :less_than - Specifies the value must be less than the supplied value. The default error message for this option is "must be less than %{count}".
  :less_than_or_equal_to - Specifies the value must be less than or equal to the supplied value. The default error message for this option is "must be less than or equal to %{count}".
  :other_than - Specifies the value must be other than the supplied value. The default error message for this option is "must be other than %{count}".

  3.0.0 :007 > order.errors[:customer_id]
 => ["must be greater than 12"]

 3.0.0 :001 > order = Order.new
 => 
#<Order:0x000055ba060ee960                                   
...                                                          
3.0.0 :002 > order.customer_id= 10
 => 10 
3.0.0 :003 > order.product_id= 10
 => 10 
3.0.0 :004 > order.valid?
 => false 
3.0.0 :005 > order.errors[:customer_id]
 => ["must be other than 10"] 


 4.exclusion
 This helper validates that the attributes values are not included in a given set.
  In fact, this set can be any enumerable object.
  The exclusion helper has an option :in that receives the set of values that will not be accepted for the validated attributes. 
  The :in option has an alias called :within that you can use for the same purpose, if youd like to. 
  
  Loading development environment (Rails 7.0.3)                                      
3.0.0 :001 > order = Order.new
 => 
#<Order:0x00007f32e03734e8                                                         
...                         
3.0.0 :002 > order.customer_id= 10
 => 10 
3.0.0 :003 > order.valid?
 => false 
3.0.0 :004 > order.errors[:customer_id]
 => ["10 not to be used"] 
 3.0.0 :005 > order.customer_id= 22
 => 22 
3.0.0 :006 > order.valid?
 => true 
3.0.0 :007 > order.errors[:customer_id]
 => [] 


 5.format
 This helper validates the attributes values by testing whether they match a given regular expression, which is specified using the :with option.
 Alternatively,  require that the specified attribute does not match the regular expression by using the :without option.

 3.0.0 :004 > customer.errors.objects.first.full_message
 => "Email address is invalid" 

 6. inclusion
 This helper validates that the attributes values are included in a given set.
    In fact, this set can be any enumerable object.
    The inclusion helper has an option :in that receives the set of values that will be accepted. 
  The :in option has an alias called :within that you can use for the same purpose, if youd like to.
  3.0.0 :004 > cat.errors.objects.first.full_message
  => "Name is not included in the list" 
 3.0.0 :005 > cat.name = "clothes"
  => "clothes" 
 3.0.0 :006 > cat.valid?
  => true 

 7. presence
 This helper validates that the specified attributes are not empty.
It uses the blank? method to check if the value is either nil or a blank string, that is, a string that is either empty or consists of whitespace.
eg.   has_many :line_items, inverse_of: :order

8. absence
This helper validates that the specified attributes are absent.
 It uses the present? method to check if the value is not either nil or a blank string,
 that is, a string that is either empty or consists of whitespace.

 3.0.0 :009 > cat.description = "clothes"
 => "clothes" 
3.0.0 :010 > cat.valid?
 => false 
 3.0.0 :012 > cat.errors.objects.first.full_message
 => "Description must be blank" 

 9. length
 This helper validates the length of the attributes values.
  It provides a variety of options, so you can specify length constraints in different ways
  The possible length constraint options are:

:minimum - The attribute cannot have less than the specified length.
:maximum - The attribute cannot have more than the specified length.
:in (or :within) - The attribute length must be included in a given interval. The value for this option must be a range.
:is - The attribute length must be equal to the given value.

Change default error messages using the :wrong_length, :too_long, and :too_short options and %{count} 
3.0.0 :016 > flights.errors.objects.first.full_message
 => "Destination is too short (minimum is 2 characters)" 
 3.0.0 :019 > flights.errors.objects.first.full_message
 => "Destination is too long (maximum is 12 characters)" 
 3.0.0 :002 > flights.from = "amastedam"
 => "amastedam" 
3.0.0 :003 > flights.destination = "adassf"
 => "adassf" 
3.0.0 :004 > flights.price = 1234522
 => 1234522 
3.0.0 :005 > flights.valid?
 => false 
3.0.0 :006 > flights.errors.objects.first.full_message
 => "Price you gave wrong length" 

 10 .numericality 
 This helper validates that your attributes have only numeric values.
 By default, it will match an optional sign followed by an integer or floating point number

 The default error message for :only_integer is "must be an integer".

Besides :only_integer, this helper also accepts the following options to add constraints to acceptable values:

:greater_than - Specifies the value must be greater than the supplied value. The default error message for this option is "must be greater than %{count}".
:greater_than_or_equal_to - Specifies the value must be greater than or equal to the supplied value. The default error message for this option is "must be greater than or equal to %{count}".
:equal_to - Specifies the value must be equal to the supplied value. The default error message for this option is "must be equal to %{count}".
:less_than - Specifies the value must be less than the supplied value. The default error message for this option is "must be less than %{count}".
:less_than_or_equal_to - Specifies the value must be less than or equal to the supplied value. The default error message for this option is "must be less than or equal to %{count}".
:other_than - Specifies the value must be other than the supplied value. The default error message for this option is "must be other than %{count}".
:in - Specifies the value must be in the supplied range. The default error message for this option is "must be in %{count}".
:odd - Specifies the value must be an odd number if set to true. The default error message for this option is "must be odd".
:even - Specifies the value must be an even number if set to true. The default error message for this option is "must be even".

By default, numericality does not allow nil values. You can use allow_nil: true option to permit it.

3.0.0 :002 > flights.from = "amastedam"
 => "amastedam" 
3.0.0 :003 > flights.destination = "adassf"
 => "adassf" 
3.0.0 :004 > flights.price = 60000
 => 60000 
3.0.0 :005 > flights.valid?
 => false 
3.0.0 :006 > flights.errors.objects.first.full_message
 => "Price must be in 10000..59999" 
 3.0.0 :011 > cert.errors.messages
 => {:employee_id=>["must be odd"], :aircraft_id=>["must be even"]} 
3.0.0 :012 > cert.aircraft_id = 21
 => 21 
3.0.0 :013 > cert.employee_id = 4
 => 4

 3.0.0 :015 > cert.aircraft_id = 1
 => 1 
3.0.0 :016 > cert.valid?
 => false 
3.0.0 :017 > cert.errors.messages
 => {:employee_id=>["must be odd"], :aircraft_id=>["must be greater than 1", "must be even"]} 
3.0.0 :018 > cert.aircraft_id = 4
 => 2 
3.0.0 :019 > cert.valid?
 => false 
3.0.0 :020 > cert.errors.messages
 => {:employee_id=>["must be odd"]} 


=begin
 1.3 Skipping Validations
The following methods skip validations, and will save the object to the database regardless of its validity. They should be used with caution.

decrement!
decrement_counter
increment!
increment_counter
insert
insert!
insert_all
insert_all!
toggle!
touch
touch_all
update_all
update_attribute
update_column
update_columns
update_counters
upsert
upsert_all
Note that save also has the ability to skip validations if passed validate:
false as an argument. This technique should be used with caution.

save(validate: false)
3.0.0 :005 > cert.employee_id = 4
 => 4 
3.0.0 :006 > cert.aircraft_id = 2
 => 2 
3.0.0 :007 > cert.valid?
 => false
 3.0.0 :009 > cert.save!
/home/itsacheckmate/.rvm/gems/ruby-3.0.0/gems/activerecord-7.0.3/lib/active_record/validations.rb:80:in 'raise_validation_error': Validation failed: Employee must be odd, Aircraft must be greater than 2 (ActiveRecord::RecordInvalid)   

3.0.0 :011 > cert.save(validate: false)
  TRANSACTION (0.1ms)  BEGIN
  Certified Create (4.8ms)  INSERT INTO "certifieds" ("employee_id", "aircraft_id", "created_at", "updated_at") VALUES ($1, $2, $3, $4) RETURNING "id"  [["employee_id", 4], ["aircraft_id", 2], ["created_at", "2022-05-31 09:35:13.397631"], ["updated_at", "2022-05-31 09:35:13.397631"]]
  TRANSACTION (0.5ms)  COMMIT                  
 => true  

=end

11. uniqueness
This helper validates that the attributes value is unique right before the object gets saved. 
It does not create a uniqueness constraint in the database, so it may happen that two different 
database connections create two records with the same value for a column that you intend to be unique.

There is a :scope option that you can use to specify one or more attributes that are used to limit the uniqueness check.
There is also a :case_sensitive option that you can use to define whether the uniqueness constraint will be case sensitive, case insensitive, or respects default database collation.

  id: 11,
  employee_id: 3,
  aircraft_id: 4,
  created_at: Mon, 23 May 2022 19:53:00.270890000 UTC +00:00,
  updated_at: Mon, 23 May 2022 19:53:00.270890000 UTC +00:00>,
  3.0.0 :007 > cert = Certified.new
  => #<Certified:0x00007f9eb46aeb90 id: nil, employee_id: nil, aircraft_id: nil, created_at: nil, updated_at... 
 3.0.0 :008 > cert.aircraft_id =4
  => 4 
 3.0.0 :009 > cert.employee_id =3
  => 3 
  3.0.0 :006 > cert.errors.messages
 => {:aircraft_id=>["has already been taken"]} 


 # Working with Validation Errors
 dig deeper into each individual error by using various methods from the errors collection.
1. errors
3.0.0 :004 > cert.errors.full_messages
 => ["Employee is not a number", "Aircraft is not a number"] 

2. errors[]
It is used when you want to check the error messages for a specific attribute.
It returns an array of strings with all error messages for the given attribute, each string with one error message. 
If there are no errors related to the attribute, it returns an empty array.
3.0.0 :005 > cert.errors[:employee_id]
 => ["is not a number"] 

3 errors.where and error object
Sometimes we may need more information about each error beside its message. 
Each error is encapsulated as an ActiveModel::Error object, and where method is the most common way of access.
where returns an array of error objects, filtered by various degree of conditions
3.0.0 :021 > cert.errors.where(:employee_id, :less_than)
 => [] 
3.0.0 :022 > cert.errors.where(:employee_id, :less_than_or_equal_to)
 => [#<ActiveModel::Error attribute=employee_id, type=less_than_or_equal_to, options={:value=>21, :count=>20}>] 
3.0.0 :023 > cert.errors.where(:employee_id, :odd)
 => [] 
 3.0.0 :034 > error = cert.errors.where(:employee_id, :less_than_or_equal_to).last
 => #<ActiveModel::Error attribute=employee_id, type=less_than_or_equal_to, options={:value=>21, :count=>20}> 
3.0.0 :035 > error.attribute
 => :employee_id 
3.0.0 :036 > error.type
 => :less_than_or_equal_to 
3.0.0 :037 > error.options[:count]
 => 20 
 3.0.0 :041 > error.message
 => "must be less than or equal to 20" 
3.0.0 :042 > error.full_message
 => "Employee must be less than or equal to 20" 
 <ActiveModel::Error attribute=employee_id, type=less_than_or_equal_to, options={:value=>21, :count=>20}>

4 errors.add

The add method creates the error object by taking the attribute, the error type and additional options hash.
This is useful for writing your own validator.
3.0.0 :006 > product.description = "Helllo"
 => "Helllo" 
3.0.0 :007 > product.errors.full_messages
 => ["Description is not cool enough"] 
3.0.0 :008 > product.valid?
 => false 
3.0.0 :009 > product.errors.full_messages
 => ["Description is not cool enough"] 
3.0.0 :005 > product.errors.full_messages
 => ["Description is same as product"] 

5 errors[:base]
You can add errors that are related to the objects state as a whole, instead of being related to a specific attribute. 
You can add errors to :base when you want to say that the object is invalid, no matter the values of its attributes.
3.0.0 :003 > product.description = "hello"
 => "hello" 
3.0.0 :004 > product.errors.messages
 => {} 
3.0.0 :005 > product.valid?
 => false 
3.0.0 :006 > product.errors.messages
 => {:description=>["is same as product"]} 
 3.0.0 :001 > product =Product.new
 => #<Product:0x0000557cd3809878 id: nil, name: nil, description: nil, created_at: nil, updated_at: nil, sk... 
3.0.0 :002 > product.description = "hello"
 => "hello" 
3.0.0 :003 > product.valid?
 => false 
3.0.0 :004 > product.errors.messages
 => {:base=>["is invalid without name"]} 
 3.0.0 :005 > product.errors.full_messages
 => ["is invalid without name"] 

6 errors.clear
The clear method is used when you intentionally want to clear the errors collection. 
Of course, calling errors.clear upon an invalid object wont actually make it valid: 
the errors collection will now be empty, but the next time you call valid? or any method 
that tries to save this object to the database, the validations will run again. 
If any of the validations fail, the errors collection will be filled again.
3.0.0 :061 > cert.valid?
  Certified Exists? (0.5ms)  SELECT 1 AS one FROM "certifieds" WHERE "certifieds"."aircraft_id" IS NULL AND "certifieds"."employee_id" = $1 LIMIT $2  [["employee_id", 21], ["LIMIT", 1]]
 => false  
 3.0.0 :063 > cert.errors.messages
 => {:employee_id=>["must be less than or equal to 20"], :aircraft_id=>["is not a number"]} 
 3.0.0 :065 > cert.errors.empty?
 => false 
 3.0.0 :067 > cert.errors.clear
 => [] 
 3.0.0 :068 > cert.errors.empty?
 => true 

7 errors.size
The size method returns the total number of errors for the object.

3.0.0 :071 > cert.errors.messages
 => {} 
3.0.0 :072 > cert.errors.size
 => 0 
cert.valid?
 => false                                                      
3.0.0 :074 > cert.errors.size
 => 2 
3.0.0 :075 > cert.errors.messages
 => {:employee_id=>["must be less than or equal to 20"], :aircraft_id=>["is not a number"]} 


 # Common Validation Options

 1 :allow_nil
 The :allow_nil option skips the validation when the value being validated is nil.
 3.0.0 :002 > f.valid?
 Flight Exists? (0.4ms)  SELECT 1 AS one FROM "flights" WHERE "flights"."from" IS NULL AND "flights"."destination" IS NULL LIMIT $1  [["LIMIT", 1]]
=> false 
3.0.0 :003 > f.errors.messages
=> 
{:destination=>["is too short (minimum is 2 characters)"],
:price=>["you gave wrong length", "is not a number", "is not a number"]} 

2 :allow_blank

The :allow_blank option is similar to the :allow_nil option. 
This option will let validation pass if the attributes value is blank?, like nil or an empty string for example.
#<Flight:0x000055b56939f8b8       
... 
3.0.0 :002 > f.valid?
  Flight Exists? (0.4ms)  SELECT 1 AS one FROM "flights" WHERE "flights"."from" IS NULL AND "flights"."destination" IS NULL LIMIT $1  [["LIMIT", 1]]
 => false 
3.0.0 :003 > f.errors.messages
 => {:price=>["you gave wrong length", "is not a number", "is not a number"]} 
 
 3 :message
 As you have already seen, the :message option lets you specify the message that will be added to the errors collection when validation fails


 4 :on
 The :on option lets you specify when the validation should happen. 
 The default behavior for all the built-in validation helpers is to be run on save (both when youre creating a new record and when youre updating it). 
 If you want to change it, you can use on: :create to run the validation only when a new record is created or on: :update to run the validation only when a record is updated.

 You can also use on: to define custom contexts. Custom contexts need to be triggered explicitly by passing the name of the context to valid?, invalid?, or save.
 3.0.0 :020 > pr.valid?(:account_setup)
 => false 
3.0.0 :021 > pr.errors.messages
 => {:description=>["is too long (maximum is 12 characters)"]} 

 # 4 Strict Validations
 You can also specify validations to be strict and raise ActiveModel::StrictValidationFailed when the object is invalid.
 these are to speacify the user that they strict validation or can change the exception raised
 
 3.0.0 :004 > fl.valid?
 /home/itsacheckmate/.rvm/gems/ruby-3.0.0/gems/activemodel-7.0.3/lib/active_model/errors.rb:323:in 'add': Price is not a number (ActiveModel::StrictValidationFailed)       
 3.0.0 :012 > fl.save(validate: false)
 TRANSACTION (0.1ms)  BEGIN
 Flight Create (0.2ms)  INSERT INTO "flights" ("from", "destination", "distance", "departs", "arrives", "price", "created_at", "updated_at") VALUES ($1, $2, $3, $4, $5, $6, $7, $8) RETURNING "id"  [["from", "dadfsgsfgdssdfdsgsfgfgfds"], ["destination", nil], ["distance", nil], ["departs", nil], ["arrives", nil], ["price", nil], ["created_at", "2022-05-31 15:52:48.801396"], ["updated_at", "2022-05-31 15:52:48.801396"]]
 TRANSACTION (0.6ms)  COMMIT
=> true 

# Conditional Validation
Sometimes it will make sense to validate an object only when a given predicate is satisfied. 
It can be done by using the :if and :unless options, which can take a symbol, a Proc or an Array

1 Using a Symbol with :if and :unless

3.0.0 :005 > aircraft = Aircraft.new
 => #<Aircraft:0x000055ca73e3d508 id: nil, name: nil, cruising_range: nil, created_at: nil, updated_at: nil> 
3.0.0 :006 > aircraft.valid?
 => true 
3.0.0 :007 > aircraft.name = "Airbus"
 => "Airbus" 
3.0.0 :008 > aircraft.valid?
 => false 

 2 Using a Proc with :if and :unless
 Using a Proc object gives you the ability to write an inline condition instead of a separate method

 3.0.0 :001 > aircraft = Aircraft.new
 => #<Aircraft:0x00005601ecf0bd80 id: nil, name: nil, cruising_range: nil, created_at: nil, updated_at: nil> 
3.0.0 :002 > aircraft.valid?
 => true 
3.0.0 :003 > aircraft.name = "Airbus"
 => "Airbus" 
3.0.0 :004 > aircraft.valid?
 => false 
3.0.0 :005 > aircraft.cruising_range = 1200
 => 1200 
3.0.0 :006 > aircraft.valid?
 => false 
 3.0.0 :007 > aircraft.errors.messages
 => {:name_confirmation=>["can't be blank"]} 

3 Grouping Conditional validations

Sometimes it is useful to have multiple validations use one condition.
It can be easily achieved using with_options.
3.0.0 :001 > cust = Customr.new
 => 
#<Customr:0x000055682e17bec0
...                         
3.0.0 :002 > cust.valid?
 => true 
 3.0.0 :005 > cust.name = "sam"
 => "sam" 
3.0.0 :006 > cust.valid?
 => false 

 4 Combining Validation Conditions

For multiple conditions define whether or not a validation should happen, an Array can be used. 
Can apply both :if and :unless to the same validation.

3.0.0 :006 > ord.valid?
 => false 
3.0.0 :007 > ord.errors.messages
 => {:customer_id=>["10 not to be used"]} 
3.0.0 :008 > ord.customer_id = 60
 => 60 
3.0.0 :009 > ord.valid?
 => true 
 3.0.0 :013 > ord.amount = 60
 => 60 
3.0.0 :014 > ord.valid?
 => false 
3.0.0 :015 > ord.errors.messages
 => {:customer_id=>["must be other than 60"]} 

# Performing Custom Validations
With this can write our own validators or validation methods as you prefer.

1 Custom Validators
Custom validators are classes that inherit from ActiveModel::Validator. 
These classes must implement the validate method which takes a record as an argument and performs the validation on it. 
The custom validator is called using the validates_with method.

3.0.0 :004 > po = ProductOption.new
 => #<ProductOption:0x00007f3114ab6818 product_option: nil, product_id: nil> 
3.0.0 :005 > po.valid?
 => false 
3.0.0 :006 > po.product_option = "clothes"
 => "clothes" 
3.0.0 :007 > po.valid?
 => true 

 3.0.0 :001 > po = ProductOption.new
 => #<ProductOption:0x000055c5c3031068 product_option: nil, product_id: nil> 
3.0.0 :002 > po.product_option = "12234"
 => "12234" 
3.0.0 :003 > po.valid?
 => false 
3.0.0 :004 > po.errors.messages
 => {:product_option=>["atleast give word in option"]} 

2 Custom Methods
create methods that verify the state of your models and add errors to the errors collection when they are invalid
You must then register these methods by using the validate class method, passing in the symbols for the validation methods names.
But it is also possible to control when to run these custom validations by giving an :on option to the validate method, with either: :create or :update.

3.0.0 :010 > product = Product.new
 => #<Product:0x0000558ee8db8748 id: nil, name: nil, price: 0.1e3, category_id: nil, description: nil> 
3.0.0 :011 > product.valid?
 => false 
3.0.0 :012 > product.errors.messages
 => {:name=>["Name can't be blank"]} 
3.0.0 :013 > product.name = "Apple"
 => "Apple" 
3.0.0 :014 > product.valid?
 => true 