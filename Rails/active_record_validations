Active Record Validations

The following methods trigger validations, and will save the object to the database only if the object is valid:
create
create!
save
save!
update
update!
The bang versions (e.g. save!) raise an exception if the record is invalid. 
The non-bang versions dont: save and update return false, and create returns the object.

valid? and invalid?
Before saving an Active Record object, Rails runs your validations. If these validations produce any errors, Rails does not save the object.
these can be run using valid? and invalid?

3.0.0 :006 > wallet= Wallet.create(name: "Sam" , amount: 90)
  TRANSACTION (0.1ms)  BEGIN
  Wallet Create (6.9ms)  INSERT INTO "wallets" ("name", "amount", "lock_version", "type", "created_at", "updated_at") VALUES ($1, $2, $3, $4, $5, $6) RETURNING "id"  [["name", "Sam"], ["amount", 90.0], ["lock_version", 0], ["type", nil], ["created_at", "2022-05-27 09:54:52.606799"], ["updated_at", "2022-05-27 09:54:52.606799"]]
  TRANSACTION (0.4ms)  COMMIT                                 
 =>                                                           
#<Wallet:0x0000557b37f7c418                                   
...                                                           
3.0.0 :007 > wallet.valid?
 => true 
 3.0.0 :012 > wallet.invalid?
 => false 

 3.0.0 :013 > wallet= Wallet.create(amount: 90)
 => #<Wallet:0x0000557b37bdcb78 id: nil, name: nil, amount: 90.0, lock_version: 0, type: nil, created_at: nil, updated_at: nil> 
3.0.0 :014 > 
3.0.0 :014 > wallet.invalid?
=> true                                 
3.0.0 :015 > wallet.name = "SSS"
 => "SSS" 
 3.0.0 :016 > wallet.invalid?
 => false 

 After Active Record has performed validations, any errors found can be accessed through the errors instance method,
 which returns a collection of errors. By definition, an object is valid if this collection is empty after running validations.

Note that an object instantiated with new will not report errors even if its technically invalid,
because validations are automatically run only when the object is saved, such as with the create or save methods.
3.0.0 :023 > wallet = Wallet.new
 => #<Wallet:0x0000557b36cbd368 id: nil, name: nil, amount: nil, lock_version: 0, type: nil, created_at: nil, updated_at: nil> 
3.0.0 :024 > wallet.valid?
 => false 
3.0.0 :025 > wallet.name= "sam"
 => "sam" 
3.0.0 :026 > wallet.valid?
 => true 

# ==>   errors.size

 3.0.0 :037 > wallet = Wallet.new
 => #<Wallet:0x00007f030c0aa6c0 id: nil, name: nil, amount: nil, lock_version: 0, type: nil, created_at: nil, updated_at: nil> 
3.0.0 :038 > wallet.errors.size
 => 0 
 3.0.0 :039 > wallet.save
 => false 

 3.0.0 :040 > wallet.errors.size
 => 1 
 3.0.0 :042 > wallet.errors.objects.first.full_message
 => "Name can't be blank" 
 3.0.0 :043 > wallet.save!
 /home/itsacheckmate/.rvm/gems/ruby-3.0.0/gems/activerecord-7.0.3/lib/active_record/validations.rb:80:in 'raise_validation_error': Validation failed: Name cant be blank (ActiveRecord::RecordInvalid) 


 # ==>errors[]

 To verify whether or not a particular attribute of an object is valid, you can use errors[:attribute]. 
 It returns an array of all the error messages for :attribute. 
 If there are no errors on the specified attribute, an empty array is returned.
 This method is only useful after validations have been run, because it only inspects the errors collection and does not trigger validations itself.

 3.0.0 :047 > wallet.errors[:name]
 => ["can't be blank"] 
 3.0.0 :048 > wallet = Wallet.new
 => #<Wallet:0x0000557b37a5ed78 id: nil, name: nil, amount: nil, lock_version: 0, type: nil, created_at: nil, updated_at: nil> 
3.0.0 :049 > wallet.errors[:name]
 => [] 

 Validation Helpers



 


































