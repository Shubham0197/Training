Active Record Validations

The following methods trigger validations, and will save the object to the database only if the object is valid:
create
create!
save
save!
update
update!
The bang versions (e.g. save!) raise an exception if the record is invalid. 
The non-bang versions dont: save and update return false, and create returns the object.

valid? and invalid?
Before saving an Active Record object, Rails runs your validations. If these validations produce any errors, Rails does not save the object.
these can be run using valid? and invalid?

3.0.0 :006 > wallet= Wallet.create(name: "Sam" , amount: 90)
  TRANSACTION (0.1ms)  BEGIN
  Wallet Create (6.9ms)  INSERT INTO "wallets" ("name", "amount", "lock_version", "type", "created_at", "updated_at") VALUES ($1, $2, $3, $4, $5, $6) RETURNING "id"  [["name", "Sam"], ["amount", 90.0], ["lock_version", 0], ["type", nil], ["created_at", "2022-05-27 09:54:52.606799"], ["updated_at", "2022-05-27 09:54:52.606799"]]
  TRANSACTION (0.4ms)  COMMIT                                 
 =>                                                           
#<Wallet:0x0000557b37f7c418                                   
...                                                           
3.0.0 :007 > wallet.valid?
 => true 
 3.0.0 :012 > wallet.invalid?
 => false 

 3.0.0 :013 > wallet= Wallet.create(amount: 90)
 => #<Wallet:0x0000557b37bdcb78 id: nil, name: nil, amount: 90.0, lock_version: 0, type: nil, created_at: nil, updated_at: nil> 
3.0.0 :014 > 
3.0.0 :014 > wallet.invalid?
=> true                                 
3.0.0 :015 > wallet.name = "SSS"
 => "SSS" 
 3.0.0 :016 > wallet.invalid?
 => false 

 After Active Record has performed validations, any errors found can be accessed through the errors instance method,
 which returns a collection of errors. By definition, an object is valid if this collection is empty after running validations.

Note that an object instantiated with new will not report errors even if its technically invalid,
because validations are automatically run only when the object is saved, such as with the create or save methods.
3.0.0 :023 > wallet = Wallet.new
 => #<Wallet:0x0000557b36cbd368 id: nil, name: nil, amount: nil, lock_version: 0, type: nil, created_at: nil, updated_at: nil> 
3.0.0 :024 > wallet.valid?
 => false 
3.0.0 :025 > wallet.name= "sam"
 => "sam" 
3.0.0 :026 > wallet.valid?
 => true 

# ==>   errors.size

 3.0.0 :037 > wallet = Wallet.new
 => #<Wallet:0x00007f030c0aa6c0 id: nil, name: nil, amount: nil, lock_version: 0, type: nil, created_at: nil, updated_at: nil> 
3.0.0 :038 > wallet.errors.size
 => 0 
 3.0.0 :039 > wallet.save
 => false 

 3.0.0 :040 > wallet.errors.size
 => 1 
 3.0.0 :042 > wallet.errors.objects.first.full_message
 => "Name can't be blank" 
 3.0.0 :043 > wallet.save!
 /home/itsacheckmate/.rvm/gems/ruby-3.0.0/gems/activerecord-7.0.3/lib/active_record/validations.rb:80:in 'raise_validation_error': Validation failed: Name cant be blank (ActiveRecord::RecordInvalid) 


 # ==>errors[]

 To verify whether or not a particular attribute of an object is valid, you can use errors[:attribute]. 
 It returns an array of all the error messages for :attribute. 
 If there are no errors on the specified attribute, an empty array is returned.
 This method is only useful after validations have been run, because it only inspects the errors collection and does not trigger validations itself.

 3.0.0 :047 > wallet.errors[:name]
 => ["can't be blank"] 
 3.0.0 :048 > wallet = Wallet.new
 => #<Wallet:0x0000557b37a5ed78 id: nil, name: nil, amount: nil, lock_version: 0, type: nil, created_at: nil, updated_at: nil> 
3.0.0 :049 > wallet.errors[:name]
 => [] 

 Validation Helpers

 you can use them  directly inside your class definitions.
 Every time a validation fails, an error is added to the objects errors collection, and this is associated with the attribute being validated.
 Each helper accepts an arbitrary number of attribute names, so with a single line of code you can add the same kind of validation to several attributes.
 All of them accept the :on and :message options, which define when the validation should be run and what message should be added to the errors collection if it fails, respectively.
  The :on option takes one of the values :create or :update.
   There is a default error message for each one of the validation helpers. 
   These messages are used when the :message option isnt specified.

1. acceptance
This method validates that a checkbox on the user interface was checked when a form was submitted. 
This is typically used when the user needs to agree to your applications terms of service, confirm that some text is read, or any similar concept.
It defaults to ['1', true] and can be easily changed.
This validation is very specific to web applications and this 'acceptance' does not need to be recorded anywhere in your database. 
If you dont have a field for it, the helper will create a virtual attribute. 
If the field does exist in your database, the accept option must be set to or include true or else the validation will not run.


3.0.0 :007 > wallet.valid?
 => false 
3.0.0 :008 > wallet.available = 1
 => 1 
3.0.0 :009 > wallet.valid?
 => false 
 3.0.0 :014 > wallet.available = true
 => true 
3.0.0 :015 > wallet.save!
 => true 

 3.0.0 :002 > wallet.name = "Amazon"
 => "Amazon" 
3.0.0 :003 > wallet.available = true
 => true 
3.0.0 :004 > wallet.save!
/home/itsacheckmate/.rvm/gems/ruby-3.0.0/gems/activerecord-7.0.3/lib/active_record/validations.rb:80:in 'raise_validation_error': Validation failed: Available Accept this (ActiveRecord::RecordInvalid)
3.0.0 :005 > 

2. confirmation

use this helper when you have two text fields that should receive exactly the same content. 
For example, you may want to confirm an email address or a password. 
This validation creates a virtual attribute whose name is the name of the field that has to be confirmed with "_confirmation" appended.
This check is performed only if email_confirmation is not nil. To require confirmation, make sure to add a presence check for the confirmation attribute

There is also a :case_sensitive option that you can use to define whether the confirmation constraint will be case sensitive or not
  3.0.0 :013 > wallet.amount_confirmation = 11
  => 11 
 3.0.0 :014 > wallet.amount = 10
  => 10 
3.0.0 :011 > wallet.errors.objects.second.full_message
 => "Amount confirmation doesn't match Amount" 

 3.0.0 :008 > wallet.name_confirmation = "Shubham"
 => "Shubham" 
3.0.0 :009 > wallet.name = "shubham"
 => "shubham" 
 
 3.0.0 :006 > wallet.valid?
 => true 































