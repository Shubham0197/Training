HTTP Methods
The primary or most-commonly-used HTTP verbs (or methods, as they are properly called) are POST, GET, PUT, PATCH, and DELETE.
These correspond to create, read, update, and delete (or CRUD) operations, respectively

POST
The POST verb is most-often utilized to **create** new resources. 
In particular, it's used to create subordinate resources. That is, subordinate to some other (e.g. parent) resource. 
In other words, when creating a new resource, POST to the parent and the service takes care of associating the new resource with the parent, assigning an ID 

GET
The HTTP GET method is used to **read** (or retrieve) a representation of a resource.
GET (along with HEAD) requests are used only to read data and not change it. 
Therefore, when used this way, they are considered safe.
 That is, they can be called without risk of data modification or corruptionâ€”calling it once has the same effect as calling it 10 times, or none at all.

PATCH
PATCH is used for **modify** capabilities. The PATCH request only needs to contain the changes to the resource, not the complete resource.
the body contains a set of instructions describing how a resource currently residing on the server should be modified to produce a new version.
 This means that the PATCH body should not just be a modified part of the resource, but in some kind of patch language like JSON Patch or XML Patch.

DELETE
DELETE is pretty easy to understand. It is used to **delete** a resource identified by a URI.
On successful deletion, return HTTP status 200 (OK) along with a response body, perhaps the representation of the deleted item (often demands too much bandwidth), or a wrapped response (see Return Values below). 
Either that or return HTTP status 204 (NO CONTENT) with no response body.

Rails Routing from the Outside In
Routes
The Rails router recognizes URLs and dispatches them to a controller's action, or to a Rack application.
It can also generate paths and URLs, avoiding the need to hardcode strings in your views.
Types of Routes

Simple match routes
Default routes
Root routes
Resourceful routes

Root Routes
HEre the simply the root page of the application is defined
root "Controller#action"

Simple match Routes
Here the the simple machin of the Http request is done with the controller and action
get "/books" , to: "Controler#Action"
so for above if there is get /book request it goes to corresponding action

or can directly write 
get "homes/book"
here rails thinks it is calling Homes conroller and books action in it and will show corresponding view to it.

Rails uses snake_case for controller names , if you have a multiple word controller like MonsterTrucksController, you want to use monster_trucks#show for example.

The routes for your application or engine live in the file config/routes.rb

Resource Routing: the Rails Default

In Rails, a resourceful route provides a mapping between HTTP verbs and URLs to controller actions. 
By convention, each action also maps to a specific CRUD operation in a database. 
A single entry in the routing file, such as:
resources :photos
creates seven different routes in your application, all mapping to the Photos controller

HTTP Verb	Path	Controller#Action	Used for
GET	/photos	photos#index	display a list of all photos
GET	/photos/new	photos#new	return an HTML form for creating a new photo
POST	/photos	photos#create	create a new photo
GET	/photos/:id	photos#show	display a specific photo
GET	/photos/:id/edit	photos#edit	return an HTML form for editing a photo
PATCH/PUT	/photos/:id	photos#update	update a specific photo
DELETE	/photos/:id	photos#destroy	delete a specific photo

So we can create default routing using single command here for the all the crud operations.

To write the path of the links we have to use the server intrepret path in the following ways

photos_path returns /photos
new_photo_path returns /photos/new
edit_photo_path(:id) returns /photos/:id/edit (for instance, edit_photo_path(10) returns /photos/10/edit)
photo_path(:id) returns /photos/:id (for instance, photo_path(10) returns /photos/10)

Can also define the multiple routes for crud operations for tyhe different controller
we can write them in single command  seperatng them by commas
resources :photos, :books, :videos


Nested Resources
It's common to have resources that are logically children of other resources
Nested routes allow you to capture this relationship in your routing
Eg
resources :magazines do
  resources :ads
end
the above will create the following routes
 this declaration will also route ads to an AdsController

HTTP Verb	Path	Controller#Action	Used for
GET	/magazines/:magazine_id/ads	ads#index	display a list of all ads for a specific magazine
GET	/magazines/:magazine_id/ads/new	ads#new	return an HTML form for creating a new ad belonging to a specific magazine
POST	/magazines/:magazine_id/ads	ads#create	create a new ad belonging to a specific magazine
GET	/magazines/:magazine_id/ads/:id	ads#show	display a specific ad belonging to a specific magazine
GET	/magazines/:magazine_id/ads/:id/edit	ads#edit	return an HTML form for editing an ad belonging to a specific magazine
PATCH/PUT	/magazines/:magazine_id/ads/:id	ads#update	update a specific ad belonging to a specific magazine
DELETE	/magazines/:magazine_id/ads/:id	ads#destroy	delete a specific ad belonging to a specific magazine
This will also create routing helpers such as magazine_ads_url and edit_magazine_ad_path. These helpers take an instance of Magazine as the first parameter (magazine_ads_url(@magazine)).

