HTTP Methods
The primary or most-commonly-used HTTP verbs (or methods, as they are properly called) are POST, GET, PUT, PATCH, and DELETE.
These correspond to create, read, update, and delete (or CRUD) operations, respectively

POST
The POST verb is most-often utilized to **create** new resources. 
In particular, it's used to create subordinate resources. That is, subordinate to some other (e.g. parent) resource. 
In other words, when creating a new resource, POST to the parent and the service takes care of associating the new resource with the parent, assigning an ID 

GET
The HTTP GET method is used to **read** (or retrieve) a representation of a resource.
GET (along with HEAD) requests are used only to read data and not change it. 
Therefore, when used this way, they are considered safe.
 That is, they can be called without risk of data modification or corruptionâ€”calling it once has the same effect as calling it 10 times, or none at all.

PATCH
PATCH is used for **modify** capabilities. The PATCH request only needs to contain the changes to the resource, not the complete resource.
the body contains a set of instructions describing how a resource currently residing on the server should be modified to produce a new version.
 This means that the PATCH body should not just be a modified part of the resource, but in some kind of patch language like JSON Patch or XML Patch.

DELETE
DELETE is pretty easy to understand. It is used to **delete** a resource identified by a URI.
On successful deletion, return HTTP status 200 (OK) along with a response body, perhaps the representation of the deleted item (often demands too much bandwidth), or a wrapped response (see Return Values below). 
Either that or return HTTP status 204 (NO CONTENT) with no response body.

Rails Routing from the Outside In