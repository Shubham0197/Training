Terminal in Linux is case sensitive to two file Test.txt and test.txt are different.
To see hidden folder in linux ctrl+h

hardware->kernel->shell->app

Directory Structure


Command Syntax
This command syntax will be the same for every command that you will use in Linux.

command [-argument] [-argument] [--argument] [file]
Examples:
ls List files in the current directory
ls -l Lists files in “long” format
ls -l --color As above, with colorized output
cat filename Show contents of a file
cat -n filename Show contents of a file, with line nu
----------------------------------------------------------------------------------------------

Name -       Create Folder
Purpose-    Creation of folder
Examples- Mkdir linux  
creates the linux folder
mkdir -v ab
displays message for every directory created
-p flag=> enables command to create parent directory as ncessary
mkdir -p a/b/c
itsacheckmate@itsacheckmate:~/Training$ mkdir -v -p d/v/f
mkdir: created directory 'd'
mkdir: created directory 'd/v'
mkdir: created directory 'd/v/f'


-m option =>it is used to set the file mode /premision of the folder created
mkdir -m a=rx abd
itsacheckmate@itsacheckmate:~/Training$ mkdir -v  -m o=r abc
mkdir: created directory 'abc'
itsacheckmate@itsacheckmate:~/Training$ ls -l
total 32
drwxrwxr-- 2 itsacheckmate itsacheckmate 4096 Apr 19 15:53 abc

----------------------------------------------------------------------------------------------------------------------
Name - Change Directory
Purpose- navigate the directory in the linux terminal 
Examples- cd is the command used to change the directory 
Syntax - cd [directory_name] 
cd /  =>change the directory to the root directory
cd dir_1/dir_2/dir_3 => to move to inside of the directory
cd ~ / cd=> used to change the directory to the home directory
cd .. => goes 1 directory back
cd "dir name" or cd dir\ name => this used to navigate to the directory with the white spaces
----------------------------------------------------------------------------------------------------------------------



Name -       Delete Folder
Purpose-  Deletes the folder  
Examples- rmdir is used to remove the emplty folder  
rmdir [-p] [-v | –verbose] [–ignore-fail-on-non-empty] directories 
here -p =>option each of the directory argument is treated as a pathname of which all
 components will be removed, if they are already empty, starting from the last component
-v/-verbose => this option will show the verbose info
–ignore-fail-on-non-empty => this option will not report failure if the direcotry is not empty
itsacheckmate@itsacheckmate:~/Training$ rmdir a
itsacheckmate@itsacheckmate:~/Training$ ls
'a b'   b   git   Linux   PostgreSQL   README.md
itsacheckmate@itsacheckmate:~/Training$ rmdir 'a b' b
itsacheckmate@itsacheckmate:~/Training$ rmdir git
rmdir: failed to remove 'git': Directory not empty
itsacheckmate@itsacheckmate:~/Training$ mkdir a b s
itsacheckmate@itsacheckmate:~/Training$ rmdir -v a
rmdir: removing directory, 'a'

#####
rm - it is the remove command which deletes the objects such as files,directories , symbolic links etc.
and if the command has executed it cant be undone.
rm [option] .... FILE ...
rm a.txt deletes the a.txt file
rm -i a.txt => this asks for confirmation before deleting the file
rm -f a.txt => if the file is write protected it foces to delete it but wont work in the write protected directories
-r (recursive option)- it will perform a tree-walk and will delete all the files and sub-directories recursively
normally rm donot delete directory but using this option it will delete the directory
rm -r *

use -- before file name if file name starts with -
-----------------------------------------------------------------------------------------------
Name -       Rename Folder
Purpose-   Rename the named files according to regular expression perlexpr, can change name of multiple files
Examples-
rename -s => it is going to ingnore the symbolic links
rename -v => verbose will show the files which is being renamed
rename -n=>if the user want  to see only final change
rename -o =>will not overwrite existing files
rename -V => shows the version
rename -help=> help message and exit
itsacheckmate@itsacheckmate:~/Training/Linux/practice$ rename -v 's/a1/b' a.txt
Substitution replacement not terminated at (user-supplied code).
itsacheckmate@itsacheckmate:~/Training/Linux/practice$ rename -v 's/a1/b/' a.txt
itsacheckmate@itsacheckmate:~/Training/Linux/practice$ ls
a1.txt  aa1.txt  aa.txt  a.txt
itsacheckmate@itsacheckmate:~/Training/Linux/practice$ rename -v 's/a1/b/' a1.txt
a1.txt renamed as b.txt
itsacheckmate@itsacheckmate:~/Training/Linux/practice$ rename -n 's/a*/b/' a1.txt
rename(a1.txt, b1.txt)
itsacheckmate@itsacheckmate:~/Training/Linux/practice$ rename -n 's/a*/b/' *.txt
rename(aa1.txt, b1.txt)
aa.txt not renamed: b.txt already exists
a.txt not renamed: b.txt already exists
rename(b.txt, bb.txt)
itsacheckmate@itsacheckmate:~/Training/Linux/practice$ ls
aa1.txt  aa.txt  a.txt  b.txt

-----------------------------------------------------------------------------------
Name -       Moving Folder
Purpose-    used to move one or more fiels or directories
it can also rename files /folders also 
Examples- syntax  mv [Option] source destination
mv a.txt geek.txt  //renames the file a.txt to geek.txt
options 
-i =interactive it just ask for user confirmation 
-f = force moves the write protected files or the write protected destination file
-n = no clobber  prevents the overwriting of the existing files
-b = backup creates the backup of the existing file that is going to be overwritten
itsacheckmate@itsacheckmate:~/Training/Linux/practice$ mv a.txt geek.txt
itsacheckmate@itsacheckmate:~/Training/Linux/practice$ ls
aa1.txt  aa.txt  b.txt  geek.txt
itsacheckmate@itsacheckmate:~/Training/Linux/practice$ mv -n b.txt geek.txt
itsacheckmate@itsacheckmate:~/Training/Linux/practice$ ls
aa1.txt  aa.txt  b.txt  geek.txt
itsacheckmate@itsacheckmate:~/Training/Linux/practice$ mv -b b.txt geek.txt
itsacheckmate@itsacheckmate:~/Training/Linux/practice$ ls
aa1.txt  aa.txt  geek.txt  geek.txt~
itsacheckmate@itsacheckmate:~/Training/Linux/practice$ mv -i aa.txt geek.txt
mv: overwrite 'geek.txt'? n
itsacheckmate@itsacheckmate:~/Training/Linux/practice$ ls
aa1.txt  aa.txt  geek.txt  geek.txt~

-----------------------------------------------------------------------------------
Name -  (cp)     Copying Files from folder
Purpose-    it is to copy files and folder or group of them it creates exact image with different names
Examples- Syntax
cp [OPTION] Source Destination
cp [OPTION] Source Directory
cp [OPTION] Source-1 Source-2 Source-3 Source-n Directory

option->
1 . cp a.txt b.txt
2.cp a.txt b.txt new
3. -r = recursive copying used to copy directory and all the files in it to other directory
cp -R Src_directory Dest_directory
4. -i = interactive with this option it asks the user confirmation
5 -b = backup creates the destination file backup in the same folder but different name and formats
6 -f = force used to copy write protected destination files 
7. -p = preserve it preserves the chracteristics of the souce file int destination like last modification date and time
cp can be run using the wildcard like cp *.txt amd
itsacheckmate@itsacheckmate:~/Training/Linux$ cp *.txt practice
itsacheckmate@itsacheckmate:~/Training/Linux$ ls
linuxcommands.txt  practice  practice.txt
itsacheckmate@itsacheckmate:~/Training/Linux$ cd practice
itsacheckmate@itsacheckmate:~/Training/Linux/practice$ ls
aa1.txt  aa.txt  geek.txt  geek.txt~  linuxcommands.txt  practice.txt

CP vs SCP
------------------------------------------------------------------------------------
Files
Name -       pwd
Purpose-    Print Working Directory				   pwd is shell built-in command(pwd) or an actual binary(/bin/pwd).
Examples- It has 2 options -[LP]
					pwd -L: Prints the symbolic path. it is default command shwon by pwd 
					Also by the $pwd variable value is shown
					pwd -P: Prints the actual path.It is the path shown by /bin/pwd
itsacheckmate@itsacheckmate:~/tmp$ pwd -L
/home/itsacheckmate/tmp
itsacheckmate@itsacheckmate:~/tmp$ pwd -P
/home/itsacheckmate/tmp
-----------------------------------------------------------------------------------------------------------------------------
Name -       Chmod
Purpose-      Change the access mode of the file i.e what user have the permission on the file 
wether they can edit it, or read or execute the file or the directory .
Examples- Syntax is chmod [reference][operator][mode] file... 
Here the reference is whoh the permission apply it is represented by folloing letters
Reference   Class     Description
u          owner      file's owner

g          group      users who are members of
                      the file's group

o          others     users who are neither the
                      file's owner nor members of 
                      the file's group

a          all       All three of the above, same as ugo
Then there is operator which specify how the modes of files should be adjusted
Operator  Description
+         Adds the specified modes to the
          specified classes

-         Removes the specified modes from 
          the specified classes

=         The modes specified are to be made
          the exact modes for the specified 
          classes
and the the modes which indicate which permission is to be granted
r       Permission to read the file.
w       Permission to write (or delete) the file.
x       Permission to execute the file, or, in
        the case of a directory, search it.

the very first column represents the type of the file 
if its is a directory  'd' or if its a file the  '-'
then the folling 3set of letter represents the permission of the file owner
rwx =all three permission or rw- = only the read and write permission 

Then the following set off 3 letters are the group permission and other user permission
respectively 
if the directory has only x permission it means that there is premission to search the directory

Then it spescifies the owner and the group which owner belons to  
 Octal notaions could be used for this
 octal    binary   fileMode
 0			000			---
 1			001			--x
 2			010			-w-
 3			011			-wx
 4			100			r--
 5			101			r-x
 6			110			rw-
 7			111			rwx
 
 so for user,group,and other permission willl be written as
 - rwx--x--x => 711
 
Usage------------
itsacheckmate@itsacheckmate:~/Training/Linux$ ls -l
total 8
-rw-rw-r-- 1 itsacheckmate itsacheckmate 5081 Apr 18 19:10 linuxcommands.txt
-rw-rw-r-- 1 itsacheckmate itsacheckmate    0 Apr 19 13:46 practice.txt
itsacheckmate@itsacheckmate:~/Training/Linux$ chmod u=r practice.txt
itsacheckmate@itsacheckmate:~/Training/Linux$ ls -l
total 8
-rw-rw-r-- 1 itsacheckmate itsacheckmate 5081 Apr 18 19:10 linuxcommands.txt
-r--rw-r-- 1 itsacheckmate itsacheckmate    0 Apr 19 13:46 practice.txt
itsacheckmate@itsacheckmate:~/Training/Linux$ mkdir practice
itsacheckmate@itsacheckmate:~/Training/Linux$ ls-l
ls-l: command not found
itsacheckmate@itsacheckmate:~/Training/Linux$ ls -l
total 12
-rw-rw-r-- 1 itsacheckmate itsacheckmate 5081 Apr 18 19:10 linuxcommands.txt
drwxrwxr-x 2 itsacheckmate itsacheckmate 4096 Apr 19 13:48 practice
-r--rw-r-- 1 itsacheckmate itsacheckmate    0 Apr 19 13:46 practice.txt
itsacheckmate@itsacheckmate:~/Training/Linux$ chmod u=rw practice

itsacheckmate@itsacheckmate:~/Training/Linux$ ls -l
total 8
-rw-rw-r-- 1 itsacheckmate itsacheckmate 5081 Apr 18 19:10 linuxcommands.txt
-rw-rw-r-- 1 itsacheckmate itsacheckmate    0 Apr 19 13:46 practice.txt
itsacheckmate@itsacheckmate:~/Training/Linux$ chmod u=r practice.txt
itsacheckmate@itsacheckmate:~/Training/Linux$ ls -l
total 8
-rw-rw-r-- 1 itsacheckmate itsacheckmate 5081 Apr 18 19:10 linuxcommands.txt
-r--rw-r-- 1 itsacheckmate itsacheckmate    0 Apr 19 13:46 practice.txt
itsacheckmate@itsacheckmate:~/Training/Linux$ mkdir practice
itsacheckmate@itsacheckmate:~/Training/Linux$ ls-l
ls-l: command not found
itsacheckmate@itsacheckmate:~/Training/Linux$ ls -l
total 12
-rw-rw-r-- 1 itsacheckmate itsacheckmate 5081 Apr 18 19:10 linuxcommands.txt
drwxrwxr-x 2 itsacheckmate itsacheckmate 4096 Apr 19 13:48 practice
-r--rw-r-- 1 itsacheckmate itsacheckmate    0 Apr 19 13:46 practice.txt
itsacheckmate@itsacheckmate:~/Training/Linux$ chmod u=rw practice
itsacheckmate@itsacheckmate:~/Training/Linux$ cd practice
bash: cd: practice: Permission denied
itsacheckmate@itsacheckmate:~/Training/Linux$ cd u=rwx practice
bash: cd: too many arguments
itsacheckmate@itsacheckmate:~/Training/Linux$ chmod u=rwx practice
itsacheckmate@itsacheckmate:~/Training/Linux$ chmod 700 practice
itsacheckmate@itsacheckmate:~/Training/Linux$ ls-l
ls-l: command not found
itsacheckmate@itsacheckmate:~/Training/Linux$ ls -l
total 12
-rw-rw-r-- 1 itsacheckmate itsacheckmate 7916 Apr 19 13:58 linuxcommands.txt
drwx------ 2 itsacheckmate itsacheckmate 4096 Apr 19 13:48 practice
-r--rw-r-- 1 itsacheckmate itsacheckmate    0 Apr 19 13:46 practice.txt

Sudo Chmod - This is to used to run the chmod command on the files where we do not have
ownership of the file
sudo chmod o+x practice
itsacheckmate@itsacheckmate:~/Training/Linux$ sudo chmod u+x practice
[sudo] password for itsacheckmate: 
itsacheckmate@itsacheckmate:~/Training/Linux$ ls -l
total 16
-rw-rw-r-- 1 itsacheckmate itsacheckmate 9639 Apr 19 14:01 linuxcommands.txt
drwx------ 2 itsacheckmate itsacheckmate 4096 Apr 19 13:48 practice
-r--rw-r-- 1 itsacheckmate itsacheckmate    0 Apr 19 13:46 practice.txt
itsacheckmate@itsacheckmate:~/Training/Linux$ sudo chmod o-x practice
itsacheckmate@itsacheckmate:~/Training/Linux$ ls -l
total 16
-rw-rw-r-- 1 itsacheckmate itsacheckmate 9639 Apr 19 14:01 linuxcommands.txt
drwx------ 2 itsacheckmate itsacheckmate 4096 Apr 19 13:48 practice
-r--rw-r-- 1 itsacheckmate itsacheckmate    0 Apr 19 13:46 practice.txt
itsacheckmate@itsacheckmate:~/Training/Linux$ sudo chmod o=x practice
itsacheckmate@itsacheckmate:~/Training/Linux$ ls -l
total 16
-rw-rw-r-- 1 itsacheckmate itsacheckmate 9639 Apr 19 14:01 linuxcommands.txt
drwx-----x 2 itsacheckmate itsacheckmate 4096 Apr 19 13:48 practice
-r--rw-r-- 1 itsacheckmate itsacheckmate    0 Apr 19 13:46 practice.txt
itsacheckmate@itsacheckmate:~/Training/Linux$ sudo chmod o+r practice
itsacheckmate@itsacheckmate:~/Training/Linux$ ls -l
total 16
-rw-rw-r-- 1 itsacheckmate itsacheckmate 9639 Apr 19 14:01 linuxcommands.txt
drwx---r-x 2 itsacheckmate itsacheckmate 4096 Apr 19 13:48 practice
-r--rw-r-- 1 itsacheckmate itsacheckmate    0 Apr 19 13:46 practice.txt

Recursive Permission change - it is used to change the permission of multiple files in the 
directory at once   chmod -R is used with find command
Change all the files 
sudo find /path/to/someDirectory -type f -print0 | xargs -0 sudo chmod 644
change for all the directory
sudo find /path/to/someDirectory -type d -print0 | xargs -0 sudo chmod 755

Sticky Bit - It applies only to the directory and specially used by the derictory which is publicly available 
it prevents the user to deleting and remaning any file which they do not personally own  for thsi 't' flag is used
chmod +t <directory>
chmod -t <directory>

itsacheckmate@itsacheckmate:~/Training/Linux$ chmod +t practice
itsacheckmate@itsacheckmate:~/Training/Linux$ ls -l
total 16
-rw-rw-r-- 1 itsacheckmate itsacheckmate 11552 Apr 19 14:53 linuxcommands.txt
drwx---r-t 2 itsacheckmate itsacheckmate  4096 Apr 19 13:48 practice
-r--rw-r-- 1 itsacheckmate itsacheckmate     0 Apr 19 13:46 practice.txt
	
------------------------------------------------------------------------------------------------------------------------------
Name -       ls
Purpose-    lists all the files int the present working directory
Examples-  itsacheckmate@itsacheckmate:~$ ls
Desktop    Downloads     Music     Public  Templates  Training
Documents  GITSetup.txt  Pictures  snap    tmp        Videos
itsacheckmate@itsacheckmate:~$ ^C

ls -l : this will list the file sin the long format
itsacheckmate@itsacheckmate:~/Training$ ls -l
total 16
drwxrwxr-x 2 itsacheckmate itsacheckmate 4096 Apr 18 16:40 git
drwxrwxr-x 2 itsacheckmate itsacheckmate 4096 Apr 18 16:46 Linux
drwxrwxr-x 2 itsacheckmate itsacheckmate 4096 Apr 18 16:44 PostgreSQL
-rw-rw-r-- 1 itsacheckmate itsacheckmate  227 Apr 18 16:40 README.md


-----------------------------------------------------------------------------------------------------
Name -       clear screen
Purpose-    clears the screen of the terminal
Examples- clear
Name -       ps
Purpose-    
Examples-
--------------------------------------------------------------------------------------------------------------------------
Name -       shutdown
Purpose-    used to shutdown the system in a safe way.
Examples- syntax shutdown [OPTIONS] [TIME] [MESSAGE]
					sudo shutdown
					to shutdown the system at a specified time
The time argument can have two different formats
schedule a system shutdown at 05 A.M:
sudo shutdown 05:00
 system shutdown in 20 minutes from now:
sudo shutdown +20

to  broadcast a custom message
sudo shutdown +10 "System upgrade"

itsacheckmate@itsacheckmate:~/Training$ sudo shutdown +1 "System upgrade"
[sudo] password for itsacheckmate: 
Shutdown scheduled for Mon 2022-04-18 19:11:26 IST, use 'shutdown -c' to cancel.


How to halt your system
This can be achieved using the -H option.

shutdown -H
Halting means stopping all CPUs and powering off also makes sure the main power is disconnected.

How to make shutdown power-off machine
Although this is by default, you can still use the -P option to explicitly specify that you want shutdown to power off the system.

shutdown -P
How to reboot using shutdown
For reboot, the option is -r.

shutdown -r
You can also specify a time argument and a custom message:

shutdown -r +5 "Updating Your System"
The command above will reboot the system after 5 minutes and broadcast Updating Your System”

If you have scheduled a shutdown and you want to cancel it you can use the -c argument:

sudo shutdown -c
 cannot specify a time argument, but can still broadcast a message 

sudo shutdown -c "Canceling the reboot"

Name -       touch
Purpose-    
Examples-
Name -       locate
Purpose-    
Examples-
---------------------------------------------------------------------------------------------
Name -       find
Purpose-    
Examples-
---------------------------------------------------------------------------------------------
Name -       grep
Purpose-    
Examples-
Name -       sudo
Purpose-    
Examples-
Name -       Chown
Purpose-    
Examples-
Name -       kill
Purpose-    
Examples-
Name -       ping
Purpose-    
Examples-
Name -       wget
Purpose-    
Examples-
Name -       top
Purpose-    
Examples-
Name -       history
Purpose-    
Examples-
Name -       man
Purpose-    
Examples-
----------------------------------------------------------------------------------------------------------------------------------
Name -       echo
Purpose-    Used to display line of text/string that are passed as an argument
Examples-  echo [option] [string]
options   -e -> to enable the interpretation of the blackslash escapes
 \b : it removes all the spaces in between the text
 \c : suppress trailing new line with backspace interpretor ‘-e‘ to continue without emitting new line.
In above example, text after \c is not printed and omitted trailing new line.
\n : this option creates new line from where it is used.
\t : this option is used to create horizontal tab spaces.
 \r : carriage return with backspace interpretor ‘-e‘ to have specified carriage return in output.
In the above example, text before \r is not printed.
\a : alert return with backspace interpretor ‘-e‘ to have sound alert.

This command when executed, it will produce an alert sound or Bel .
			 -n -> option is used to omit echoing triling newline
			 itsacheckmate@itsacheckmate:~/tmp$ echo -n "Geeks for Geeks"
Geeks for Geeksitsacheckmate@itsacheckmate:~/tmp$
			 echo * -> prints all the files and folder , similiar to ls
			 itsacheckmate@itsacheckmate:~/tmp$ echo *
git-2.35.3 git.tar.gz tmp

-------------------------------------------------------------------------------------------------------------------------------------

Name -       zip/unzip
Purpose-    
Examples-
Name -       nano and Vim editor
Purpose-    
Examples-