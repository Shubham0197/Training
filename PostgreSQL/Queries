PostgreSQL
PostgreSQL is an object-relational database management system (ORDBMS) 
Installed in Windows
#Show Databases

\l
                                         List of databases
   Name    |  Owner   | Encoding |      Collate       |       Ctype        |   Access privileges
-----------+----------+----------+--------------------+--------------------+-----------------------
 postgres  | postgres | UTF8     | English_India.1252 | English_India.1252 |
 template0 | postgres | UTF8     | English_India.1252 | English_India.1252 | =c/postgres          +
           |          |          |                    |                    | postgres=CTc/postgres
 template1 | postgres | UTF8     | English_India.1252 | English_India.1252 | =c/postgres          +
           |          |          |                    |                    | postgres=CTc/postgres
(3 rows)

postgres=# CREATE DATABASE TEST;
CREATE DATABASE

test-#
Here # shows I am Super User
test=>
" => " have rights to the database

# To see current date
SELECT current_date;
 current_date
--------------
 2022-03-31
(1 row)

# Running Arithmatic Commands
SELECT 2 + 2;
 ?column?
----------
        4
(1 row)

# \h for help
# \q to quit

# Postgre uses the SQL language
# "-- " to write comments in SQL

# Creating the tables in the databse

test1=# CREATE TABLE weather (
test1(#     city            varchar(80),
test1(#     temp_lo         int,           -- low temperature
test1(#     temp_hi         int,           -- high temperature
test1(#     prcp            real,          -- precipitation
test1(#     date            date
test1(# );
CREATE TABLE
test1=# CREATE TABLE cities (
test1(#     name            varchar(80),
test1(#     location        point
test1(# );
CREATE TABLE

# Deleteing the whole table  
test1=# DROP TABLE cities;
DROP TABLE


#inserting data in the tables
est1=# INSERT INTO weather VALUES ('San Francisco', 46, 50, 0.25, '1994-11-27');
INSERT 0 1
test1=# INSERT INTO cities VALUES ('San Francisco', '(-194.0, 53.0)');
INSERT 0 1
test1=# INSERT INTO weather (city, temp_lo, temp_hi, prcp, date)
test1-#     VALUES ('San Francisco', 43, 57, 0.0, '1994-11-29');
INSERT 0 1
test1=# INSERT INTO weather (date, city, temp_hi, temp_lo)
test1-#     VALUES ('1994-11-29', 'Hayward', 54, 37);
INSERT 0 1

# Quering the data from the to see data 
test1=# SELECT * FROM weather;
     city      | temp_lo | temp_hi | prcp |    date
---------------+---------+---------+------+------------
 San Francisco |      46 |      50 | 0.25 | 1994-11-27
 San Francisco |      43 |      57 |    0 | 1994-11-29
 Hayward       |      37 |      54 |      | 1994-11-29
(3 rows)

# Quesring data using Orerators to manipulate data 
test1=# SELECT city, (temp_hi+temp_lo)/2 AS temp_avg, date FROM weather;
     city      | temp_avg |    date
---------------+----------+------------
 San Francisco |       48 | 1994-11-27
 San Francisco |       50 | 1994-11-29
 Hayward       |       45 | 1994-11-29
(3 rows)

# Quering data with where clause to seespecific data

test1=# SELECT * FROM weather
test1-#     WHERE city = 'San Francisco' AND prcp > 0.0;
     city      | temp_lo | temp_hi | prcp |    date
---------------+---------+---------+------+------------
 San Francisco |      46 |      50 | 0.25 | 1994-11-27
(1 row)

# using orderby to arrandata while query it
test1=# SELECT * FROM weather
test1-#     ORDER BY city;
     city      | temp_lo | temp_hi | prcp |    date
---------------+---------+---------+------+------------
 Hayward       |      37 |      54 |      | 1994-11-29
 San Francisco |      46 |      50 | 0.25 | 1994-11-27
 San Francisco |      43 |      57 |    0 | 1994-11-29
(3 rows)


#query uniques data from the table 
test1=# SELECT DISTINCT city
test1-#     FROM weather;
     city
---------------
 Hayward
 San Francisco
(2 rows)

#Using Aggregate Functions MAX
test1=# SELECT max(temp_lo) FROM weather;
 max
-----
  46
(1 row)


test1=# SELECT city, max(temp_lo)
test1-#     FROM weather
test1-#     GROUP BY city;
     city      | max
---------------+-----
 Hayward       |  37
 San Francisco |  46
(2 rows)


test1=# UPDATE weather
test1-#     SET temp_hi = temp_hi - 2,  temp_lo = temp_lo - 2
test1-#     WHERE date > '1994-11-28';
UPDATE 2


#Manupulating the tables

#Deleting the specific data from the table

test1=# DELETE FROM weather WHERE city = 'Hayward';
DELETE 1

# updating the data in the table
test1=# UPDATE weather
test1-#     SET temp_hi = temp_hi - 2,  temp_lo = temp_lo - 2
test1-#     WHERE date > '1994-11-28';
UPDATE 2
test1=# SELECT * FROM weather;
     city      | temp_lo | temp_hi | prcp |    date
---------------+---------+---------+------+------------
 San Francisco |      46 |      50 | 0.25 | 1994-11-27
 San Francisco |      41 |      55 |    0 | 1994-11-29
(2 rows)

# Views in SQL are kind of virtual tables. A view also has rows and columns as they are in a real table in the database.

test1=# CREATE VIEW myview AS
test1-#     SELECT name, temp_lo, temp_hi, prcp, date, location
test1-#         FROM weather, cities
test1-#         WHERE city = name;
CREATE VIEW
test1=# SELECT * FROM myview;
     name      | temp_lo | temp_hi | prcp |    date    | location
---------------+---------+---------+------+------------+-----------
 San Francisco |      46 |      50 | 0.25 | 1994-11-27 | (-194,53)
 San Francisco |      41 |      55 |    0 | 1994-11-29 | (-194,53)
(2 rows)


# Foreign Keys -To maintain refrential integrity of data.
For Eg in above table if no data should be added in weather if there is no matching data in cities here we use foriegn keys so Postgresql can do this it self and mintain refrential integrity.

#create table cities with mane as primary key
 create table cities(
 name varchar(80) primary key,
 location point
 );
 ERROR:  relation "cities" already exists
 
 # and make refrence / foreign key of ctiries name column in weather table
 create table weather(
 city varchar(80) references cities(name),
 temp_lo int,
 temp_hi int,
 prcp real,
 date date
 );
 ERROR:  relation "weather" already exists
 # to describe table name
 \d tablename
 test1=# \d cities
                       Table "public.cities"
  Column  |         Type          | Collation | Nullable | Default
----------+-----------------------+-----------+----------+---------
 name     | character varying(80) |           |          |
 location | point                 |           |          |

# adding constrain to existing column in table
alter table cities add constraint cities_pk primary key(name);
ALTER TABLE
test1=# \d cities
                       Table "public.cities"
  Column  |         Type          | Collation | Nullable | Default
----------+-----------------------+-----------+----------+---------
 name     | character varying(80) |           | not null |
 location | point                 |           |          |
Indexes:
    "cities_pk" PRIMARY KEY, btree (name)
	
# Alter table to add foreign key constraints
alter table weather add constraint weather_pk foreign key (city) references cities(name);
ALTER TABLE

                      Table "public.weather"
 Column  |         Type          | Collation | Nullable | Default
---------+-----------------------+-----------+----------+---------
 city    | character varying(80) |           |          |
 temp_lo | integer               |           |          |
 temp_hi | integer               |           |          |
 prcp    | real                  |           |          |
 date    | date                  |           |          |
Foreign-key constraints:
    "weather_pk" FOREIGN KEY (city) REFERENCES cities(name)

#insert error due to Berkley not present in cities table
test1=# INSERT INTO weather VALUES ('Berkeley', 45, 53, 0.0, '1994-11-28');
ERROR:  insert or update on table "weather" violates foreign key constraint "weather_pk"
DETAIL:  Key (city)=(Berkeley) is not present in table "cities".


# Transactions
It is fundamental concept of Database systems.
It bundles multiple steps into one for all or nothing operation.
it help to provide atomicity propertty of datatbase ie if some failure occurs that prevents the transaction from completing, then none of the steps affect the database at all
A transactional database guarantees that all the updates made by a transaction are logged in permanent storage (i.e.,on disk) before the transaction is reported complete.
a transaction is set up by surrounding the SQL commands of the transaction with
BEGIN and COMMIT commands.
if in between donot want to complete transanction just issue command rollback
 A group of statements surrounded by BEGIN and COMMIT is sometimes
called a transaction block

Use "savepoint" and "rollback to" to control transaction inmore granural fashion.

#Joins
(INNER) JOIN: Returns records that have matching values in both tables
LEFT (OUTER) JOIN: Returns all records from the left table, and the matched records from the right table
RIGHT (OUTER) JOIN: Returns all records from the right table, and the matched records from the left table

SELECT * FROM weather JOIN cities ON city = name;
     city      | temp_lo | temp_hi | prcp |    date    |     name      | location
---------------+---------+---------+------+------------+---------------+-----------
 San Francisco |      46 |      50 | 0.25 | 1994-11-27 | San Francisco | (-194,53)
 San Francisco |      43 |      57 |    0 | 1994-11-29 | San Francisco | (-194,53)
(2 rows)


test1=# SELECT weather.city, weather.temp_lo, weather.temp_hi,
test1-#        weather.prcp, weather.date, cities.location
test1-#     FROM weather JOIN cities ON weather.city = cities.name;
     city      | temp_lo | temp_hi | prcp |    date    | location
---------------+---------+---------+------+------------+-----------
 San Francisco |      46 |      50 | 0.25 | 1994-11-27 | (-194,53)
 San Francisco |      43 |      57 |    0 | 1994-11-29 | (-194,53)
(2 rows)


test1=# SELECT *
test1-#     FROM weather LEFT OUTER JOIN cities ON weather.city = cities.name;
     city      | temp_lo | temp_hi | prcp |    date    |     name      | location
---------------+---------+---------+------+------------+---------------+-----------
 San Francisco |      46 |      50 | 0.25 | 1994-11-27 | San Francisco | (-194,53)
 San Francisco |      43 |      57 |    0 | 1994-11-29 | San Francisco | (-194,53)
 Hayward       |      37 |      54 |      | 1994-11-29 |               |
(3 rows)


test1=# SELECT w1.city, w1.temp_lo AS low, w1.temp_hi AS high,
test1-#        w2.city, w2.temp_lo AS low, w2.temp_hi AS high
test1-#     FROM weather w1 JOIN weather w2
test1-#         ON w1.temp_lo < w2.temp_lo AND w1.temp_hi > w2.temp_hi;
     city      | low | high |     city      | low | high
---------------+-----+------+---------------+-----+------
 San Francisco |  43 |   57 | San Francisco |  46 |   50
 Hayward       |  37 |   54 | San Francisco |  46 |   50
 
 test1=# SELECT *
test1-#     FROM weather w JOIN cities c ON w.city = c.name;
     city      | temp_lo | temp_hi | prcp |    date    |     name      | location
---------------+---------+---------+------+------------+---------------+-----------
 San Francisco |      46 |      50 | 0.25 | 1994-11-27 | San Francisco | (-194,53)
 San Francisco |      43 |      57 |    0 | 1994-11-29 | San Francisco | (-194,53)
(2 rows)
 
#INheritence its is a concept in which the table inherits all column from its parent table here city 

test1=# CREATE TABLE city (
test1(#  name text,
test1(#  population real,
test1(#  elevation int -- (in ft)
test1(# );
CREATE TABLE
test1=# CREATE TABLE capitals (
test1(#  state char(2) UNIQUE NOT NULL
test1(# ) INHERITS (city);
CREATE TABLE
test1=# \d capitals
                  Table "public.capitals"
   Column   |     Type     | Collation | Nullable | Default
------------+--------------+-----------+----------+---------
 name       | text         |           |          |
 population | real         |           |          |
 elevation  | integer      |           |          |
 state      | character(2) |           | not null |
Indexes:
    "capitals_state_key" UNIQUE CONSTRAINT, btree (state)
Inherits: city



test1=# insert into capitals values('chandigarh',1234,11,'HA');
INSERT 0 1
test1=# insert into city values('faridabad',1224,112);
INSERT 0 1
test1=# select * from city;
    name    | population | elevation
------------+------------+-----------
 faridabad  |       1224 |       112
 chandigarh |       1234 |        11
(2 rows)

# only to get data from only city
test1=# select * from only city;
   name    | population | elevation
-----------+------------+-----------
 faridabad |       1224 |       112
(1 row)


test1=# select * from  capitals;
    name    | population | elevation | state
------------+------------+-----------+-------
 chandigarh |       1234 |        11 | HA
(1 row)


#SQL syntax
#Lexical Structure
sequenceof tokens terminated by ;
Tokens can be hayward , identifier, constants or literal or special symbol
#Identifier
They identify name of tables columns or other db objects called names
starts with [9-2) followed by any alphabet, digit unserscore or $
They are case insensitive
convention  is to write key words in upper case and names in lower case
#then there is : the delimited identifier or quoted identifier
It is token in quotes whiuch is never treated as keyword
Then can contain ny character except 0
they are case sensitive

# Constants
Three kinds of implicitly-typed constants in PostgreSQL: 
>strings-  A string constant in SQL is an arbitrary sequence of characters bounded by single quotes ('), for example 'This is a string'
,> bit strings, - 
 and >numbers -
Constants can also be specified with explicit types, which can enable more accurate representation and
more efficient handling by the system
Backslash Escape Sequenceand its  Interpretation
\b backspace
\f form feed
\n newline
\r carriage return
\t tab
\o, \oo, \ooo (o = 0–7) octal byte value
\xh, \xhh (h = 0–9, A–F) hexadecimal byte value
\uxxxx, \Uxxxxxxxx (x = 0–9, A–F) 16 or 32-bit hexadecimal Unicode character
value

*Dollar-Quoted String Constants to revisit???

#Bit-String Constants
Bit-string constants look like regular string constants with a B (upper or lower case) immediately before the opening quote (no intervening whitespace),
e.g., B'1001'. The only characters allowed within bit-string constants are 0 and 1 and for hexadecimal b is replaced with x eg x'12ABF'

#Numeric Constants
Numeric constants are accepted in these general forms:
digits
digits.[digits][e[+-]digits]    --exponent marker (e)
[digits].digits[e[+-]digits]
digitse[+-]digits

Typecasting REAL '1.23' numeric treated as Real(float64)

----------------------------------------------------------------------------------------------
#Indexes
Speacial lookup tables used by db search engine to speed up data retreival.It is like a pointer to data in the table
Speeds up select query with where clause but slows down insert and update query.
Create Indexes
test1=# create index abc on city(name,population);
CREATE INDEX

Types of index
Single-Column Indexes index created based on only one column in table.
test1=# create index abc on city(population);
CREATE INDEX

Multicolumn Indexes  index created based on multiple column in table.
test1=# create index abc on city(name,population);
CREATE INDEX

choice of column should be the which is frequently used in quesry where clause.

Unique index
used for data integrity as it does not allow any duplicated to be inserted into the table.
test1=# create unique index  uni on city(name);
ERROR:  could not create unique index "uni"
DETAIL:  Key (name)=(faridabad) is duplicated.

Partial index - index made over a subset of table it is defined by conditional expression and index contains rows whcih satisfy that condition.

Implicit Indexes
Implicit indexes are indexes that are automatically created by the database server when an object is created. Indexes are automatically created for primary key constraints and unique constraints.
test1=# \d city
                  Table "public.city"
   Column   |  Type   | Collation | Nullable | Default
------------+---------+-----------+----------+---------
 name       | text    |           |          |
 population | real    |           |          |
 elevation  | integer |           |          |
Indexes:
    "abc" btree (name, population)
Number of child tables: 1 (Use \d+ to list them.)

 Drop index - deletes the index
DROP INDEX abd;
DROP INDEX

Index shoul be avoided in case
Table is small
many update and insert operation is done
many null values in columns
columns that are frequently manipulated---? is it not same as update??

--------------------------------------------------------------------------------------------------------
Union- Combines combine the result of 2 or more select statement
test1=# select name from city union select name from cities;
     name
---------------
 chandigarh
 San Francisco
 faridabad
(3 rows)

columns name of the seleted tabel should be same to be shown
test1=# select name from city union select location from cities;
ERROR:  UNION types text and point cannot be matched
LINE 1: select name from city union select location from cities;
                                           ^
										   
Union All- combine the results of two SELECT statements including duplicate rows
test1=# select name from city union all  select name from cities;
     name
---------------
 faridabad
 faridabad
 chandigarh
 San Francisco
(4 rows)
-=----------------------------------------------------------------------------------------------
test1=# \c
You are now connected to database "test1" as user "postgres".

--------------------------------------------------------------------------------------------------
#Alter table - extended clauses

#Add column
test1=# Alter table city add id int;
ALTER TABLE
test1=# \d city
                  Table "public.city"
   Column   |  Type   | Collation | Nullable | Default
------------+---------+-----------+----------+---------
 name       | text    |           |          |
 population | real    |           |          |
 elevation  | integer |           |          |
 id         | integer |           |          |
Number of child tables: 1 (Use \d+ to list them.)

#Drop column
test1=# Alter table city drop id ;
ALTER TABLE
test1=# \d city
                  Table "public.city"
   Column   |  Type   | Collation | Nullable | Default
------------+---------+-----------+----------+---------
 name       | text    |           |          |
 population | real    |           |          |
 elevation  | integer |           |          |
Number of child tables: 1 (Use \d+ to list them.)

Alter data type
test1=# Alter table city alter column  id type real;
ALTER TABLE
test1=# \d city
                    Table "public.city"
   Column   |     Type     | Collation | Nullable | Default
------------+--------------+-----------+----------+---------
 name       | text         |           |          |
 population | real         |           |          |
 elevation  | integer      |           |          |
 id         | real         |           |          |
 gender     | character(1) |           |          |
Number of child tables: 1 (Use \d+ to list them.)

#not null constraints
test1=# ALTER TABLE city alter column  id set  NOT NULL;
ERROR:  column "id" of relation "city" contains null values

test1=# ALTER TABLE city alter column  id set  NOT NULL;
ERROR:  column "id" of relation "city" contains null values
test1=# ALTER TABLE city alter column  name set  NOT NULL;
ALTER TABLE
test1=# \d city
                    Table "public.city"
   Column   |     Type     | Collation | Nullable | Default
------------+--------------+-----------+----------+---------
 name       | text         |           | not null |
 population | real         |           |          |
 elevation  | integer      |           |          |
 id         | real         |           |          |
 gender     | character(1) |           |          |
Number of child tables: 1 (Use \d+ to list them.)


ADD CHECK CONSTRAINT
What is check constraints
before any reocrd is inserted in the row query check in the constraints if the is fullfilled of not.
ALTER TABLE table_name
ADD CONSTRAINT MyUniqueConstraint CHECK (CONDITION);

DROP CONSTRAINT
test1=# Alter table weather drop constraint weather_pk;
ALTER TABLE
test1=# \d weather
                      Table "public.weather"
 Column  |         Type          | Collation | Nullable | Default
---------+-----------------------+-----------+----------+---------
 city    | character varying(80) |           |          |
 temp_lo | integer               |           |          |
 temp_hi | integer               |           |          |
 prcp    | real                  |           |          |
 date    | date                  |           |          |

# use \d+ to get extra data about table 
test1=# \d+ weather
                                                 Table "public.weather"
 Column  |         Type          | Collation | Nullable | Default | Storage  | Compression | Stats target | Description ---------+-----------------------+-----------+----------+---------+----------+-------------+--------------+------------- city    | character varying(80) |           |          |         | extended |             |              |
 temp_lo | integer               |           |          |         | plain    |             |              |
 temp_hi | integer               |           |          |         | plain    |             |              |
 prcp    | real                  |           |          |         | plain    |             |              |
 date    | date                  |           |          |         | plain    |             |              |
Access method: heap



DROP PRIMARY KEY
ALTER TABLE table_name
DROP CONSTRAINT MyPrimaryKey;

dROP COLUMN
ALTER TABLE table_name DROP PRIMARY KEY;
test1=# ALTER TABLE CITY DROP ID;
ALTER TABLE

------------------------------------------------
Upsert
Allows dml statement to insert data in table if it already exists update the table

INSERT INTO table_name(column_list)  
VALUES(value_list)
ON CONFLICT target action;

Target action can be update statement or Do nothing

The target can be :
(column_name) – any column name.
ON CONSTRAINT constraint_name – where the constraint name could be the name of the UNIQUE constraint.
 WHERE predicate  – a WHERE clause with a boolean condition.
The action can be :
DO NOTHING – If the row already exists in the table, then do nothing.
DO UPDATE SET columnA = valueA, …. WHERE condition – update some fields in the table depending upon the condition

test1=# insert into cities (name) values('faridabad') on conflict(name) do nothing ;
INSERT 0 1
test1=# Select * from cities;
     name      | location
---------------+-----------
 San Francisco | (-194,53)
 faridabad     |
(2 rows)


test1=# insert into cities (name) values('faridabad') on conflict(name) do nothing ;
INSERT 0 0

test1=# insert into cities (name) values('faridabad') on conflict(name) do update set name='asd' ;
INSERT 0 1
test1=# Select * from cities;
     name      | location
---------------+-----------
 San Francisco | (-194,53)
 asd           |
(2 rows)

-----------------------------------------------------------------------------------------------
Fetch clause
Similair to limit used to get only portion of rows
Syntax:
OFFSET start { ROW | ROWS }
FETCH { FIRST | NEXT } [ row_count ] { ROW | ROWS } ONLY
test1=# Select * from city fetch next 1 row only;
   name    | population | elevation | gender
-----------+------------+-----------+--------
 faridabad |       1224 |       112 |
(1 row)

Show the second row

test1=# Select * from city offset 1 row fetch  next 1 row only;
   name    |  population  | elevation | gender
-----------+--------------+-----------+--------
 faridabad | 1.212121e+06 |     12121 |
(1 row)

show the 3rd highest city 
test1=# Select * from city order by elevation desc offset 2 row fetch  next 1 row only;
    name    | population | elevation | gender
------------+------------+-----------+--------
 chandigarh |       1234 |        11 |
(1 row)
=------------------------------------------------------------------------------------------------

Triggers
they are the commands automatically occurs when certain database event occured
 
Trigger can fire 
1 before event
2 after event 
3 instead event

Trigger can br marked -'For each row'- Once for every row that the operation modifies or 'for each statement'- once for any given operation
CREATE  TRIGGER trigger_name [BEFORE|AFTER|INSTEAD OF] event_name
ON table_name
[
 -- Trigger logic goes here....
];

CREATE TRIGGER example_trigger AFTER INSERT ON COMPANY
FOR EACH ROW EXECUTE PROCEDURE auditlogfunc();





---------------------------------------------------
Functions/Stored Procedures
They allows to perform operations that would take several queries and loops into a single funtion in db
allows the reusability and other application can diretly run them without any middlelayer
Functions can be magein different languages like SQL, PL/pgSQL, C, Python, etc.
General syntax

CREATE [OR REPLACE] FUNCTION function_name (arguments) 
RETURNS return_datatype AS $variable_name$
   DECLARE
      declaration;
      [...]
   BEGIN
      < function_body >
      [...]
      RETURN { variable_name | value }
   END; LANGUAGE plpgsql;
   
here 

[OR REPLACE] option allows modifying an existing function.

The function must contain a return statement.

RETURN clause specifies that data type you are going to return from the function. The return_datatype can be a base, composite, or domain type, or can reference the type of a table column.

function-body contains the executable part.

The AS keyword is used for creating a standalone function.

plpgsql is the name of the language that the function is implemented in. Here, we use this option for PostgreSQL, it Can be SQL, C, internal, or the name of a user-defined procedural language. For backward compatibility, the name can be enclosed by single quotes.

So creating standalone function to find the max age in the company table
test1=# CREATE OR REPLACE FUNCTION maxage()
test1-# RETURNS integer AS $maxage$
test1$# declare
test1$# mage integer;
test1$# BEGIN
test1$#    SELECT max(age) into mage FROM COMPANY;
test1$#    RETURN mage;
test1$# END;
test1$# $maxage$ LANGUAGE plpgsql;
CREATE FUNCTION

Calling Function
Positional notation.
test1=# select maxage();
 maxage
--------
     32
(1 row)

Named notation

mix of both positonal argument can  not be after named argument


test1=# CREATE OR REPLACE FUNCTION totalRecords ()
test1-# RETURNS integer AS $total$
test1$# declare
test1$# total integer;
test1$# BEGIN
test1$#    SELECT count(*) into total FROM COMPANY;
test1$#    RETURN total;
test1$# END;
test1$# $total$ LANGUAGE plpgsql;
CREATE FUNCTION

test1=# select totalRecords();
 totalrecords
--------------
            7
(1 row)



Creating funtion to send the no of employees above certain age; 


create or replace function agecheck(agein int)
returns int as $allowed$
declare
ageno int;
begin
select count(*) into ageno from company where age>agein;
return ageno;
end;
$allowed$ language plpgsql;


Named notation

test1=# select agecheck(agein=> 28);
 agecheck
----------
        1
(1 row)

Function over loading 
PostgreSQL allows more than one function to have the same name, as long as the arguments are different. When a function is called, PostgreSQL determines the exact function is being called based on the input arguments.

create or replace function agecheck(agein int)
returns int as $allowed$
declare
ageno int;
begin
select count(*) into ageno from company where age>agein;
return ageno;
end;
$allowed$ language plpgsql;

create or replace function agecheck(agein int,ageout int)
returns int as $allowed$
declare
ageno int;
begin
select count(*) into ageno from company where age between agein and ageout;
return ageno;
end;
$allowed$ language plpgsql;

select count(*) from company where age between 20 and 30;

test1=# select agecheck(25);
 agecheck
----------
        2
(1 row)


test1=# select agecheck(20,30);
 agecheck
----------
        6
(1 row)




 Drop function
 drop function [if exists] function_name(argument_list)
 
 (argument_list) in case of function is over loaded
test1=#  drop function agecheck();
ERROR:  function agecheck() does not exist
test1=#  drop function agecheck(int);
DROP FUNCTION
--------------------------------------------------------------
postgresql cast operator
it converts a value from one type to another
 syntax
 CAST ( expression AS target_type );
 
 test1=# SELECT
test1-#  CAST ('100' AS INTEGER);
 int4
------
  100
(1 row)

Can not convert char to integer

test1=# SELECT
test1-#  CAST ('10C' AS INTEGER);
ERROR:  invalid input syntax for type integer: "10C"
LINE 2:  CAST ('10C' AS INTEGER);
               ^
test1=# SELECT
test1-#    CAST ('2020-01-01' AS DATE),
test1-#    CAST ('01-OCT-2020' AS DATE);
    date    |    date
------------+------------
 2020-01-01 | 2020-10-01
(1 row)


test1=# SELECT
test1-#    CAST('true' AS BOOLEAN),
test1-#    CAST('false' as BOOLEAN),
test1-#    CAST('T' as BOOLEAN),
test1-#    CAST('F' as BOOLEAN);
 bool | bool | bool | bool
------+------+------+------
 t    | f    | t    | f
(1 row)
-----------------------------------------------------------------------------------------
The COALESCE function 
accepts an unlimited number of arguments. It returns the first argument that is not null. If all arguments are null, the COALESCE function will return null.

test1=# insert into company(name) values('sam');
ERROR:  null value in column "age" of relation "company" violates not-null constraint
DETAIL:  Failing row contains (8, sam, null, null, null).
test1=# insert into company(name,age) values('sam',34);
INSERT 0 1
test1=# select coalesce(address,'na') from company;
                      coalesce
----------------------------------------------------
 California
 Texas
 Norway
 Rich-Mond
 Texas
 South-Hall
 Houston
 na
(8 rows)
---------------------------------------------------
Assert
provides the ASSERT statement for inserting important debugging checks in the PL/pgSQL code

Syntax: assert condition [, message]; 
condition: The condition is a boolean expression that is supposed to return true. 
If the condition returns true, the assert statement does nothing and the program continues to run.
However, if the condition is evaluated to false or null, then an ASSERT_FAILURE exception is raised. 
(If we encounter an error while evaluating the condition, it is reported as a normal error.)
 
message: The message is an optional part which is an expression whose result (if not null) replaces the default error message text  “assertion failed”, should the condition fail.


this function will check the age is abvove 20 otherwise gives error
test1=# create or replace function agecheckup(agein int)
test1-# returns char(50) as $allowed$
test1$# declare
test1$#
test1$# begin
test1$# assert agein>20,'age low';
test1$#
test1$# end;
test1$# $allowed$ language plpgsql;
CREATE FUNCTION
test1=# select agecheckup(23);
ERROR:  control reached end of function without RETURN
CONTEXT:  PL/pgSQL function agecheckup(integer)
test1=# select agecheckup(12);
ERROR:  age low
CONTEXT:  PL/pgSQL function agecheckup(integer) line 5 at ASSERT
test1=#
---------------------------------------------------------------------
Triggers
they are the commands automatically occurs when certain database event occured
 
Trigger can fire 
1 before event
2 after event 
3 instead event

Trigger can br marked -'For each row'- Once for every row that the operation modifies or 'for each statement'- once for any given operation
Special funtion binds to the table

Need to define a trigger function first

Based on CRUD operations
create trigger company_age_check before insert on company_age_check
for each row execute procedure agecheck();

create or replace function agecheckuptrigger()
returns trigger as $$
begin
assert NEW.age>20,'age low';
return NEW;
end;
$$ language plpgsql;

test1=# create or replace function agecheckuptrigger()
test1-# returns trigger as $$
test1$# begin
test1$# assert NEW.age>20,'age low';
test1$# return NEW;
test1$# end;
test1$# $$ language plpgsql;
CREATE FUNCTION

Creating Trigger

CREATE TRIGGER age_check
    BEFORE INSERT OR UPDATE
ON company
FOR EACH ROW 
    EXECUTE PROCEDURE agecheckuptrigger();
	
	test1=# CREATE TRIGGER age_check
test1-#     BEFORE INSERT OR UPDATE
test1-# ON company
test1-# FOR EACH ROW
test1-#     EXECUTE PROCEDURE agecheckuptrigger();
CREATE TRIGGER

test1=# insert into company(name,age) values('ram',18);
ERROR:  age low
CONTEXT:  PL/pgSQL function agecheckuptrigger() line 3 at ASSERT
test1=# insert into company(name,age) values('ram',28);
INSERT 0 1

'new' is like 'this' to reference the object in the current statement

using if statement


	create or replace function agecheckuptrigger()
returns trigger as $$
begin
    IF age < 20 OR NEW.age IS NULL THEN
        RAISE EXCEPTION 'entered age is not correct';
    END IF;
	
return NEW;
end;

test1=# create or replace function agecheckuptrigger()
test1-# returns trigger as $$
test1$# begin
test1$#     IF new.age < 20 OR NEW.age IS NULL THEN
test1$#         RAISE EXCEPTION 'entered age is not correct';
test1$#     END IF;
test1$#
test1$# return NEW;
test1$# end;
test1$# $$ language plpgsql;
CREATE FUNCTION
test1=# insert into company(name,age) values('ram',18);
ERROR:  entered age is not correct
CONTEXT:  PL/pgSQL function agecheckuptrigger() line 4 at RAISE

Disabling the Trigger
Syntax
ALTER TABLE table_name
DISABLE TRIGGER trigger_name | ALL

test1=# alter table company
test1-# disable trigger all;
ALTER TABLE
test1=# insert into company(name,age) values('ram',18);
INSERT 0 1

Enabling the trigger

Syntax:
ALTER TABLE table_name
ENABLE TRIGGER trigger_name |  ALL;

test1=# alter table company
test1-# enable trigger all;
ALTER TABLE
test1=# insert into company(name,age) values('ram',18);
ERROR:  entered age is not correct
CONTEXT:  PL/pgSQL function agecheckuptrigger() line 4 at RAISE

Crop Trigger - Deleting the trigger

Syntax:
DROP TRIGGER [IF EXISTS] trigger_name 
ON table_name [ CASCADE | RESTRICT ];

test1=# \d company
                                Table "public.company"
 Column  |     Type      | Collation | Nullable |               Default
---------+---------------+-----------+----------+-------------------------------------
 id      | integer       |           | not null | nextval('company_id_seq'::regclass)
 name    | text          |           | not null |
 age     | integer       |           | not null |
 address | character(50) |           |          |
 salary  | real          |           |          |
Indexes:
    "company_pkey" PRIMARY KEY, btree (id)
Triggers:
    age_check BEFORE INSERT OR UPDATE ON company FOR EACH ROW EXECUTE FUNCTION agecheckuptrigger()


test1=# drop trigger age_check
test1-# on company;
DROP TRIGGER
