PostgreSQL built-in functions also Aggregate Function

# Count the number rows in the query
test1=# SELECT COUNT(*) FROM city ;
 count
-------
     2
(1 row)

test1=# SELECT * FROM city where name = 'faridabad';
   name    | population | elevation
-----------+------------+-----------
 faridabad |       1224 |       112
(1 row)


test1=# SELECT count(*) FROM city where name = 'faridabad';
 count
-------
     1
(1 row)

#MAX show the maximum value of the column selected
 test1=# select  max(elevation) from city;
 max
-----
 112
(1 row)

#MIN show the minimum value of the column selected
test1=# select  min(elevation) from city;
 min
-----
  11
(1 row)

# Can see max and min in same time
test1=# select  min(elevation) ,max(elevation) from city;
 min | max
-----+-----
  11 | 112
(1 row)

# Group by in MAX or MIN will show each min / max of group.
test1=# select * from city;
    name    |  population  | elevation
------------+--------------+-----------
 faridabad  |         1224 |       112
 faridabad  | 1.212121e+06 |     12121
 chandigarh |         1234 |        11
(3 rows)


test1=# select name, max(elevation) from city group by name;
    name    |  max
------------+-------
 chandigarh |    11
 faridabad  | 12121
(2 rows)

# AVG - shows the average of the selected column
test1=# select avg(elevation) from city;
          avg
-----------------------
 4081.3333333333333333
(1 row)

test1=# select avg(elevation) from city group by name;
          avg
-----------------------
   11.0000000000000000
 6116.5000000000000000
(2 rows)

# Sum - JUst Like avg it sums up all the rows of the selected column
test1=# select sum(elevation) from city;
  sum
-------
 12244
(1 row)


test1=# select sum(elevation) from city group by name;
  sum
-------
    11
 12233
(2 rows)


#Array_agg concatenate the values into array
test1=# select array_agg(elevation) from city;
   array_agg
----------------
 {112,12121,11}
(1 row)


test1=# select array_agg(name) from city;
            array_agg
----------------------------------
 {faridabad,faridabad,chandigarh}
(1 row)



Numeric Functions

The ABS() function returns the absolute value of X.
test1=# SELECT ABS(-2);
 abs
-----
   2
(1 row)

ACOS(X) -  returns the arccosine of X. The value of X must range between -1 and 1 or NULL will be returned

test1=# SELECT ACOS(1);
 acos
------
    0
(1 row)


test1=# SELECT ACOS(-11);
ERROR:  input is out of range
test1=# SELECT ACOS(-1);
       acos
-------------------
 3.141592653589793
(1 row)

ASIN(X)- like acos() The ASIN() function returns the arcsine of X range[-1,1]
test1=# SELECT ASIN(1);
        asin
--------------------
 1.5707963267948966
(1 row)


test1=# SELECT ASIN(0);
 asin
------
    0
(1 row)

ATAN(X) - This function returns the arctangent of X.

test1=# SELECT ATAN(0);
 atan
------
    0
(1 row)


test1=# SELECT ATAN(1);
        atan
--------------------
 0.7853981633974483
(1 row)

ATAN2(Y,X)
This function returns the arctangent of the two arguments: X and Y. It is similar to the arctangent of Y/X, except that the signs of both are used to find the quadrant of the result.--???????
test1=# SELECT ATAN2(3,6);
       atan2
--------------------
 0.4636476090008061
(1 row)

CEIL(X) / CEILING(X)  - Return the smaller integer value just bigger than arg
test1=# select ceil(3.232);
 ceil
------
    4
(1 row) 

test1=# select ceil(3.0);
 ceil
------
    3
(1 row)
test1=# select ceil(-3.123);
 ceil
------
   -3
(1 row)

Floor(x)-  Return the bigger integer value just smaller than arg
test1=# select floor (2.3343);
 floor
-------
     2
(1 row)

test1=# select floor (-2.3343);
 floor
-------
    -3
(1 row)

GREATEST(n1,n2,n3,..........)- Give the greates vlue from the no of parameters.
test1=# select greatest(121,323,423,31,445,224,25345,4,23,4234,234,32423);
 greatest
----------
    32423
(1 row)

LEAST(N1,N2,N3,N4,......) - gives the least values from the no of parameters.
test1=# select least(121,323,423,31,445,224,25345,4,23,4234,234,32423);
 least
-------
     4
(1 row)

COS(X) -This function returns the cosine of X (in degrees)
test1=# select cos(0);
 cos
-----
   1
(1 row)


test1=# select cos(90);
         cos
---------------------
 -0.4480736161291701
(1 row)

COT(X) -This function returns the cotangent of X --???
test1=# SELECT COT(1);
        cot
--------------------
 0.6420926159343306
(1 row)

DEGREES(X)- This function returns the value of X converted from radians to degrees
test1=# SELECT DEGREES(PI());
 degrees
---------
     180
(1 row)


test1=# SELECT DEGREES(1);
      degrees
-------------------
 57.29577951308232
(1 row)

# pi() - returns the value of pi
test1=# select pi();
        pi
-------------------
 3.141592653589793
(1 row)

EXP(X) returns e^x.
test1=# SELECT EXP(3);
        exp
--------------------
 20.085536923187668
(1 row)

test1=# SELECT EXP(1);
        exp
-------------------
 2.718281828459045
(1 row)

LOG(X) / LOG(B,X) -  returns the value of log to natural base or base B
test1=# SELECT LOG(45);
        log
--------------------
 1.6532125137753437
(1 row)


test1=# SELECT LOG(1);
 log
-----
   0
(1 row)

test1=# SELECT LOG(2,65536);
        log
--------------------
 16.000000000000000
(1 row)

MOD(N,M) - retuns remainder n/m
test1=# SELECT mod(9,2);
 mod
-----
   1
(1 row)

POW(X,Y) / POWER(X,Y)-returns x^y
test1=# select pow(3,2);
 pow
-----
   9
(1 row)

RADIANS(X)-  converted from degrees to radians.
test1=# SELECT RADIANS(90);
      radians
--------------------
 1.5707963267948966
(1 row)

ROUND(X) / ROUND(X,D) - round to integer or nearest D decimal points
test1=# SELECT ROUND(5.693893);
 round
-------
     6
(1 row)


test1=# SELECT ROUND(5.693893,2);
 round
-------
  5.69
(1 row)

SIGN(X)- returns the sign of X (negative, zero, or positive) as -1, 0, or 1.
test1=# SELECT SIGN(0);
 sign
------
    0
(1 row)


test1=# SELECT SIGN(-0);
 sign
------
    0
(1 row)


test1=# SELECT SIGN(-1.2);
 sign
------
   -1
(1 row)


test1=# SELECT SIGN(1.2);
 sign
------
    1
(1 row)

SIN(X)- This function returns the sine of X
test1=# select sin(90);
        sin
--------------------
 0.8939966636005579
(1 row)
SQRT(X) -returns the non-negative square root of X.
test1=# select sqrt(9);
 sqrt
------
    3
(1 row)


#ASCII()-Returns numeric value of left-most character
                     ^
test1=# select ascii('a');
 ascii
-------
    97
(1 row)


test1=# select ascii('ax');
 ascii
-------
    97
(1 row)


#BIT_LENGTH()-Returns length of argument in bits
test1=# select bit_length('b');
 bit_length
------------
          8
(1 row)


test1=# select bit_length('@');
 bit_length
------------
          8
(1 row)


test1=# select bit_length('@sdafgfsdfsd');
 bit_length
------------
         96
(1 row)



#CHAR_LENGTH()-Returns number of characters in argument
test1=# select char_length('asad');
 char_length
-------------
           4
(1 row)


test1=# select char_length('asad13123');
 char_length
-------------
           9
(1 row)

#CHARACTER_LENGTH()-A synonym for CHAR_LENGTH()
test1=# select character_length('adaws233');
 character_length
------------------
                8
(1 row)


#CONCAT_WS() - Returns concatenate with separator,first argument is the separator for the rest of the arguments
test1=# select concat_ws('sdas','232','ase','1213','32312');
          concat_ws
-----------------------------
 232sdasasesdas1213sdas32312
(1 row)



#CONCAT()-Returns concatenated string
test1=# select concat('sdas','232','ase');
   concat
------------
 sdas232ase
(1 row)


#LCASE()-Synonym for LOWER()
test1=# select LCASE('CSACASDCAS');
ERROR:  function lcase(unknown) does not exist
LINE 1: select LCASE('CSACASDCAS');


#LEFT()- Returns the leftmost number of characters as specified
test1=# SELECT LEFT('adafesfewfdr3q2rwecsd',9);
   left
-----------
 adafesfew
(1 row)
 
#LENGTH()- Returns the length of a string in bytes (looks like char_length())

test1=# select length('14234afsdf!@!@#$');
 length
--------
     16
(1 row)


#LOWER()-Returns the argument in lowercase
test1=# select lower('SDSDD');
 lower
-------
 sdsdd
(1 row)


test1=# select lower('2132');
 lower
-------
 2132
(1 row)


11	LPAD()- Returns the string argument, left-padded with the specified string
test1=# select lpad('qw',4,'11');
 lpad
------
 11qw
(1 row)


test1=# select lpad('qw121',4,'11');
 lpad
------
 qw12
(1 row)

#LTRIM()-Removes leading spaces
test1=# SELECT LTRIM('  basa    ');
  ltrim
----------
 basa
(1 row)


13	MID()
Returns a substring starting from the specified position

#POSITION()-A synonym for LOCATE()
test1=# select position('2'IN'111122334');
 position
----------
        5
(1 row)

#QUOTE()-Escapes the argument for use in an SQL statement
SELECT QUOTE_IDENT('Foo bar');
 quote_ident
-------------
 "Foo bar"
(1 row)

SELECT QUOTE_LITERAL(E'O\'Reilly');
 quote_literal
---------------
 'O''Reilly'
(1 row)

test1=# SELECT QUOTE_LITERAL(42.5);
 quote_literal
---------------
 '42.5'
(1 row)

test1=# SELECT QUOTE_NULLABLE(42.5);
 quote_nullable
----------------
 '42.5'
(1 row)

16	REGEXP
Pattern matching using regular expressions
Regular Expression
RoadBlock


#REPEAT()-Repeats a string the specified number of times
REPEAT(str,count)
test1=# select repeat('my',3);
 repeat
--------
 mymymy
(1 row)

#REPLACE()- Replaces occurrences of a specified string
REPLACE(str,from_str,to_str)
test1=# select replace('12345678','2','3');
 replace
----------
 13345678
(1 row)


#REVERSE()-Reverse the characters in a string
test1=# select reverse('1232345');
 reverse
---------
 5432321
(1 row)

test1=# select reverse('abcdefgh');
 reverse
----------
 hgfedcba
(1 row)

#RIGHT()-Returns the specified rightmost number of characters
test1=# select right('adafdff',2);
 right
-------
 ff
(1 row)

test1=# select right('',2);
 right
-------

(1 row)

test1=# select right(NUll,2);
 right
-------

(1 row)

#RPAD()- Appends string the specified number of timesIf str is longer than len, the return value is shortened to len characters.
test1=# select rpad('qw',4,'#');
 rpad
------
 qw##
(1 row)


test1=# select rpad('qwssdas',4,'#');
 rpad
------
 qwss
(1 row)

RPAD(str,len,padstr)


#RTRIM()- Removes trailing spaces
test1=# select rtrim('asdasdasdea     ');
    rtrim
-------------
 asdasdasdea
(1 row)

#SUBSTRING(), SUBSTR()-Returns the substring as specified
SUBSTRING(str,pos), SUBSTRING(str FROM pos), SUBSTRING(str,pos,len), SUBSTRING(str FROM pos FOR len)
test1=# SELECT SUBSTRING('Quadratically',5);
 substring
-----------
 ratically
(1 row)

test1=# SELECT SUBSTRING('foobarbar' FROM 4);
 substring
-----------
 barbar
(1 row)

test1=# SELECT SUBSTRING('Quadratically',5,6);
 substring
-----------
 ratica
(1 row)

test1=# SELECT SUBSTRING('Quadratically',0,6);
 substring
-----------
 Quadr
(1 row)


TRIM()-Removes leading and trailing spaces
TRIM([{BOTH | LEADING | TRAILING} [remstr] FROM] str), TRIM([remstr FROM] str)
test1=# SELECT TRIM('  bar   ');
 btrim
-------
 bar
(1 row)

test1=# SELECT TRIM(LEADING 'x' FROM 'xxxbarxxx');
 ltrim
--------
 barxxx
(1 row)
test1=# SELECT TRIM('  bar   ');
 btrim
-------
 bar
(1 row)

test1=# SELECT TRIM(LEADING 'x' FROM 'xxxbarxxx');
 ltrim
--------
 barxxx
(1 row)

test1=# SELECT TRIM(BOTH 'x' FROM 'xxxbarxxx');
 btrim
-------
 bar
(1 row)


test1=# SELECT TRIM(TRAILING 'xyz' FROM 'barxxyz');
 rtrim
-------
 bar
(1 row)
test1=# SELECT TRIM(BOTH 'x' FROM 'xxxbarxxx');
 btrim
-------
 bar
(1 row)

test1=# SELECT TRIM(TRAILING 'xyz' FROM 'barxxyz');
 rtrim
-------
 bar
(1 row)

#UCASE()-Synonym for UPPER()
test1=# select UCASE('Dadasda');
ERROR:  function ucase(unknown) does not exist
LINE 1: select UCASE('Dadasda');
               ^
			   
#UPPER()- Converts to uppercase
test1=# select upper('Dadasda');
  upper
---------
 DADASDA
(1 row)

AUTO INCREMENT
data types smallserial, serial and bigserial; these are not true types, but merely a notational convenience for creating unique identifier columns
The type name serial creates an integer columns. The type name bigserial creates a bigint column. bigserial should be used if you anticipate the use of more than 231 identifiers over the lifetime of the table. The type name smallserial creates a smallint column.


test1=#  CREATE TABLE COMPANY(
test1(#    ID  SERIAL PRIMARY KEY,
test1(#    NAME           TEXT      NOT NULL,
test1(#    AGE            INT       NOT NULL,
test1(#    ADDRESS        CHAR(50),
test1(#    SALARY         REAL
test1(# );
CREATE TABLE
test1=# INSERT INTO COMPANY (NAME,AGE,ADDRESS,SALARY)
test1-# VALUES ( 'Paul', 32, 'California', 20000.00 );
INSERT 0 1
test1=#
test1=# INSERT INTO COMPANY (NAME,AGE,ADDRESS,SALARY)
test1-# VALUES ('Allen', 25, 'Texas', 15000.00 );
INSERT 0 1
test1=# INSERT INTO COMPANY (NAME,AGE,ADDRESS,SALARY)
test1-# VALUES ('Teddy', 23, 'Norway', 20000.00 );
INSERT 0 1
test1=# INSERT INTO COMPANY (NAME,AGE,ADDRESS,SALARY)
test1-# VALUES ( 'Mark', 25, 'Rich-Mond ', 65000.00 );
INSERT 0 1
test1=# INSERT INTO COMPANY (NAME,AGE,ADDRESS,SALARY)
test1-# VALUES ( 'David', 27, 'Texas', 85000.00 );
INSERT 0 1
test1=# INSERT INTO COMPANY (NAME,AGE,ADDRESS,SALARY)
test1-# VALUES ( 'Kim', 22, 'South-Hall', 45000.00 );
INSERT 0 1
test1=# INSERT INTO COMPANY (NAME,AGE,ADDRESS,SALARY)
test1-# VALUES ( 'James', 24, 'Houston', 10000.00 );
INSERT 0 1
test1=# select * from company;
 id | name  | age |                      address                       | salary
----+-------+-----+----------------------------------------------------+--------
  1 | Paul  |  32 | California                                         |  20000
  2 | Allen |  25 | Texas                                              |  15000
  3 | Teddy |  23 | Norway                                             |  20000
  4 | Mark  |  25 | Rich-Mond                                          |  65000
  5 | David |  27 | Texas                                              |  85000
  6 | Kim   |  22 | South-Hall                                         |  45000
  7 | James |  24 | Houston                                            |  10000
(7 rows)

If want to alter table with auto increment colunmn after table is created???????



