Making File and Running it Basic
itsacheckmate@itsacheckmate:~/Training$ ruby -v
ruby 3.0.0p0 (2020-12-25 revision 95aff21468) [x86_64-linux]
itsacheckmate@itsacheckmate:~/Training$ cd Ruby
itsacheckmate@itsacheckmate:~/Training/Ruby$ ruby test.rb
Hello World

Running Print << in irb

3.0.0 :008"> EOF
Wrinting MUltiple Lines
3.0.0 :011'> EOC
echo to execute commands using echo
 => nil 
3.0.0 :012'> print <<'EOC'
3.0.0 :013'> echo "to execute commands using echo"
3.0.0 :014 > EOC
echo "to execute commands using echo"
 => nil 
3.0.0 :015"> print<<"hel" , <<"llo"
3.0.0 :016"> i said 
3.0.0 :017"> hel
3.0.0 :018"> i sail hello
3.0.0 :019"> ll

print <<"foo", <<"bar" 
	I said foo.
foo
	I said bar.
bar

itsacheckmate@itsacheckmate:~/Training/Ruby$ irb
3.0.0 :001"> print <<"hel" , <<"llo"
3.0.0 :002"> it works 1.
3.0.0 :003"> hel
3.0.0 :004"> it doesnot works
3.0.0 :005 > llo
it works 1.
it doesnot works
 => nil 


 Ruby Begin ==> Declares code to be called before the program is run 
 BEGIN {
     code
 }

test.rb >>>
 puts 'Hello World';

BEGIN{
    puts "Its works first"
}

<<<<<
itsacheckmate@itsacheckmate:~/Training/Ruby$ ruby test.rb
Its works first
Hello World

Ruby END Statement==>Declares to be called at the end of the program
END{
    code
}

test.rb>>>>>>>>
END{
    puts"IT works in the end";
}
puts 'Hello World';

BEGIN{
    puts "Its works first"
}
<<<<<<<<

itsacheckmate@itsacheckmate:~/Training/Ruby$ ruby test.rb
Its works first
Hello World
IT works in the end

Creating Comments in Ruby
using #

# Hey i am in the commnts
# can be used to create comment son every line
 and Another way of doing this is =being/=end
 =begin
     THis is inside of the comment
     multiline comment
=end


test.rb>>>>>>>>
END{
    puts"IT works in the end";
}
puts 'Hello World';
=begin
THis is inside of the comment
multiline comment
=end

BEGIN{
    puts "Its works first"
}
<<<<<<<<

itsacheckmate@itsacheckmate:~/Training/Ruby$ ruby test.rb
Its works first
Hello World
IT works in the end

Variable are the memory locations where data used is being kept.
There are five types of varibles supported by ruby
1. Ruby Global Variable->
It begins with $ .
Uninitialized they have nil Value.
Assignments to global variables alters the global status.
$global_variable = 10

????NOTE − In Ruby, you CAN access value of any variable or constant 
by putting a hash (#) character just before that variable or constant.

puts "Global variable in Class2 is #$global_variable"


2.Ruby Instance Variable
INstance Vsriable starts with @ .
UNInitialized with value nil.
Its constant is restricted to whatever the object 
itself refers to
The ruby instance variables do not need a declaration. 
This implies a flexible object structure.
Every instance variable is dynamically appended to an object
when it is first referenced
One instance object can alter the values of its instance 
variables without modifying any other instance.
An Instance variable can be used by several class methods
except when the method is considered to be static.



@cust_id = id

class Geek
   
    # defining instance method getAge
    def getAge(n)
          
      # instance variable     
      @geekAge = n
    end  
       
    # defining instance method incrementAge
    def incrementAge() 
        @geekAge +=1
    end

    # defining instance method displayDetails
    def displayDetails() 
        puts "Geek age is #@geekAge"
    end   

end


3. Ruby Class Variable=>
Class variables begin with @@ and must be 
initialized before they can be used in method definitions.
Referencing an uninitialized class variable produces an error.
Class variables are shared among descendants of the class or 
module in which the class variables are defined.

4.Ruby Local Variable
Local Variable begins with Lowercase Letter or ' _ '.
Assignment to uninitialized local variables also serves as variable declaration. 
The variables start to exist until the end of the current scope is reached. 
The lifetime of local variables is determined when Ruby parses the program.

5. Ruby Constants
Constants begin with UpperCase Letter
If they are defined withing class then they can be accessed within
that module only.
And if constants are defined outside class or module then it is treated as 
globally accessable
Refrencing an uninitialized constants will produce an error

There are also Ruby Pseudo variables
They are special variable  that have apperance of local variable nut behave like
constants 
They cannot be assigned any value.
Eg.
self-> The reciever object of the current method
true-> It represents true 
false-> it represents false
nil-> value reprensenting  undefined value just like null in databasse
_FILE_ -> The name of the current source File
_LINE_ -> The Current line number in the source File.

Ruby Basic Literal===>

Integer Number-->
range from -2^30 to 2^30-1 or -2^62 to 2^62-1
in range Fixnum
outside range Bignum

123                  # Fixnum decimal
1_234                # Fixnum decimal with underline
-500                 # Negative Fixnum
0377                 # octal
0xff                 # hexadecimal
0b1011               # binary
?a                   # character code for 'a'
?\n                  # code for a newline (0x0a)
12345678901234567890 # Bignum

Floating Number:
They are numbers with decimals

String Literals:
They are simply sequences of 8 Byte. they are object of class String
Double-quoted strings allow substitution and backslash 
notation but single-quoted strings donot allow substitution
but allow backslash notation only for \\ and \'

eg..
puts 'escape using "\\"';
puts 'That\'s right';

Output:
escape using "\"
That's right

You can substitute the value of any Ruby expression into a 
string using the sequence #{ expr }. 
Here, expr could be any ruby expression.
eg..

puts "Multiplication Value : #{24*60*60}";

output:
Multiplication Value : 86400

Backslash Notations
Following is the list of Backslash notations supported
by Ruby −

Notation	Character represented
\n  	Newline (0x0a)
\r	    Carriage return (0x0d)
\f  	Formfeed (0x0c)
\b  	Backspace (0x08)
\a  	Bell (0x07)
\e  	Escape (0x1b)
\s  	Space (0x20)
\nnn	Octal notation (n being 0-7)
\xnn	Hexadecimal notation (n being 0-9, a-f, or A-F)
\cx, \C-x	Control-x
\M-x	Meta-x (c | 0x80)
\M-\C-x	Meta-Control-x
\x	    Character x


Ruby Arrays
They are literals which are created by comma separeted series of
object refrences between square brackets.

ary = [  "fred", 10, 3.14, "This is a string", "last element", ]
ary.each do |i|
   puts i
end

Output:
fred
10
3.14
This is a string
last element

Ruby Hashes
A literal ruby hash is created by placing a list of key/value pair between 
braces with either comma or the sequence  =>between the key and value pair

hsh = colors = { "red" => 0xf00, "green" => 0x0f0, "blue" => 0x00f }
hsh.each do |key, value|
   print key, " is ", value, "\n"
end

red is 3840
green is 240
blue is 15

Ruby Ranges 
A range represents an interval which is a set of values with a start and an end.
Ranges may be constructed using the s..e and s...e literals, or with Range.new.

(10..15).each do |n| 
    print n, ' ' 
 end

 Ruby Operators
 There are many operator supported by ruby and most of them are method calls
 like => a+b is a.+(b)
 here a calls + method with b as an argument

 Ruby Arithmatic Operators
+ is addition
- is subtraction
* is Multiplication
/ is division
% is modulus
** is exponent

Ruby Comparision Operator
== it checks if the 2 values are equal or not
!= it also checks if 2 vaiables are equal or not but gives true when they are not equal
>  it checks the greater than condition
<  it checks the less than condition
>= it checks the greater than  and Equal to condition
<= it checks the less than  and Equal to condition
<=> it is combined comparision operator
    Returns 0 if first operand equals second,
    1 if first operand is greater than the second and 
    -1 if first operand is less than the second.
So 10<=>20 is -1, 20<=>20 is 0 and 20<=>10 is 1

===  is used to test the equality within a when clause of a case Statement
    (1..10)===5 is true

.eql?  true if the reciever and argument have bothe the same type and values
    eg 1==1.0 is true but 1.eql?(1.0) is false as they have different data type

equal? tru if the reciever and argument have the same object id.
????what is the object id 
eg..  True if the receiver and argument have the same object id.	
if aObj is duplicate of bObj then aObj == bObj is true,
     a.equal?bObj is false but a.equal?aObj is true


Ruby Assignment Operator
 
= it is simple assignmnet operator
+= add and assignment operator
-= subtract and assignment operator
*=
/=
%=
**=
 all above are arithmatic and assignment operator which behave in same way
 fist the arithmatic operator works and than the result value is assigned to 
 the left operand

 3.0.0 :001 > a=4
 => 4 
3.0.0 :002 > b=5
 => 5 
3.0.0 :003 > a+b
 => 9 
3.0.0 :004 > a+=b
 => 9 
3.0.0 :005 > a
 => 9 

 Parallel Assignment
 This enables multiple values to be initialized  within single line

 eg  a,b,c =10,20,30
 
3.0.0 :006 > a,b,c = 10, 20, 30
 => [10, 20, 30] 
3.0.0 :007 > a
 => 10 
3.0.0 :008 > b
 => 20 
 => 30 
3.0.0 :011 > puts(a,b,c)
10
20
30
 => nil

 Ruby Bitwise Operators
  Bitwise Operators works on Bits and Perform Bit by Bit Operation
  a    =  0011 1100
  b    =  0000 1101
  ------------------
  a&b  =  0000 1100   it is binary AND
  a|b  =  0011 1101   it is binary OR
  a^b  =  0011 0001   it is binary XOR
  ~a   =  1100 0011   it is complemantary operator

  << it is Left Shift Operator moved by the no of bits speacified
  >> It is Right Shift Operator moved by the no of bits speacified
eg, if a is 0011 1100
 a<<2 is 1111 0000
a>>2  is 0000 1111

Ruby Logical Operator

and  logical and Operator both conditions must be true 
or  logical or operator either conditions should be true 
&&  anothe way of writing AND but bothe side must be non zero
||  another way of writing OR but either side need to be non zero
!   Logical NOT Operator reverses the state of the operator
not  same as above


Ruby Ternary Operator
?:  Conditonal expression
If Condition is true ? Then value X : Otherwise value Y


Ruby Range Operator
It is used to create a range of successive values - 
consisting of a start value, an end value, and a 
range of values in between.

The two-dot form creates an inclusive range, 
while the three-dot form creates a range that 
excludes the specified high value.
so 1..10 is 1,2,3,4,5,6,7,8,9,10
and 1...10 is 1,2,3,4,5,6,7,8,9

Ruby defined? Operator
defined? is a special Operator 
it is a method call to determine whether or not the
 passed expression is defined.

 It returns a description string of the expression,
  or nil if the expression isnot defined.

  eg,3.0.0 :014 > not (a)
  => false 
  3.0.0 :015 > defined? a
  => "local-variable" 
  3.0.0 :016 > $abc =10
  => 10 
  3.0.0 :017 > defined? abc
  => nil 
  => "global-variable" 
  Traceback (most recent call last):ain>'ad'
  3.0.0 :020 > defined? x
  => nil 
  3.0.0 :021 > defined? a.class 
  => "method"
   # True if a method exists that can be called with super user ????
  3.0.0 :022 > defined? super
  => nil 
   # True if a code block has been passed  ????
  3.0.0 :023 > defined? yield
  => nil 
  
  
  Ruby Dot and Double Colon Operator
  You call a module method by preceding its name with the modules name and a period,
   and you reference a constant using the module name and two colons.
  
   The :: is a unary operator that allows: constants,
    instance methods and class methods defined within a 
    class or module, to be accessed from anywhere outside 
      the class or module.
  
  In Ruby, classes and methods may be considered constants too.
  
  MR_COUNT = 0         # constant defined on main Object class
  module Foo
     MR_COUNT = 0
     ::MR_COUNT = 1    # set global count to 1
     MR_COUNT = 2      # set local count to 2
  end
  puts MR_COUNT        # this is the global constant
  puts Foo::MR_COUNT   # this is the local "Foo" constant
  
  
  
  ##########
  Ruby operator do have precedance according to table
      Method	Operator	Description
  Yes	::	Constant resolution operator
  Yes	[ ] [ ]=	Element reference, element set
  Yes	**	Exponentiation (raise to the power)
  Yes	! ~ + -	Not, complement, unary plus and minus (method names for the last two are +@ and -@)
  Yes	* / %	Multiply, divide, and modulo
  Yes	+ -	Addition and subtraction
  Yes	>> <<	Right and left bitwise shift
  Yes	&	Bitwise 'AND'
  Yes	^ |	Bitwise exclusive 'OR' and regular 'OR'
  Yes	<= < > >=	Comparison operators
  Yes	<=> == === != =~ !~	Equality and pattern match operators (!= and !~ may not be defined as methods)
       &&	Logical 'AND'
       ||	Logical 'OR'
       .. ...	Range (inclusive and exclusive)
       ? :	Ternary if-then-else
       = %= { /= -= += |= &= >>= <<= *= &&= ||= **=	Assignment
       defined?	Check if specified symbol defined
       not	Logical negation
       or and	Logical composition
  
       
Ruby IF..else,case,unless
it is the conditional structure
Syntax
if conditional [then]
   code...
[elsif conditional [then]
   code...]...
[else
   code...]
end

Ruby if modifier
Syntax
code if condition
print "debug\n" if $debug

  
Ruby unless Statement
Executes code if conditional is false. If the conditional is true, 
code specified in the else clause is executed.
unless conditional [then]
    code
 [else
    code ]
 end

Ruby unless modifier
Syntax
code unless conditional
3.0.0 :001 > $var = false
 => false 
3.0.0 :002 > print "3 -- Value is set\n" unless $var
3 -- Value is set
 => nil 

Ruby Case Statement
Compares the expression specified by case and that specified
     by when using the === operator and executes the code of 
     the when clause that matches.
The expression specified by the when clause is evaluated 
     as the left operand. If no when clauses match,
      case executes the code of the else clause.
 A when statements expression is separated from code 
    by the reserved word then, a newline, or a semicolon

Syntax:

case expression
[when expression [, expression ...] [then]
   code ]...
[else
   code ]
end
    
case expr0
when expr1, expr2
   stmt1
when expr3, expr4
   stmt2
else
   stmt3
end
      
eg ;
$age =  5
3.0.0 :004 > case $age
    3.0.0 :005 > when 0 .. 2
    3.0.0 :006 >    puts "baby"
    3.0.0 :007 > when 3 .. 6
    3.0.0 :008 >    puts "little child"
    3.0.0 :009 > when 7 .. 12
    3.0.0 :010 >    puts "child"
    3.0.0 :011 > when 13 .. 18
    3.0.0 :012 >    puts "youth"
    3.0.0 :013 > else
    3.0.0 :014 >    puts "adult"
    3.0.0 :015 > end
    little child
     => nil 

     3.0.0 :025 > m=2
     => 2 
    3.0.0 :026 > case m
    3.0.0 :027 > when 1
    3.0.0 :028 >   puts a+b
    3.0.0 :029 > when 2
    3.0.0 :030 >   puts a-b
    3.0.0 :031 > when 3
    3.0.0 :032 >   puts a*b
    3.0.0 :033 > else 
    3.0.0 :034 >   puts 'What do you want to do'
    3.0.0 :035 > end
    -1
     => nil 


 Ruby -Loops
Loops are way to execute same block of code specified no of times


While Statement
Executes code while conditional is true. 
A while loops conditional is separated from code by 
the reserved word do, a newline, backslash \, or a semicolon ;.


Syntax
while conditional [do]
   code
end

3.0.0 :042 > while m<5
3.0.0 :043 >   print m
3.0.0 :044 >   m+=1
3.0.0 :045 > end
234 => nil 

Ruby while modifier
Executes code while conditional is true.

Syntax
code while condition

OR

begin 
  code 
end while conditional

If a while modifier follows a begin statement with no 
rescue or ensure clauses, code is executed once before 
conditional is evaluated. ????


Ruby until Statement
until conditional [do]
   code
end
Executes code while conditional is false.
 An until statements conditional is separated 
 from code by the reserved word do, a newline, 
    or a semicolon


Ruby For Statement

Executes code once for each element in expression.

Syntax
for variable [, variable ...] in expression [do]
   code
end

3.0.0 :001 > for i in 0..5
3.0.0 :002 >    puts "Value of local variable is #{i}"
3.0.0 :003 > end
Value of local variable is 0
Value of local variable is 1
Value of local variable is 2
Value of local variable is 3
Value of local variable is 4
Value of local variable is 5

3.0.0 :016 > for i in 0..5
3.0.0 :017 >    print ("Value of local variable is ")
3.0.0 :018 > end
Value of local variable is Value of local variable is Value of
 local variable is Value of local variable is Value of 
 local variable is Value of local variable is  => 0..5 

 3.0.0 :001 > (0...5).each do |i|
    3.0.0 :002 >    puts "Value of local variable is #{i}"
    3.0.0 :003 > end
    Value of local variable is 0
    Value of local variable is 1
    Value of local variable is 2
    Value of local variable is 3
    Value of local variable is 4
     => 0...5 

Ruby Break Statement
Break
it terminates the internal where it is called
3.0.0 :004 > for i in 0..5
3.0.0 :005 >     if i>2
3.0.0 :006 >       break
3.0.0 :007 >     end
3.0.0 :008 >     puts i
3.0.0 :009 > end
0
1
2
 => nil

 3.0.0 :016 > for i in 0..2
3.0.0 :017 >     for i in 0..4
3.0.0 :018 >         if i>2
3.0.0 :019 >           break
3.0.0 :020 >         end
3.0.0 :021 >         puts i
3.0.0 :022 >     end
3.0.0 :023 > end
0
1
2
0
1
2
0
1
2
 => 0..2 

 Ruby next Statement
 Jumps to the next iteration of the most internal loop. 
 Terminates execution of a block if called within a block
  (with yield or call returning nil).

  3.0.0 :032 > for i in 0..
3.0.0 :032 > for i in 0..5
3.0.0 :033 >    if i < 2 then
3.0.0 :034 >       next
3.0.0 :035 >    end
3.0.0 :036 >    puts "Value of local variable is #{i}"
3.0.0 :037 > end
Value of local variable is 2
Value of local variable is 3
Value of local variable is 4
Value of local variable is 5
 => 0..5 

Ruby redo Statement
redo
Restarts this iteration of the most internal loop, 
without checking loop condition. Restarts yield or 
call if called within a block.
3.0.0 :039 > for i in 0..5
3.0.0 :040 >     if c<3 
3.0.0 :041?>       puts i 
3.0.0 :042 >       c+=1
3.0.0 :043 >       redo
3.0.0 :044?>     end
3.0.0 :045 > end
0
0
 => 0..5

 Ruby retry Statement
 If retry appears in rescue clause of begin expression, 
    restart from the beginning of the begin body.
        begin
            do_something # exception raised
         rescue
            # handles error
            retry  # restart from beginning
         end

If retry appears in the iterator, the block, or 
the body of the for expression, restarts the invocation 
of the iterator call. Arguments to the iterator is re-evaluated.

         for i in 1..5
            retry if some_condition # restart from i == 1
         end

         for i in 0..5
            retry if i > 2
         puts "Value of local variable is #{i}"
         end
This will produce the following result and will go in an infinite loop −

         Value of local variable is 1
         Value of local variable is 2
         Value of local variable is 1

        end
    end
end

Ruby - Methods
Ruby methods are very similar to functions in any other programming language.

3.0.0 :046 > def test(a1 = "Ruby", a2 = "Perl")
3.0.0 :047 >    puts "The programming language is #{a1}"
3.0.0 :048 >    puts "The programming language is #{a2}"
3.0.0 :049 > end
 => :test 
3.0.0 :050 > test "C", "C++"
The programming language is C
The programming language is C++
 => nil 

 3.0.0 :051 > test
The programming language is Ruby
The programming language is Perl
 => nil 

Returning values from methods
Every method in Ruby returns a value by default.
 This returned value will be the value of the last statement

So for eg...
def return_eg
   i=5
   g=6
end

so here values of g i.e. 6 is returened

or the values can be returned using return statement
 Return statement can return one or more values from methods
 return[expr[,expr]]

 def return_eg
   u=6
   g=5
   h=7
   return u,g,h
 end


 Variable number of paramenters==>
 Ruby allows you to declare methods that work with a 
 variable number of parameters
 3.0.0 :008 > def sample (*test)
 3.0.0 :010 >    for i in 0...test.length
 3.0.0 :011 >       puts "The parameters are #{test[i]}"
 3.0.0 :012 >    end
 3.0.0 :013 > end
  => :sample 
 3.0.0 :014 > sample "Zara", "6", "F"
 The number of parameters is 3
 The parameters are Zara
 The parameters are 6
 The parameters are F
  => 0...3 
 3.0.0 :015 > sample "Mac", "36", "M", "MCA"
 The number of parameters is 4
 The parameters are Mac
 The parameters are 36
 The parameters are M
 The parameters are MCA
  => 0...4 


Class Methods==>
When a method is defined outside of the class definition, 
the method is marked as private by default. On the other hand,
the methods defined in the class definition are marked as 
public by default. The default visibility and the private 
mark of the methods can be changed by public or private of 
the Module.

 to access a method of a class,  first 
need to instantiate the class. Then, using the object,  
can access any member of the class.

Ruby gives you a way to access a method without 
instantiating a class. Let us see how a class method 
is declared and accessed −

class Accounts
   def reading_charge
   end
   def Accounts.return_date
   end
end

method return_date is declared. It is declared with the class name followed by a period,
  which is followed by the name of the method. 
  
  class method can be directly accessed  as follows −

Accounts.return_date
To access this method, no need to create objects of the 
class Accounts


Ruby Alias Statement
This gives alias to methods or global variables
Aliases cannot be defined within the method body. 
The alias of the method keeps the current definition 
of the method, even when methods are overridden.

3.0.0 :017 > alias sam sample
 => nil 
3.0.0 :018 > sam "hwlo",1,23
The number of parameters is 3
The parameters are hwlo
The parameters are 1
The parameters are 23
 => 0...3

 3.0.0 :024 > alias $abs $a
 => nil 
3.0.0 :025 > $a
 => nil 
3.0.0 :026 > $abs
 => nil 
3.0.0 :027 > $a =12
 => 12 
3.0.0 :028 > $abs
 => 12 

 Ruby Undef Statement
 This cancels the method definition.
undef sam
3.0.0 :033 > sample "Mac", "36", "M", "MCA"
Traceback (most recent call last):
        4: from /usr/share/rvm/rubies/ruby-3.0.0/bin/irb:23:in `<main>'
        3: from /usr/share/rvm/rubies/ruby-3.0.0/bin/irb:23:in `load'
        2: from /usr/share/rvm/rubies/ruby-3.0.0/lib/ruby/gems/3.0.0/gems/irb-1.3
        1: from (irb):33:in `<main>'
NoMethodError (undefined method 'sample' for main:Object)


Ruby Blocks ==>
here blocks works in a similiar way to methods
Syntax
block_name {
   statement1
   statement2
   ..........
}

A block consists of chunks of code.

You assign a name to a block.

The code in the block is always enclosed within braces ({}).

A block is always invoked from a function with the same 
name as that of the block. This means that if you have a
 block with the name test, then you use the function test 
 to invoke this block.

You invoke a block by using the yield statement.

Yield Statement

3.0.0 :037 > def test
3.0.0 :038 >    puts "You are in the method"
3.0.0 :039 >    yield
3.0.0 :040 >    puts "You are again back to the method"
3.0.0 :041 >    yield
3.0.0 :042 > end
 => :test 
3.0.0 :043 > test {puts "You are in the block"}
You are in the method
You are in the block
You are again back to the method
You are in the block
 => nil 

 The yield statement is written followed by parameters.
  You can even pass more than one parameter. In the block, 
  you place a variable between two vertical lines (||) to 
  accept the parameters. Therefore, in the preceding code,
   the yield 5 statement passes the value 5 as a parameter 
   to the test block.

   3.0.0 :045 > def test
   3.0.0 :046 >    yield 5
   3.0.0 :047 >    puts "You are in the method test"
   3.0.0 :048 >    yield 100
   3.0.0 :049 > end
    => :test 
   3.0.0 :050 > test {|i| puts "You are in the block #{i}"}
   You are in the block 5
   You are in the method test
   You are in the block 100
    => nil 

    want to pass more than one parameters, then the yield statement becomes −

    yield a, b==>


    3.0.0 :051 > def test
    3.0.0 :052 >    yield 5,4
    3.0.0 :053 >    puts "You are in the method test"
    3.0.0 :054 >    yield 100
    3.0.0 :055 > end
     => :test 
    3.0.0 :056 > test {|i,j| puts "You are in the block #{i} and #{j}"
    }
    You are in the block 5 and 4
    You are in the method test
    You are in the block 100 and 
     => nil 

     But if the last argument of a method is preceded by &,
      then you can pass a block to this method and this 
      block will be assigned to the last parameter. In case
          both * and & are present in the argument list, & 
          should come later.

          def test(&block)
            block.call
         end
         test { puts "Hello World!"}

         3.0.0 :057 >     def test(&block)
         3.0.0 :058 >             block.call
         3.0.0 :059 >          end
          => :test 
         3.0.0 :060 >          test { puts "Hello World!"}
         Hello World!
      end
   end
end

Ruby - Modules

Modules are a way of grouping together methods, classes, 
and constants. Modules give you two major benefits.
Modules provide a namespace and prevent name clashes.
Modules implement the mixin facility which is a type of Multiple Inheritence

Syntax
module Identifier
   statement1
   statement2
   ...........
end

Module constants are named just like class constants, 
with an initial uppercase letter. The method definitions 
look similar, too: Module methods are defined just like
class methods.

As with class methods, you call a module method by
Modulename.methodname
Modulename::Constant
eg
module Trig
   PI = 3.141592654
   def Trig.sin(x)
   # ..
   end
   def Trig.cos(x)
   # ..
   end
end


$LOAD_PATH << '.'

require 'trig.rb'

y = Trig.sin(Trig::PI/4)

include statement
embed a module in a class. To embed a module in a class,
 you use the include statement in the class
applying method

module====>
   module Week
      FIRST_DAY = "Sunday"
      def Week.weeks_in_month
         puts "You have four weeks in a month"
      end
      def Week.weeks_in_year
         puts "You have 52 weeks in a year"
      end
   end

Code to use module
#!/usr/bin/ruby
$LOAD_PATH << '.'
require "support"

class Decade
include Week
   no_of_yrs = 10
   def no_of_months
      puts Week::FIRST_DAY
      number = 10*12
      puts number
   end
end
d1 = Decade.new
puts Week::FIRST_DAY
Week.weeks_in_month
Week.weeks_in_year
d1.no_of_monthsss

Output
itsacheckmate@itsacheckmate:~/Training/Ruby$ ruby test.rb
Sunday
You have four weeks in a month
You have 52 weeks in a year
Sunday
120

to apply multiple inheritence in ruby mixins facility is provided
as multiple inheritence is not supported by ruby this is the olny way to apply it

syntax for this is as follows
module A
   def a1
   end
   def a2
   end
end
module B
   def b1
   end
   def b2
   end
end

class Sample
include A
include B
   def s1
   end
end


samp = Sample.new
samp.a1
samp.a2
samp.b1
samp.b2
samp.s1


Ruby Iterators

Iterators are nothing but methods supported by collections. 
Objects that store a group of data members are called collections.
 In Ruby, arrays and hashes can be termed collections.

Iterators return all the elements of a collection, 
one after the other.

two common iterators are, each and collect

Ruby each Iterator
The each iterator returns all the elements of an array or a
 hash.

 Executes code for each element in collection. 
 Here, collection could be an array or a ruby hash.

Syntax
collection.each do |variable|
   code
end

3.0.0 :134 > ary = [1,2,3,4,5]
 => [1, 2, 3, 4, 5] 
3.0.0 :135 > ary.each do |i|
3.0.0 :136 >    puts i
3.0.0 :137 > end
1
2
3
4
5
 => [1, 2, 3, 4, 5] 


 Ruby collect Iterator
The collect iterator returns all the elements of a collection.
Syntax
collection = collection.collect

The collect method need not always be associated with a block.
 The collect method returns the entire collection,
 regardless of whether it is an array or a hash.


 Lambda Function – Ruby
 
 In Computer Programming, Lambda functions are anonymous functions

Everything in Ruby is treated as an object, lambdas are also objects in Ruby.
Lambdas in Ruby allow us to wrap data and logic in a portable package. 

Syntax to create Lambda function in Ruby:

lambda = lambda {}   

lambda = ->() {}  
Lambda function is an instance of the Proc class of Ruby. 

3.0.0 :001 > lambda_function = lambda {puts "Hello"}
 => #<Proc:0x00005619f5b60098 (irb):1 (lambda)> 
3.0.0 :002 > lambda_function
 => #<Proc:0x00005619f5b60098 (irb):1 (lambda)> 
3.0.0 :003 > lambda_function.class
 => Proc 


 We have different ways to call this function. 
 We can use my_lambda.call, my_lambda.() , my_lambda.[] or my_lambda.=== to call the lambda function . 
 3.0.0 :012 > lambda_function.call
 Hello
  => nil 
 3.0.0 :013 > lambda_function.()
 Hello
  => nil 
 3.0.0 :014?> lambda_function.[]
 Hello
  => nil 
 3.0.0 :015 > lambda_function.===
 Hello
  => nil 

  To pass arguments in the lambda function, we can either use normal lambda syntax or use the literal lambda operator ” -> ” 
  3.0.0 :016 > lambda_with_args = lambda {| s | puts "Hello "+ s }
  => #<Proc:0x00005619f5dc68a0 (irb):16 (lambda)> 
 3.0.0 :018 > lambda_with_args.call("World")
 Hello World

 To use lambda functions along with a normal function, we can pass lambda function as an argument.

 3.0.0 :013 > lambda_function.()
 Hello
 3.0.0 :014?> lambda_function.[]
 Hello
 3.0.0 :015 > lambda_function.===
  => nil 
  => #<Proc:0x00005619f5dc68a0 (irb):16 (lambda)> 
 Hello Geeks
 3.0.0 :018 > lambda_with_args.call("World")
  => nil 
  => nil 
  => #<Proc:0x00005619f5e82000 (irb):22 (lambda)> 
  
  3.0.0 :036 > add_10 = lambda { |num| num + 10 }
  3.0.0 :037 > multiply_2 = lambda { |num| num * 2 }
   => #<Proc:0x00005619f5d2f478 (irb):37 (lambda)> 
  3.0.0 :038 >   puts lambda.call(number)
   
  end
  3.0.0 :038 > def using_lambda_with_functions(lambda, number)
  3.0.0 :039 >  
  3.0.0 :040 >   puts lambda.call(number)
  3.0.0 :041 >  
  3.0.0 :042 > end
   => :using_lambda_with_functions 
  3.0.0 :043 >  using_lambda_with_functions(add_10, 10)
  20
   => nil 
  => :using_lambda_with_functions 
 3.0.0 :033 > using_lambda_with_functions(add_10, 10)
 20
  => nil 

  The behavior of the return statement
The return statement is handled differently as well. 
The return statement in a lambda function stops the lambda and returns control to the calling code.
 The return statement in a Proc, in contrast, returns from both the Proc and the calling code.
 the return statement in the proc terminates the program flow.

 my_lambda = lambda do |name|
   puts "lambda says hello " + name 
   return "lambda done" 
 end
 
 my_proc = Proc.new do |name| 
   puts "proc says hello " + name
   return "proc done"
 end
 
 def call_lambda(lmbda)
   value = lmbda.call("world")
    puts value
 end 
 call_lambda(my_lambda)
 
 def call_proc(prc)
   value = prc.call("world")
    puts value
 end
 
 call_proc(my_proc)

 The output:

 lambda says hello world
 lambda done
 proc says hello world


 Ruby | Blocks
A block is the same thing as a method, but it does not belong to an object. 
Blocks are called closures in other programming languages.
There are some important points about Blocks in Ruby:

Block can accept arguments and returns a value.
Block does not have their own name.
Block consist of chunks of code.
A block is always invoked with a function or can say passed to a method call.
To call a block within a method with a value, yield statement is used.
Blocks can be called just like methods from inside the method that it is passed to.


def blocks
  puts "Inside Method!"
  yield
  puts "Again Inside Method!"
  yield
end
blocks{puts "Inside Block!"}

output - 
Inside Method!
Inside Block!
Again Inside Method!
Inside Block!

Method is a collection of statements that perform some specific task and return the result. 
Methods are time savers and help the user to reuse the code without retyping the code

Ruby Singleton Classes
it same as metaclasses or eigenclasses
The Singleton pattern is simply an object-oriented programming pattern where you make sure to have 1 and only 1 instance of some class.
Ruby implement the Singleton pattern with a module: just write Include Singleton in your class definition and you are good to go.

This module basically hides the :new method. MySingletonObject.new will always ERROR.
 Instead, it will give you an instance method that will always return the same unique instance of your class.

 require 'singleton'

class NotSingleton
  def initialize
    puts 'This will be printed many times'
  end
end

class MySingleton
  include Singleton
  def initialize
    puts 'This will be printed once'
  end
end

NotSingleton.new
NotSingleton.new
NotSingleton.new

MySingleton.instance # => 'This will be printed once'
MySingleton.instance # Nothing is printed
MySingleton.instance


This is useful if you ever want to restrict a class so it never creates more than one instance of itself.

The Eigenclass
When you create an instance of a class,
 Ruby creates a hidden class, basically a copy of the original class, but which is owned exclusively by this instance. 
 This is the Eigenclass. If you modify the Eigenclass of your first instance, it wont change anything for another instance.

 singleton methods are the methods that are defined for only a single object rather than a class of objects. 
 To define a singleton method sum on an object Point

 So for point  the sum is the singleton method

 def Point.sum
   # Method body goes here
 end


Practice 

Conditions
If
if 1 < 2
puts “one smaller than two”
elsif 1 > 2 # *careful not to mistake with else if. In ruby you write elsif*
puts “elsif”
else
puts “false”
end
# or
puts "be printed" if true
puts 3 > 4 ? "if true" : "else" # else will be putted

Unless
unless false # unless checks if the statement is false (opposite to if).
puts “I'm here”
else
puts “not here”
end

# or
puts "not printed" unless true

Case
case my_var
  when "some value"
    ###
  when "some other value"
    ###
  else
    ###
end
# or
case my_var
  when "some value" then ###
  when "some other value" then ###
  else ###
end
&&: and
||: or
!: not
(x && (y || w)) && z: use parenthesis to combine arguments
problem = false
print "Good to go!" unless problem –– prints out because problem != true
Printing & Putting
print "bla"
puts "test" # puts the text in a separate line



Loops
While loop
i = 1
while i < 11
  puts i
  i = i + 1
end

Until loop
i = 0
until i == 6
  puts i
  i += 1
end

For loop
for i in 1...10 # ... tells ruby to exclude the last number (here 10 if we .. only then it includes the last num)
  puts i
end

Loop iterator

i = 0
loop do
  i += 1
  print "I'm currently number #{i}” # a way to have ruby code in a string
  break if i > 5
end

Next
for i in 1..5
  next if i % 2 == 0 # If the remainder of i / 2 is zero, we go to the next iteration of the loop.
  print i
end

.each
things.each do |item| # for each things in things do something while storing that things in the variable item
  print “#{item}"
end
on hashes like so:

hashes.each do |x,y|
  print "#{x}: #{y}"
end

.times
10.times do
  print “this text will appear 10 times”
end
.upto / .downto
10.upto(15) { |x| print x, " " } # 10 11 12 13 14 15
"a".upto("c") { |x| print x, " " } # a b c


Methods
String Methods

irb(main):015:0> "Hello".length
=> 5
irb(main):016:0> "Hello".reverse 
=> "olleH"
irb(main):017:0> "Hello".upcase
=> "HELLO"
irb(main):018:0> "Hello".downcase 
=> "hello"
irb(main):019:0> "hello".capitalize
=> "Hello"
irb(main):020:0> "Hello".include? "i"
=> false
irb(main):021:0> "Hello".gsub!(/e/, "o")
=> "Hollo"
irb(main):022:0> "Hello".gsub!(/e/, "l")
=> "Hlllo"
irb(main):023:0> "Hello".gsub!(/l/, "o")
=> "Heooo"
irb(main):010:0> "Hello".sub!(/l/, "o")
=> "Heolo"
irb(main):011:0> "1".to_i
=> 1
irb(main):012:0> "test".to_sym
=> :test
irb(main):013:0> "test".intern
=> :test
irb(main):014:0> :test.to_s
=> "test"


Hashes

irb(main):001:0> hash = { "key1" => "value1", "key2" => "value2" }
irb(main):002:0> hash.select{ |key, value| value > 3 }

irb(main):003:0> hash.each_key { |k| print k, " " }
key1 key2 => {"key1"=>"value1", "key2"=>"value2"}
irb(main):004:0> hash.each_value { |v| print v }
value1value2=> {"key1"=>"value1", "key2"=>"value2"}
irb(main):005:0> my_hash = Hash.new("default value")
irb(main):006:0> my_hash.each_value { |v| print v, " " }
=> {}
irb(main):007:0> my_hash
=> {}
irb(main):008:0> hash['key1']
=> "value1"


Arrays
irb(main):010:0> "bla,bla".split(",")
=> ["bla", "bla"]

irb(main):012:0> my_array = ['a','b','c','d','e']
irb(main):013:0> my_array[1] 
=> "b"
irb(main):014:0> my_array[2..-1] 
=> ["c", "d", "e"]
irb(main):015:0> my_array << 4
=> ["a", "b", "c", "d", "e", 4]
irb(main):016:0> my_array.push("f")
=> ["a", "b", "c", "d", "e", 4, "f"]


irb(main):017:1* def yeild_print(name)
irb(main):018:1*   yield("Banana")
irb(main):019:1*   yield(name)
irb(main):020:0> end
=> :yeild_print
irb(main):021:0> yeild_print("apple") { |name| print "Furits available are #{nam
e}" }

Furits available are BananaFurits available are apple=> nil
irb(main):022:0> yeild_print("apple") { |name| print "Furits available are #{nam
e}\n" }
Furits available are Banana
Furits available are apple
=> nil


irb(main):023:0> # procs
=> nil
irb(main):024:0> 
irb(main):025:0> cube = Proc.new { |x| x ** 3 }
irb(main):026:0> [1, 2, 3].collect!(&cube)
=> [1, 8, 27]
irb(main):027:0> [1, 2, 3].map!(&cube)
=> [1, 8, 27]
irb(main):028:0> # lambda
=> nil
irb(main):029:0> multiply = lambda { |x| x * 3 }
irb(main):030:0> y = [1, 2].collect(&multiply)
irb(main):031:0> 
irb(main):032:0> y = [1, 2].collect!(&multiply)
irb(main):033:0> y
=> [3, 6]

Diff between procs and lambdas:

a lambda checks the number of arguments passed to it, while a proc does not (This means that a lambda will throw an error if you pass it the wrong number of arguments, whereas a proc will ignore unexpected arguments and assign nil to any that are missing.)
when a lambda returns, it passes control back to the calling method; when a proc returns, it does so immediately, without going back to the calling method. 
So A lambda is just like a proc, only it cares about the number of arguments it gets and it returns to its calling method rather than returning immediately.