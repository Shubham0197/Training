String:

It has an arbitrary Sequence of bytes representing text or binay data
It can be created using 
String::new
or as literals

Get the String Length
3.0.0 :066 > a. size
 => 4 
 3.0.0 :069 > a
 => "Abcd" 
3.0.0 :070 > a.length
 => 4 

 Check if the string is empty

 we can define an empty string as a string of zero length.
 A blank string is a string that has either zero-length, 
 or is composed ONLY of white space characters.

 3.0.0 :071 > a.size == 0
 => false
 3.0.0 :073 > c =String.new
 => "" 
 3.0.0 :074 > c.size==0
 => true 

 3.0.0 :075 > c.empty?
 => true 
3.0.0 :076 > a.empty?
 => false 

 ## String Interpolation
 it allows to combine strings together

3.0.0 :077 > name ='Shubham'
=> "Shubham" 
3.0.0 :078 > puts "Hello #{name}"
Hello Shubham
=> nil 
Actual code can be written inside the Interpolation
eg. 
3.0.0 :079 > puts " No of characters #{name.size}"
 No of characters 7
 => nil 
3.0.0 :080 > puts " No of characters #{name.size==0}"
 No of characters false
 => nil 

 Ruby calls the to_s method on the string interpolation block, 
 this tells the object to convert itself into a string.
 So to convert to string we use to_s
 3.0.0 :084 > name+a.to_s
 => "Shubham3" 
3.0.0 :085 > number=007
 => 7 
3.0.0 :086 > name+number.to_s
 => "Shubham7" 

 How to extract a substring
 A substring is samller part of string that is of some use to us 
 i.e specific part of the string
One way for extracting substring is 
using the index no. in the square brackets
3.0.0 :088 > name
 => "Shubham" 
3.0.0 :089 > name[3]
 => "b" 
3.0.0 :090 > name[3,3]
 => "bha" 
3.0.0 :091 > name[0,3]
 => "Shu" 
 if only one character then that particular charactaer is picked 
 and if 2 numbers in bracket then the character from that index to 
 the number of character in the second number.
So,The first number is the starting index
and rhe second no. is the range

and if we use negative range
for eg -2 it starting from the given index to the second to last character
 syntax variable[index..-2]
 3.0.0 :093 > name[3..-1]
 => "bham" 
3.0.0 :094 > name[6..-1]
 => "m" 
3.0.0 :095 > name[7..-1]
 => "" 
3.0.0 :096 > name[7..-2]
 => "" 

 If we want to remove or replace the strings we can assign the value 
 to the above substring
 3.0.0 :097 > hello="hello"
3.0.0 :098 > hello[5]
3.0.0 :099 > hello[4]
3.0.0 :100 > hello[4]="0"
 => "0" 
3.0.0 :101 > hello
 => "hell0" 
3.0.0 :102"> hello[0,2]=""
 => "" 
3.0.0 :103 > hello
 => "ll0" 
3.0.0 :104 > hello.size
 => 3 

 3.0.0 :105 > p hello
"ll0"
 => "ll0"    ????

 How to find out if a string contains another string??
 we can use include?
 3.0.0 :107 > day='Today is wednesday'
 => "Today is wednesday" 
3.0.0 :108 > day.include?("day")
 => true 

 We can use index method
 3.0.0 :109 > day.index("day")
 => 2 
3.0.0 :110 > day.index("wed")
 => 9 

Above methods looks for the partial words too . 
and index will also tell the index of first match also.


How to pad a ruby string?

One way to pad a string is to use the 
rjust method with two arguments

3.0.0 :116 > hello.rjust(4,"o")
 => "Hello" 
3.0.0 :117 > binary_string = "1111"
 => "1111" 
3.0.0 :118 > binary_string.ljust(8, "0")
 => "11110000" 
3.0.0 :119 > hello.ljust(8, "0")
 => "Hello000" 
3.0.0 :120 > hello.rjust(8, "0")
 => "000Hello" 

 Compare Strings ignoring characters
 As string comparsion is case sensitive to make sure the two 
 strings  comparing are same or not 
 So the The common way to do that is to make both sides of the
  equation downcase or upcase
  3.0.0 :121 > hELLO="HELLO"
 => "HELLO" 
3.0.0 :122 > hello.upcase==hELLO.upcase
 => true 

 Casecmp
 it compares for the substring gives ans 0,1,-1
for eqal ,greater or smaller string
 3.0.0 :126 > hello.casecmp(hELLO)
3.0.0 :127 > hello.casecmp("asdf")
 => 1 
3.0.0 :128 > hello.casecmp("asdfa")
 => 1 
3.0.0 :129 > hello.casecmp("asdfaa")
 => 1 
3.0.0 :130 > hello.casecmp("asdfaaa")
 => 1 
3.0.0 :131 > hello.casecmp("as")
 => 1 
3.0.0 :132 > hello
 => "Hello" 
3.0.0 :133 > 'hello'.casecmp(hello)
 => 0 
3.0.0 :134 > 'helloq'.casecmp(hello)
 => 1 
3.0.0 :135 > 'hell'.casecmp(hello)
 => -1 
3.0.0 :136 > 'hasd'.casecmp(hello)
 => -1 
3.0.0 :137 > 'hasdaas'.casecmp(hello)
 => -1 
3.0.0 :138 > 'hasdaas'.casecmp(hello)
 => -1 
3.0.0 :139 > 'hel'.casecmp(hello)
 => -1 
3.0.0 :140 > 'hello1'.casecmp(hello)
 => 1 

 Casecmp?
 true, false or nil

 3.0.0 :145 > '1'.casecmp?(hello)
 => false 

 3.0.0 :141 > 'hello1'.casecmp?(hello)
 => false 
3.0.0 :142 > 'hello'.casecmp?(hello)
 => true 
3.0.0 :143 > 'hell'.casecmp?(hello)
 => false 

 How to trim a string and Remove white space

 Strip methdo is used to remove space from string
 3.0.0 :149 > sapce= "    "
 => "    " 
3.0.0 :150 > sapce.strip
 => "" 

 If you only want to remove the white space from o
 ne of the sides (left / right) you can use
  the lstrip & rstrip methods instead.

3.0.0 :151 > sapce= "    "
3.0.0 :152 > sapce.lstrip
3.0.0 :153 > sapce= "    "
3.0.0 :154 > sapce.rstrip
3.0.0 :155 > sapce= "   a  "
 => "   a  " 
3.0.0 :156 > sapce.lstrip
 => "a  " 
3.0.0 :157 > sapce= "   a  "
 => "   a  " 
3.0.0 :158 > sapce.rstrip
 => "   a" 
 
 String Prefix & Suffix

 can use the start_with? method to check if  a string starts
  with a specific prefix.
  3.0.0 :159 > string = "ruby programming"
 => "ruby programming" 
3.0.0 :160 > 
3.0.0 :161 > string.start_with? "ruby"
 => true 

 There is also an end_with? method:
 3.0.0 :162 > string = "ruby programming"
 => "ruby programming" 
3.0.0 :163 > 
3.0.0 :164 > string.end_with? "programming"
 => true 

 and delete_prefix & delete_suffix methods to delete accordingly
 

 Converts a String to an array of characters
 Taking a string and breaking it down into an array of characters
  using "split" methods

It split the string based on the spaces  by default 
 3.0.0 :001 > name = "Shubham"
 => "Shubham" 
3.0.0 :002 > name.split
 => ["Shubham"] 
3.0.0 :003 > name = "S h u b h a m"
 => "S h u b h a m" 
3.0.0 :004 > name.split
 => ["S", "h", "u", "b", "h", "a", "m"] 

 but this can be split based on other delimiter
 like ',' 
 3.0.0 :005 > csv="a,s,d,f,g,h"
 => "a,s,d,f,g,h" 
3.0.0 :006 > csv.split
 => ["a,s,d,f,g,h"] 
 3.0.0 :010 > name="Shubham"
 => "Shubham" 
3.0.0 :011 > name.split("b")
 => ["Shu", "ham"] 

 Convert an array to string
 to take an array of strings and join them
 to make a single big string
 use  == join method


 3.0.0 :014 > arr=["Hello","How","are", "you?"]
 => ["Hello", "How", "are", "you?"] 
3.0.0 :015 > arr
 => ["Hello", "How", "are", "you?"] 
3.0.0 :016 > puts arr
Hello
How
are
you?
 => nil 
3.0.0 :017 > arr.join
 => "HelloHowareyou?" 

Special caracter can be give to join to add between different elements
while joining
3.0.0 :018 > arr=["Hello","How","are", "you?"]
 => ["Hello", "How", "are", "you?"] 
3.0.0 :019 > arr.join("-")
 => "Hello-How-are-you?"

 Convert a String into an integer
 using to_i can convert "49" to 49
 using = to_i method
 only no are converted not characters otherwise zero is printed 
 3.0.0 :022 > tonum.to_i
 => 0 
3.0.0 :023 > tonum="90"
 => "90" 
3.0.0 :024 > tonum.to_i
 => 90 

 To check if a string is a number
 if the string is made fully of number
 can use regex to compare the string
using match? method

write match?(/regex/)
3.0.0 :031 > tonum.match?(/\d/)
3.0.0 :032 >   
 => true 



How to append charactess
Strings can be appended to add on the string it same as string
concatenation.
can be done using << method
3.0.0 :003"> string=""
 => "" 
3.0.0 :004 > string << "hello"
3.0.0 :005 > 
 => "hello" 
3.0.0 :006 > string << "hello"
 => "hellohello" 
3.0.0 :007 > string << " hello"
 => "hellohello hello" 

 not to use += for string concatenation because that will create
  a new string every time, which is not good for performance

  How to iterate over a character of strings 
1. can use each_char method
3.0.0 :009 > string
 => "hellohello hello hello" 
3.0.0 :010 > string.each_char{ |ch| puts ch}
h
e
l
l
o
h
e
l
l
o
 
h
e
l
l
o
 
h
e
l
l
o
 => "hellohello hello hello" 

 2. can use chars method to convert the string into array of characters
 and then can use "each" on this array to iterate
  3.0.0 :011 > array_char=string.chars
 => ["h", "e", "l", "l", "o", "h", "e", "l", "l", "o", " ", "h", "e", "l", ... 
3.0.0 :012 > 

To convert a string to upper lower case or capitalize
using 
upcase method
downcase method
capitalize method

3.0.0 :012 > string.upcase
 => "HELLOHELLO HELLO HELLO" 
3.0.0 :013 > string.downcase
 => "hellohello hello hello" 
3.0.0 :014 > string.capitalize
 => "Hellohello hello hello" 

 Creating Multiline Strings
 can create multi line string in 2 ways
 1. Using heredocs:

3.0.0 :016"> x = <<-STRING
3.0.0 :017"> aaa
3.0.0 :018"> hello
3.0.0 :019"> what
3.0.0 :020"> to 
3.0.0 :021"> create multiline
3.0.0 :022"> string
3.0.0 :023 > STRING
 => "aaa\nhello\nwhat\nto \ncreate multiline\nstring\n" 
3.0.0 :024 > x
 => "aaa\nhello\nwhat\nto \ncreate multiline\nstring\n" 
3.0.0 :025 > puts x
aaa
hello
what
to 
create multiline
string
 => nil 

2. Method is to use %Q:
a = %Q
3.0.0 :027"> multi= %Q( here 
3.0.0 :028"> using multiline come
3.0.0 :029"> comment)
 => " here \nusing multiline come\ncomment" 
3.0.0 :030 > puts multi
 here 
using multiline come
comment
 => nil 

3. to use escape sequence \n
3.0.0 :031 > multin=" usning \n commentg \n to use \n here"
 => " usning \n commentg \n to use \n here" 
3.0.0 :032 > puts multin
 usning 
 commentg 
 to use 
 here


#Replace Text Inside a String Using The Gsub Method
3.0.0 :033 > string
 => "hellohello hello hello" 
3.0.0 :034 > string.gsub("llo","oll")
 => "heollheoll heoll heoll" 

 but it replcases every occurences of that character 
 it can also be used to remove occurence of that character
 3.0.0 :035 > string.gsub("llo","")
 => "hehe he he" 
 
 gsub returns new string so to create changen in that sring have to use
 gsub!
 gsub can also be used to  with regex to find substring to replace

3.0.0 :037 > string.gsub(/\w/,",")
 => ",,,,,,,,,, ,,,,, ,,,,," 
3.0.0 :038 > string.gsub(/\s/,",")
 => "hellohello,hello,hello" 
3.0.0 :040 > string
 => "hellohello hello hello" 
3.0.0 :041 > string.gsub!(/\s/,",")
 => "hellohello,hello,hello" 
3.0.0 :042 > string
 => "hellohello,hello,hello"


Remove the Last Character From a String
chomp method  to remove \n from last by default
3.0.0 :042 > string
 => "hellohello,hello,hello" 
3.0.0 :043 > string.chomp
 => "hellohello,hello,hello" 

can give character to chomp method if that character is not there 
it will return original string 
3.0.0 :044 > string.chomp("o")
 => "hellohello,hello,hell" 
 3.0.0 :045 > string.chomp("o")
 => "hellohello,hello,hell"

 How to Change String Encodings
Strings are stored as a sequence of bytes , they are turned into 
character based on encoding before we can see them
eg A is 65
but there can be complex encoding for different language character like
UTF-8
 encoding method is used to see it
 3.0.0 :046 > string.encoding
 => #<Encoding:UTF-8> 

 if some languadge is not supported by default encoding then it can be
 fixed using this method like
 "abc".force_encoding("UTF-8")


 Counting Character

 count method can be used to count the no of specific character in the string

3.0.0 :051 > string.count("h")
 => 4 
3.0.0 :052 > string.count("he")
 => 8 
3.0.0 :053 > string
 => "hellohello,hello,hello" 
3.0.0 :054 > string.count("hl")
 => 12 


Public Instance methods
% it speacifies the formating of the string
3.0.0 :009 > "%05d" %123
 => "00123" 
3.0.0 :010 > "%05s" %123
 => "  123" 
3.0.0 :011 > "%-5s" %123
 => "123  " 

 * copies the string that no of times
 3.0.0 :005 > name * 0
 => "" 
3.0.0 :006 > name * 3
 => "ShubhamShubhamShubham" 
3.0.0 :007 > name * -1
Traceback

+ is used for string concatenation
3.0.0 :008 > name + name
 => "ShubhamShubham" 

3.0.0 :009 > name  + "Jain"
 => "ShubhamJain" 
3.0.0 :010 > name  + " Jain"
 => "Shubham Jain" 
 

 What is frozen string ????

 << is also used for string concatenation  done above

 <=> is used for comparision
-1 if other_string is larger.
0 if the two are equal.
1 if other_string is smaller.
nil if the two are incomparable 

like casecmp?

3.0.0 :014 > name <=> "0123132323322"
 => 1 
3.0.0 :015 > name <=> "1234567"
 => 1 
3.0.0 :016 > name <=> "123"
 => 1 
3.0.0 :017 > name <=> "shubham"
 => -1 
3.0.0 :018 > name
 => "Shubham" 
3.0.0 :019 > name <=> "Shubham"
 => 0 
3.0.0 :
3.0.0 :020 > name.downcase <=> "shubham"
 => 0 
3.0.0 :021 > name <=> "shubham"
 => -1 

 == is used to compare the value and length of the two string

3.0.0 :023 > name == "shubham"
 => false 
3.0.0 :024 > name.downcase == "shubham"
 => true 
3.0.0 :025 > name.downcase == 123
 => false 

 will return false if two same value have different encoding

 =~ is used to find the 1st occurence of that string or regex
 3.0.0 :031 > name =~ /r/
 => nil 
3.0.0 :032 > into = "my name is #{name}"
 => "my name is Shubham" 
3.0.0 :033 > into
 => "my name is Shubham" 
3.0.0 :034 > into =~ /\Z/
 => 18 
3.0.0 :035 > into =~ /w+\Z/
 => nil 
3.0.0 :036 > into =~ /\w+\Z/
 => 11 


Here, class String provides methods that are useful for:

Creating a String

Frozen/Unfrozen Strings

Querying

Comparing

Modifying a String

Converting to New String

Converting to Non-String

Iterating

Methods for a Frozen/Unfrozen String¶ ↑
The freeze method in Ruby is used to ensure that an object cannot be modified. 
This method is a great way to create immutable objects.
#+string
Returns a string that is not frozen: self, if not frozen; self.dup otherwise.

#-string
Returns a string that is frozen: self, if already frozen; self.freeze otherwise.
3.0.0 :001 > a = 'abcdefgh'
 => "abcdefgh" 
3.0.0 :002 > +a
 => "abcdefgh" 
3.0.0 :003 > -a

freeze
Freezes self, if not already frozen; returns self.
3.0.0 :006 > a.freeze
 => "abcdefgh" 
3.0.0 :007 > a.frozen?
 => true 


Methods for Querying¶ ↑
Counts
count the no of chracter in the string of or the specified charatchter occurences3.0.0 :018 > a = "hello world"
 => "hello world" 
3.0.0 :019 > a.count "lo"     
 => 5 
3.0.0 :020 > a.count "l"     
 => 3 
3.0.0 :021 > a.count "ld"     
 => 4

bytesize
Returns the count of bytes.
3.0.0 :022 > a.bytesize
 => 11 


Substrings
index
Returns the index of the first occurrence of a given substring; returns nil if none found.
3.0.0 :024 > a
 => "hello world" 
3.0.0 :025 > a.index("l", -4)
 => 9 
3.0.0 :026 > a.index("l")
 => 2 
3.0.0 :027 > a.index("l",6)
 => 9 

rindex
Returns the index of the last occurrence of a given substring; returns nil if none found.
3.0.0 :028 > a.rindex("l",6)
 => 3 
3.0.0 :029 > a.rindex("l")
 => 9 
3.0.0 :030 > a.rindex("l", -4)
 => 3 

match
Returns a MatchData object if the string matches a given Regexp; nil otherwise.
3.0.0 :031 > a.match('l')
 => #<MatchData "l"> 
3.0.0 :032 > a.match('b')
 => nil 
3.0.0 :033 > a.match('H',8)
 => nil 
3.0.0 :034 > a.match('H')
 => nil 
3.0.0 :035 > a.match('h')
 => #<MatchData "h"> 
3.0.0 :036 > a.match('h',6)
 => nil 
 3.0.0 :041 > a.match(/o/) {|a| print a}
o => nil 

Other

sum
Returns a basic checksum for the string: the sum of each byte.

hash
Returns the integer hash code.
3.0.0 :046 > a.sum
 => 1116 
3.0.0 :047 > a.hash
 => 1249307583530095904 
3.0.0 :048 > b = a
 => "hello world" 
3.0.0 :049 > a.sum
 => 1116 
3.0.0 :050 > a.hash
 => 1249307583530095904 
3.0.0 :051 > 

Methods for Comparing

eql?
Returns true if the content is the same as the given other string.
3.0.0 :051 > a.eql?('helllo')
 => false 
3.0.0 :052 > a.eql?('hello')
 => false 
3.0.0 :053 > a.eql?('hello world')
 => true 

Methods for Modifying a String¶ ↑
Each of these methods modifies self.


Substitution

succ!, next!
Returns self modified to become its own successor.
3.0.0 :054 > a.succ
 => "hello worle" 
3.0.0 :057 > a.next!
 => "hello worle" 
3.0.0 :058 > a
 => "hello worle" 

replace
Returns self with its entire content replaced by a given string.

3.0.0 :059 > b.replace('gello')
 => "gello" 
3.0.0 :060 > b
 => "gello" 

reverse!
Returns self with its characters in reverse order.
3.0.0 :061 > b.reverse
 => "olleg" 
 
setbyte
Sets the byte at a given integer offset to a given value; returns the argument.
3.0.0 :062 > b
 => "gello" 
3.0.0 :063 > b.setbyte(0,98)
 => 98 
3.0.0 :064 > b
 => "bello" 
3.0.0 :065 > 
3.0.0 :066 > b.setbyte(0,112)
 => 112 
3.0.0 :067 > b
 => "pello" 

tr!
Replaces specified characters in self with specified replacement characters; returns self if any changes, nil otherwise.
3.0.0 :073 > b
 => "pello" 
3.0.0 :074 > b.tr!('pello','hello')
 => "hello" 
3.0.0 :075 > b

tr_s!
Replaces specified characters in self with specified replacement characters, removing duplicates from the substrings that were modified; returns self if any changes, nil otherwise.
3.0.0 :082 > b.tr_s!('dello','dellooooo000')
 => "delo" 
Casing

swapcase!
Upcases each downcase character and downcases each upcase character; returns self if any changes, nil otherwise.
3.0.0 :083 > c = 'DEfkefomSS'
 => "DEfkefomSS" 
3.0.0 :084 > c.swapcase
 => "deFKEFOMss"

Deletion

clear
Removes all content, so that self is empty; returns self.
3.0.0 :086 > c.clear
 => "" 
3.0.0 :087 > c
 => "" 

Methods for Converting to New String¶ ↑
Each of these methods returns a new String based on self, often just a modified copy of self.

Extension

center
Returns a copy of self centered between pad substring.
3.0.0 :161 > a.center(6)
 => "everythinghello to ruby programming" 
3.0.0 :162 > a.center(40)
 => "  everythinghello to ruby programming   " 
3.0.0 :163 > a.center(40, "***")
 => "**everythinghello to ruby programming***" 
3.0.0 :164 > 
concat
Returns the concatenation of self with given other strings.
3.0.0 :164 > a.concat(32, 'bar', 32, 'baz')
 => "everythinghello to ruby programming bar baz" 
3.0.0 :165 > a.concat(32, 'bar', 2, 'baz')
 => "everythinghello to ruby programming bar baz bar\u0002baz" 
 3.0.0 :166 > a.concat('bar', 'baz')
 => "everythinghello to ruby programming bar baz bar\u0002bazbarbaz" 
prepend
Returns the concatenation of a given other string with self.
3.0.0 :159 > a.prepend("everything")
 => "everythinghello to ruby programming" 

Encoding

b
Returns a copy of self with ASCII-8BIT encoding.

scrub
Returns a copy of self with each invalid byte replaced with a given character.
??????
Substitution

dump
Returns a copy of +self with all non-printing characters replaced by xHH notation and all special characters escaped.
undump
Returns a copy of +self with all \xNN notation replace by \uNNNN notation and all escaped characters unescaped.
3.0.0 :152 > a.dump
 => "\"hello to ruby programming\"" 
 => "hello to ruby programming" 
3.0.0 :154 > "\f\x00\xff\\\"" .undump

Deletion

delete
Returns a copy of self with characters removed
3.0.0 :144 > a.delete "l"
 => "heo to ruby programming" 
3.0.0 :145 > a.delete "m"
 => "hello to ruby prograing" 
 3.0.0 :147 > a.delete "aeiou" "^m"
 => "hll t rby prgrng" 
3.0.0 :148 > a.delete  "^m" "aeiou"
 => "eoouoammi" 
 
chop
Returns a copy of self with trailing whitespace or the last character removed.
3.0.0 :142 > a.chop
 => "hello to ruby programmin" 
3.0.0 :143 > a.chop.chop
 => "hello to ruby programmi" 

squeeze
Returns a copy of self with contiguous duplicate characters removed.
3.0.0 :140 > a.squeeze
 => "helo to ruby programing"

byteslice
Returns a substring determined by a given index, start/length, or range.
3.0.0 :138 > a
 => "hello to ruby programming" 
3.0.0 :139 > a.byteslice(4..9)
 => "o to r" 

3.0.0 :137 > a.byteslice(4)
 => "o" 
3.0.0 :138 > a
 => "hello to ruby programming" 
chr
Returns the first character.
3.0.0 :135 > a.chr
 => "h" 
3.0.0 :
Methods for Converting to Non-String¶ ↑
Each of these methods converts the contents of self to a non-String.

Characters, Bytes, and Clusters

bytes
Returns an array of the bytes in self.
chars
Returns an array of the characters in self.
3.0.0 :128 > a.chars
 => ["h", "e", "l", "l", "o", " ", "t", "o", " ", "r", "u", "b", "y", " ", "p", "r", "o", "g", "r", "a", "m", "m", "i", "n", "g"] 
3.0.0 :129 > a.bytes
 => [104, 101, 108, 108, 111, 32, 116, 111, 32, 114, 117, 98, 121, 32, 112, 114, 111, 103, 114, 97, 109, 109, 105, 110, 103] 
grapheme_clusters
Returns an array of the grapheme clusters in self.

Splitting

lines
Returns an array of the lines in self, as determined by a given record separator.
3.0.0 :133 > a.lines
 => ["hello to ruby programming"] 
3.0.0 :134 > a.lines(' ')
 => ["hello ", "to ", "ruby ", "programming"] 

partition
Returns a 3-element array determined by the first substring that matches a given substring or regexp,
rpartition
Returns a 3-element array determined by the last substring that matches a given substring or regexp,
3.0.0 :131 > a.rpartition(/.l/)
 => ["he", "ll", "o to ruby programming"] 
3.0.0 :132 > a.partition(/.l/)
 => ["h", "el", "lo to ruby programming"] 

Matching

scan
Returns an array of substrings matching a given regexp or string, or, if a block given, passes each matching substring to the block.
3.0.0 :125 > a.scan(/.../) 
 => ["hel", "lo ", "to ", "rub", "y p", "rog", "ram", "min"] 
3.0.0 :126 > a.scan(/\w+/) {|w| print "<<#{w}>> " }
<<hello>> <<to>> <<ruby>> <<programming>>  => "hello to ruby programming" 
3.0.0 :127 > a.scan(/(.)(.)/) {|x,y| print y, x }
ehll ootr bu yrpgoarmmni => "hello to ruby programming" 

unpack
Returns an array of substrings extracted from self according to a given format.
unpack1
Returns the first substring extracted from self according to a given format.
3.0.0 :121 > "abc \0\0abc \0\0".unpack1('A6Z6')
 => "abc" 
3.0.0 :122 > "abc \0\0abc \0\0".unpack('A6Z6')
 => ["abc", "abc "] 
3.0.0 :123 > "abc".unpack1("C*")
 => 97 
Numerics

hex
Returns the integer value of the leading characters, interpreted as hexadecimal digits.
3.0.0 :119 > "123".hex
 => 291 
3.0.0 :120 > a.hex
 => 0 

oct
Returns the integer value of the leading characters, interpreted as octal digits.
3.0.0 :117 > a.oct
 => 0 
3.0.0 :118 > "123".oct 
 => 83 
ord
Returns the integer ordinal of the first character in self.
3.0.0 :116 > a.ord
 => 104 
to_i
Returns the integer value of leading characters, interpreted as an integer.

to_f
Returns the floating-point value of leading characters, interpreted as a floating-point number.
3.0.0 :113 > a.to_f
 => 0.0 
3.0.0 :114 > a.to_i
 => 0 
3.0.0 :115 > a
 => "hello to ruby programming" 

Strings and Symbols

to_sym, intern
Returns the symbol corresponding to self.
3.0.0 :111 > a.intern
 => :"hello to ruby programming" 
3.0.0 :112 > a.to_sym
 => :"hello to ruby programming" 

Methods for Iterating¶ ↑
each_byte
Calls the given block with each successive byte in self.
3.0.0 :110 > a.each_byte {|c| print c, ' ' }
104 101 108 108 111 32 116 111 32 114 117 98 121 32 112 114 111 103 114 97 109 109 105 110 103  => "hello to ruby programming" 
3.0.0 :111 > 

each_char
Calls the given block with each successive character in self.
3.0.0 :109 > a.each_char {|c| print c, ' ' }
h e l l o   t o   r u b y   p r o g r a m m i n g  => "hello to ruby programming" 

each_codepoint
Calls the given block with each successive integer codepoint in self.
3.0.0 :107 > '\nhello'.each_codepoint {|c| print c, ' ' }
92 110 104 101 108 108 111  => "\\nhello" 
3.0.0 :108 > a.each_codepoint {|c| print c, ' ' }
104 101 108 108 111 32 116 111 32 114 117 98 121 32 112 114 111 103 114 97 109 109 105 110 103  => "hello to ruby programming" 

each_grapheme_cluster
Calls the given block with each successive grapheme cluster in self.
3.0.0 :103 > a.each_char.to_a.size
 => 25 
3.0.0 :104 > a.each_grapheme_cluster.to_a.size
 => 25 
3.0.0 :105 > '\nhello'.each_grapheme_cluster.to_a.size
 => 7 
3.0.0 :106 > '\nhello'.each_char.to_a.size
 => 7 

each_line
Calls the given block with each successive line in self, as determined by a given record separator.
3.0.0 :100 > a. each_line('l') {|a| p a}
"hel"
"l"
"o to ruby programming"
 => "hello to ruby programming" 
3.0.0 :101 > a. each_line {|a| p a}
"hello to ruby programming"
 => "hello to ruby programming" 
3.0.0 :102'> a. each_line(' ') {|a| p a}
"hello "
"to "
"ruby "
"programming"
 => "hello to ruby programming"

upto
Calls the given block with each string value returned by successive calls to succ.
3.0.0 :088 > '25'.upto('5') {|s| fail s }
 => "25" 
3.0.0 :089 > 'a8'.upto('b6') {|s| print s, ' ' }
a8 a9 b0 b1 b2 b3 b4 b5 b6  => "a8" 
If argument exclusive is given as a truthy object, the last value is omitted:
3.0.0 :090 > 'a8'.upto('b6', true) {|s| print s, ' ' }
a8 a9 b0 b1 b2 b3 b4 b5  => "a8" 



